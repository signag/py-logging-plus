2020-12-13 14:09:26,980 logging_plus         DEBUG        >>> Entry debug (/home/pi/dev/py-logging-plus/logging_plus/__init__.py - line 103 - module logging_plus)
2020-12-13 14:09:26,984 inspect              DEBUG            >>> Entry stack (/usr/lib/python3.7/inspect.py - line 1511 - module inspect)
2020-12-13 14:09:26,986 inspect              DEBUG                >>> Entry getouterframes (/usr/lib/python3.7/inspect.py - line 1483 - module inspect)
2020-12-13 14:09:26,988 inspect              DEBUG                    >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:26,990 inspect              DEBUG                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:26,992 inspect              DEBUG                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:26,994 inspect              DEBUG                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:26,996 inspect              DEBUG                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:26,998 inspect              DEBUG                        >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:27,000 inspect              DEBUG                            >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:27,002 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:27,004 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:27,006 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:27,008 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:27,010 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:27,012 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:27,015 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:27,017 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:27,019 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:27,021 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:27,023 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:27,025 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:27,027 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:27,030 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:27,032 inspect              DEBUG                            <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:27,035 inspect              DEBUG                            >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:27,037 inspect              DEBUG                            <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,039 inspect              DEBUG                            >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:27,042 inspect              DEBUG                            <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,044 inspect              DEBUG                            >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:27,046 inspect              DEBUG                            <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:27,049 inspect              DEBUG                            >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,051 inspect              DEBUG                            <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,056 inspect              DEBUG                            >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,059 inspect              DEBUG                            <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,061 inspect              DEBUG                            >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,064 inspect              DEBUG                            <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,066 inspect              DEBUG                            >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,068 inspect              DEBUG                            <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:27,071 genericpath          DEBUG                            >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:27,074 genericpath          DEBUG                            <<< Exit  exists : Return value: True
2020-12-13 14:09:27,076 inspect              DEBUG                        <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:27,078 inspect              DEBUG                        >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:27,080 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:27,083 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:27,085 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:27,089 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:27,091 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:27,094 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:27,097 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:27,099 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:27,101 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:27,103 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:27,106 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:27,108 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:27,111 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:27,113 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:27,115 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:27,118 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:27,120 inspect              DEBUG                                <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:27,122 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:27,125 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,128 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:27,131 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,134 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:27,138 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:27,142 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,145 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,148 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,151 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,155 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,157 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,159 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,162 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:27,164 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:27,166 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:27,168 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:27,171 linecache            DEBUG                            >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:27,173 linecache            DEBUG                            <<< Exit  checkcache : Return value: None
2020-12-13 14:09:27,175 inspect              DEBUG                            >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:27,178 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:27,180 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:27,183 inspect              DEBUG                            <<< Exit  getmodule : Return value: <module 'logging_plus' from '/home/pi/dev/py-logging-plus/logging_plus/__init__.py'>
2020-12-13 14:09:27,185 linecache            DEBUG                            >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:27,188 linecache            DEBUG                            <<< Exit  getlines : Return value: ['#MIT License\n', '#\n', '#Copyright (c) 2020 signag\n', '#\n', '#Permission is hereby granted, free of charge, to any person obtaining a copy\n', '#of this software and associated documentation files (the "Software"), to deal\n', '#in the Software without restriction, including without limitation the rights\n', '#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '#copies of the Software, and to permit persons to whom the Software is\n', '#furnished to do so, subject to the following conditions:\n', '#\n', '#The above copyright notice and this permission notice shall be included in all\n', '#copies or substantial portions of the Software.\n', '#\n', '#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '#SOFTWARE.\n', '"""\n', '`logging_plus` - Add-on to Python logging\n', '\n', 'This module extends the standard Python logging module for the following aspects:\n', '- Subclassing Logger allows customization of logging messages depending on context\n', '- This is used for automatic indentation depending on call stack level\n', '- The module provides also the capability to generically log function entry and exit\n', '"""\n', 'import logging\n', 'import inspect\n', 'import sys\n', 'import atexit\n', '\n', '#---------------------------------------------------------------------------\n', '#   Miscellaneous module data\n', '#---------------------------------------------------------------------------\n', '#\n', '#This parameter controls whether or not logging inside infrastructure modules is activated.\n', '#The following modules are affected: inspect, logging, logging-plus\n', '#\n', 'noInfrastructureLogging = True\n', '\n', 'class Manager(logging.Manager):\n', '    """\n', '    Subclassing logging.Manager supports instantiating the subclassed Logger\n', '    instead of the standard Logger.\n', '    """\n', '    def __init__(self, rootnode):\n', '        """\n', '        Initialize the manager\n', '        """\n', '        super().__init__(rootnode)\n', '\n', '    def getLogger(self, name):\n', '        """\n', '        Return the subclassed Logger rather than the standard Logger\n', '        """\n', '        rv = None\n', '        if not isinstance(name, str):\n', "            raise TypeError('A logger name must be a string')\n", '        logging._acquireLock()\n', '        try:\n', '            if name in self.loggerDict:\n', '                rv = self.loggerDict[name]\n', '                if isinstance(rv, logging.PlaceHolder):\n', '                    ph = rv\n', '                    rv = (self.loggerClass or _loggerClass)(name)\n', '                    rv.manager = self\n', '                    self.loggerDict[name] = rv\n', '                    self._fixupChildren(ph, rv)\n', '                    self._fixupParents(rv)\n', '            else:\n', '                rv = (self.loggerClass or _loggerClass)(name)\n', '                rv.manager = self\n', '                self.loggerDict[name] = rv\n', '                self._fixupParents(rv)\n', '        finally:\n', '            logging._releaseLock()\n', '        return rv\n', '\n', '    def cleanupLoggers(self):\n', '        """\n', '        Remove registered file handlers from all available loggers\n', '        """\n', '        lgr = root\n', '        for hdl in reversed(lgr.handlers):\n', '            if isinstance(hdl, logging.FileHandler):\n', '                lgr.removeHandler(hdl)\n', '        for lgName in self.loggerDict:\n', '            lgr = self.getLogger(lgName)\n', '            for hdl in lgr.handlers:\n', '                if isinstance(hdl, logging.FileHandler):\n', '                    lgr.removeHandler(hdl)\n', '\n', 'class Logger(logging.Logger):\n', '    def __init__(self, name, level=logging.NOTSET):\n', '        """\n', '        Initialize the subclassed Logger\n', '        """\n', '        super().__init__(name, level)\n', '\n', '    def debug(self, msg, *args, **kwargs):\n', '        """\n', '        Indent DEBUG message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def info(self, msg, *args, **kwargs):\n', '        """\n', '        Indent INFO message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().info(msg, *args, **kwargs)\n', '\n', '    def warning(self, msg, *args, **kwargs):\n', '        """\n', '        Indent WARNING message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().warning(msg, *args, **kwargs)\n', '\n', '    def error(self, msg, *args, **kwargs):\n', '        """\n', '        Indent ERROR message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().error(msg, *args, **kwargs)\n', '\n', '    def logEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def logExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', 'class RootLogger(Logger):\n', '    """\n', '    This is the extended root logger\n', '    """\n', '    def __init__(self, level):\n', '        """\n', '        Initialize the logger with the name "root".\n', '        """\n', '        Logger.__init__(self, "root", level)\n', '\n', '_loggerClass = Logger\n', '\n', '\n', 'root = RootLogger(logging.WARNING)\n', 'Logger.root = root\n', 'Logger.manager = Manager(Logger.root)\n', '\n', 'def getLogger(name=None):\n', '    """\n', '    Return an extended logger with the specified name, creating it if necessary.\n', '\n', '    If no name is specified, return the root logger.\n', '    """\n', '    if not name or isinstance(name, str) and name == root.name:\n', '        return root\n', '    return Logger.manager.getLogger(name)\n', '\n', 'def excludeFromLogging(frame):\n', '    """\n', '    Check whether frame shall be excluded from logging.\n', '\n', '    This is the case if the module of the frame itself or on of its outer frames\n', '    belongs to the inspect or logging infrastructure\n', '    """\n', '    if not frame:\n', '        return False\n', '\n', '    module = inspect.getmodule(frame)\n', '    if not module:\n', '        return False\n', '\n', '    moduleName = module.__name__\n', '\n', '    if (moduleName == "inspect") \\\n', '    or (moduleName == "logging") \\\n', '    or (moduleName == __name__):\n', '        #Do not log inside infrastructure modules\n', '        return True\n', '    else:\n', '        oframe = frame.f_back\n', '        if not oframe:\n', '            return False\n', '        return excludeFromLogging(oframe)\n', '\n', 'def autoLogIgnore(frame, event, arg):\n', '    """\n', '    Function to register as trace function for scopes where logging shall be deactivated.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call'):\n", '        #Only call needs to be sensed       \n', '        return autoLogIgnore\n', '\n', 'def autoLogEntryExit(frame, event, arg):\n', '    """\n', '    Function to register as trace function for the current scope.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call') or (event == 'return'):\n", '        #Only call and return events are sensed\n', '        if not frame:\n', '            return autoLogIgnore\n', '\n', '        code_obj = frame.f_code\n', '        func_name = code_obj.co_name\n', '        file_name = code_obj.co_filename\n', '        file_line = code_obj.co_firstlineno\n', '\n', '        module = inspect.getmodule(frame)\n', '        if not module:\n', '            return autoLogIgnore\n', '\n', '        moduleName = module.__name__\n', '\n', "        if event == 'call':\n", '            #System has been entering a new scope.\n', '            if noInfrastructureLogging:\n', '                if excludeFromLogging(frame):\n', '                    return autoLogIgnore\n', '\n', "            getLogger(moduleName).autoLogEntry('%s (%s - line %s - module %s)', func_name, file_name, file_line, moduleName)\n", '            #The function returns a reference to itself, in order to register itself as trace functuion for the new scope\n', '            return autoLogEntryExit\n', "        elif event == 'return':\n", '            #System is about to exit a scope (function or other code block). arg is the value being returned.\n', "            getLogger(moduleName).autoLogExit ('%s : Return value: %s', func_name, arg)\n", '\n', 'def removeFileHandlers():\n', '    """This function removes file handlers from available loggers in order to avoid a race condition during shutdown\n', '    The Python shutdown sequence is as follows:\n', '    1. Stop main thread\n', '    2. Close open file handlers\n', '    3. Wait for termination of non-daemon threads\n', '    4. Execute registered atexit functions\n', '    5. Garbage collection\n', '    6. Process termination\n', '\n', '    If class __del__ functions include logging with file handlers, and if ojects are destroyed \n', '    during garbage collection (5), file output will lead to an exception \n', '    because open file handlers have already been closed (2).\n', '    \n', '    Note: This applies only to explicit logging within the __del__ functions.\n', '    Automatic logging of entry and exit has already been switched off at this time \n', '    through unregisterAutoLogEntryExit.\n', '    """\n', '    mgr = getLogger().manager\n', '    mgr.cleanupLoggers()\n', '\n', 'def registerAutoLogEntryExit():\n', '    """\n', '    Register autoLogEntryExit as system trace function\n', '\n', '    This will issue logging whenever a function scope is entered or exited\n', '    """\n', '    sys.settrace(autoLogEntryExit)\n', '\n', 'def unregisterAutoLogEntryExit():\n', '    """\n', '    Clear system trace function\n', '\n', '    This will stop logging function entry / exit\n', '    """\n', '    sys.settrace(None)\n', '\n', '#Register unregisterAutoLogEntryExit to avoid logging exceptions during module shutdown\n', 'atexit.register(removeFileHandlers)\n', 'atexit.register(unregisterAutoLogEntryExit)\n']
2020-12-13 14:09:27,195 inspect              DEBUG                            >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:27,197 inspect              DEBUG                            <<< Exit  ismodule : Return value: False
2020-12-13 14:09:27,200 inspect              DEBUG                            >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:27,202 inspect              DEBUG                            <<< Exit  isclass : Return value: False
2020-12-13 14:09:27,205 inspect              DEBUG                            >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:27,208 inspect              DEBUG                            <<< Exit  ismethod : Return value: False
2020-12-13 14:09:27,210 inspect              DEBUG                            >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:27,212 inspect              DEBUG                            <<< Exit  isfunction : Return value: False
2020-12-13 14:09:27,215 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:27,217 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:27,219 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:27,222 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:27,224 inspect              DEBUG                            >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:27,226 inspect              DEBUG                            <<< Exit  iscode : Return value: True
2020-12-13 14:09:27,230 re                   DEBUG                            >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:27,232 re                   DEBUG                                >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:27,235 re                   DEBUG                                <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:27,237 re                   DEBUG                            <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:27,239 inspect              DEBUG                        <<< Exit  findsource : Return value: (['#MIT License\n', '#\n', '#Copyright (c) 2020 signag\n', '#\n', '#Permission is hereby granted, free of charge, to any person obtaining a copy\n', '#of this software and associated documentation files (the "Software"), to deal\n', '#in the Software without restriction, including without limitation the rights\n', '#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '#copies of the Software, and to permit persons to whom the Software is\n', '#furnished to do so, subject to the following conditions:\n', '#\n', '#The above copyright notice and this permission notice shall be included in all\n', '#copies or substantial portions of the Software.\n', '#\n', '#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '#SOFTWARE.\n', '"""\n', '`logging_plus` - Add-on to Python logging\n', '\n', 'This module extends the standard Python logging module for the following aspects:\n', '- Subclassing Logger allows customization of logging messages depending on context\n', '- This is used for automatic indentation depending on call stack level\n', '- The module provides also the capability to generically log function entry and exit\n', '"""\n', 'import logging\n', 'import inspect\n', 'import sys\n', 'import atexit\n', '\n', '#---------------------------------------------------------------------------\n', '#   Miscellaneous module data\n', '#---------------------------------------------------------------------------\n', '#\n', '#This parameter controls whether or not logging inside infrastructure modules is activated.\n', '#The following modules are affected: inspect, logging, logging-plus\n', '#\n', 'noInfrastructureLogging = True\n', '\n', 'class Manager(logging.Manager):\n', '    """\n', '    Subclassing logging.Manager supports instantiating the subclassed Logger\n', '    instead of the standard Logger.\n', '    """\n', '    def __init__(self, rootnode):\n', '        """\n', '        Initialize the manager\n', '        """\n', '        super().__init__(rootnode)\n', '\n', '    def getLogger(self, name):\n', '        """\n', '        Return the subclassed Logger rather than the standard Logger\n', '        """\n', '        rv = None\n', '        if not isinstance(name, str):\n', "            raise TypeError('A logger name must be a string')\n", '        logging._acquireLock()\n', '        try:\n', '            if name in self.loggerDict:\n', '                rv = self.loggerDict[name]\n', '                if isinstance(rv, logging.PlaceHolder):\n', '                    ph = rv\n', '                    rv = (self.loggerClass or _loggerClass)(name)\n', '                    rv.manager = self\n', '                    self.loggerDict[name] = rv\n', '                    self._fixupChildren(ph, rv)\n', '                    self._fixupParents(rv)\n', '            else:\n', '                rv = (self.loggerClass or _loggerClass)(name)\n', '                rv.manager = self\n', '                self.loggerDict[name] = rv\n', '                self._fixupParents(rv)\n', '        finally:\n', '            logging._releaseLock()\n', '        return rv\n', '\n', '    def cleanupLoggers(self):\n', '        """\n', '        Remove registered file handlers from all available loggers\n', '        """\n', '        lgr = root\n', '        for hdl in reversed(lgr.handlers):\n', '            if isinstance(hdl, logging.FileHandler):\n', '                lgr.removeHandler(hdl)\n', '        for lgName in self.loggerDict:\n', '            lgr = self.getLogger(lgName)\n', '            for hdl in lgr.handlers:\n', '                if isinstance(hdl, logging.FileHandler):\n', '                    lgr.removeHandler(hdl)\n', '\n', 'class Logger(logging.Logger):\n', '    def __init__(self, name, level=logging.NOTSET):\n', '        """\n', '        Initialize the subclassed Logger\n', '        """\n', '        super().__init__(name, level)\n', '\n', '    def debug(self, msg, *args, **kwargs):\n', '        """\n', '        Indent DEBUG message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def info(self, msg, *args, **kwargs):\n', '        """\n', '        Indent INFO message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().info(msg, *args, **kwargs)\n', '\n', '    def warning(self, msg, *args, **kwargs):\n', '        """\n', '        Indent WARNING message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().warning(msg, *args, **kwargs)\n', '\n', '    def error(self, msg, *args, **kwargs):\n', '        """\n', '        Indent ERROR message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().error(msg, *args, **kwargs)\n', '\n', '    def logEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def logExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', 'class RootLogger(Logger):\n', '    """\n', '    This is the extended root logger\n', '    """\n', '    def __init__(self, level):\n', '        """\n', '        Initialize the logger with the name "root".\n', '        """\n', '        Logger.__init__(self, "root", level)\n', '\n', '_loggerClass = Logger\n', '\n', '\n', 'root = RootLogger(logging.WARNING)\n', 'Logger.root = root\n', 'Logger.manager = Manager(Logger.root)\n', '\n', 'def getLogger(name=None):\n', '    """\n', '    Return an extended logger with the specified name, creating it if necessary.\n', '\n', '    If no name is specified, return the root logger.\n', '    """\n', '    if not name or isinstance(name, str) and name == root.name:\n', '        return root\n', '    return Logger.manager.getLogger(name)\n', '\n', 'def excludeFromLogging(frame):\n', '    """\n', '    Check whether frame shall be excluded from logging.\n', '\n', '    This is the case if the module of the frame itself or on of its outer frames\n', '    belongs to the inspect or logging infrastructure\n', '    """\n', '    if not frame:\n', '        return False\n', '\n', '    module = inspect.getmodule(frame)\n', '    if not module:\n', '        return False\n', '\n', '    moduleName = module.__name__\n', '\n', '    if (moduleName == "inspect") \\\n', '    or (moduleName == "logging") \\\n', '    or (moduleName == __name__):\n', '        #Do not log inside infrastructure modules\n', '        return True\n', '    else:\n', '        oframe = frame.f_back\n', '        if not oframe:\n', '            return False\n', '        return excludeFromLogging(oframe)\n', '\n', 'def autoLogIgnore(frame, event, arg):\n', '    """\n', '    Function to register as trace function for scopes where logging shall be deactivated.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call'):\n", '        #Only call needs to be sensed       \n', '        return autoLogIgnore\n', '\n', 'def autoLogEntryExit(frame, event, arg):\n', '    """\n', '    Function to register as trace function for the current scope.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call') or (event == 'return'):\n", '        #Only call and return events are sensed\n', '        if not frame:\n', '            return autoLogIgnore\n', '\n', '        code_obj = frame.f_code\n', '        func_name = code_obj.co_name\n', '        file_name = code_obj.co_filename\n', '        file_line = code_obj.co_firstlineno\n', '\n', '        module = inspect.getmodule(frame)\n', '        if not module:\n', '            return autoLogIgnore\n', '\n', '        moduleName = module.__name__\n', '\n', "        if event == 'call':\n", '            #System has been entering a new scope.\n', '            if noInfrastructureLogging:\n', '                if excludeFromLogging(frame):\n', '                    return autoLogIgnore\n', '\n', "            getLogger(moduleName).autoLogEntry('%s (%s - line %s - module %s)', func_name, file_name, file_line, moduleName)\n", '            #The function returns a reference to itself, in order to register itself as trace functuion for the new scope\n', '            return autoLogEntryExit\n', "        elif event == 'return':\n", '            #System is about to exit a scope (function or other code block). arg is the value being returned.\n', "            getLogger(moduleName).autoLogExit ('%s : Return value: %s', func_name, arg)\n", '\n', 'def removeFileHandlers():\n', '    """This function removes file handlers from available loggers in order to avoid a race condition during shutdown\n', '    The Python shutdown sequence is as follows:\n', '    1. Stop main thread\n', '    2. Close open file handlers\n', '    3. Wait for termination of non-daemon threads\n', '    4. Execute registered atexit functions\n', '    5. Garbage collection\n', '    6. Process termination\n', '\n', '    If class __del__ functions include logging with file handlers, and if ojects are destroyed \n', '    during garbage collection (5), file output will lead to an exception \n', '    because open file handlers have already been closed (2).\n', '    \n', '    Note: This applies only to explicit logging within the __del__ functions.\n', '    Automatic logging of entry and exit has already been switched off at this time \n', '    through unregisterAutoLogEntryExit.\n', '    """\n', '    mgr = getLogger().manager\n', '    mgr.cleanupLoggers()\n', '\n', 'def registerAutoLogEntryExit():\n', '    """\n', '    Register autoLogEntryExit as system trace function\n', '\n', '    This will issue logging whenever a function scope is entered or exited\n', '    """\n', '    sys.settrace(autoLogEntryExit)\n', '\n', 'def unregisterAutoLogEntryExit():\n', '    """\n', '    Clear system trace function\n', '\n', '    This will stop logging function entry / exit\n', '    """\n', '    sys.settrace(None)\n', '\n', '#Register unregisterAutoLogEntryExit to avoid logging exceptions during module shutdown\n', 'atexit.register(removeFileHandlers)\n', 'atexit.register(unregisterAutoLogEntryExit)\n'], 102)
2020-12-13 14:09:27,245 inspect              DEBUG                    <<< Exit  getframeinfo : Return value: Traceback(filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0)
2020-12-13 14:09:27,248 inspect              DEBUG                    >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:27,250 inspect              DEBUG                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:27,252 inspect              DEBUG                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:27,254 inspect              DEBUG                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:27,256 inspect              DEBUG                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:27,258 inspect              DEBUG                        >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:27,260 inspect              DEBUG                            >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:27,262 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:27,264 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:27,266 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:27,269 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:27,271 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:27,273 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:27,275 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:27,277 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:27,279 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:27,281 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:27,283 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:27,285 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:27,287 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:27,290 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:27,292 inspect              DEBUG                            <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:27,296 inspect              DEBUG                            >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:27,298 inspect              DEBUG                            <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,302 inspect              DEBUG                            >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:27,305 inspect              DEBUG                            <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,308 inspect              DEBUG                            >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:27,311 inspect              DEBUG                            <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:27,315 inspect              DEBUG                            >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,319 inspect              DEBUG                            <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,323 inspect              DEBUG                            >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,326 inspect              DEBUG                            <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,329 inspect              DEBUG                            >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,332 inspect              DEBUG                            <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,335 inspect              DEBUG                            >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,338 inspect              DEBUG                            <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:27,341 genericpath          DEBUG                            >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:27,344 genericpath          DEBUG                            <<< Exit  exists : Return value: True
2020-12-13 14:09:27,346 inspect              DEBUG                        <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:27,349 inspect              DEBUG                        >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:27,352 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:27,354 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:27,358 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:27,361 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:27,364 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:27,368 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:27,371 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:27,375 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:27,378 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:27,381 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:27,386 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:27,389 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:27,393 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:27,396 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:27,398 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:27,401 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:27,403 inspect              DEBUG                                <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:27,406 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:27,409 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,411 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:27,413 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,416 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:27,418 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:27,420 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,423 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,426 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,429 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,432 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,436 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,439 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,442 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:27,445 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:27,448 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:27,451 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:27,454 linecache            DEBUG                            >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:27,456 linecache            DEBUG                            <<< Exit  checkcache : Return value: None
2020-12-13 14:09:27,459 inspect              DEBUG                            >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:27,462 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:27,464 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:27,467 inspect              DEBUG                                >>> Entry getabsfile (/usr/lib/python3.7/inspect.py - line 702 - module inspect)
2020-12-13 14:09:27,471 posixpath            DEBUG                                    >>> Entry abspath (/usr/lib/python3.7/posixpath.py - line 376 - module posixpath)
2020-12-13 14:09:27,474 posixpath            DEBUG                                        >>> Entry isabs (/usr/lib/python3.7/posixpath.py - line 64 - module posixpath)
2020-12-13 14:09:27,476 posixpath            DEBUG                                            >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:27,479 posixpath            DEBUG                                            <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:27,482 posixpath            DEBUG                                        <<< Exit  isabs : Return value: False
2020-12-13 14:09:27,485 posixpath            DEBUG                                        >>> Entry join (/usr/lib/python3.7/posixpath.py - line 75 - module posixpath)
2020-12-13 14:09:27,487 posixpath            DEBUG                                            >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:27,490 posixpath            DEBUG                                            <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:27,493 posixpath            DEBUG                                        <<< Exit  join : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:27,495 posixpath            DEBUG                                        >>> Entry normpath (/usr/lib/python3.7/posixpath.py - line 338 - module posixpath)
2020-12-13 14:09:27,498 posixpath            DEBUG                                        <<< Exit  normpath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:27,500 posixpath            DEBUG                                    <<< Exit  abspath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:27,502 posixpath            DEBUG                                    >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:27,504 posixpath            DEBUG                                    <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:27,506 inspect              DEBUG                                <<< Exit  getabsfile : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:27,508 inspect              DEBUG                            <<< Exit  getmodule : Return value: <module '__main__' from 'logTest.py'>
2020-12-13 14:09:27,510 linecache            DEBUG                            >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:27,513 linecache            DEBUG                            <<< Exit  getlines : Return value: ['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n']
2020-12-13 14:09:27,515 inspect              DEBUG                            >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:27,517 inspect              DEBUG                            <<< Exit  ismodule : Return value: False
2020-12-13 14:09:27,520 inspect              DEBUG                            >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:27,522 inspect              DEBUG                            <<< Exit  isclass : Return value: False
2020-12-13 14:09:27,524 inspect              DEBUG                            >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:27,526 inspect              DEBUG                            <<< Exit  ismethod : Return value: False
2020-12-13 14:09:27,528 inspect              DEBUG                            >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:27,530 inspect              DEBUG                            <<< Exit  isfunction : Return value: False
2020-12-13 14:09:27,532 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:27,534 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:27,536 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:27,538 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:27,539 inspect              DEBUG                            >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:27,541 inspect              DEBUG                            <<< Exit  iscode : Return value: True
2020-12-13 14:09:27,544 re                   DEBUG                            >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:27,546 re                   DEBUG                                >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:27,548 re                   DEBUG                                <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:27,551 re                   DEBUG                            <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:27,553 inspect              DEBUG                        <<< Exit  findsource : Return value: (['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n'], 0)
2020-12-13 14:09:27,556 inspect              DEBUG                    <<< Exit  getframeinfo : Return value: Traceback(filename='logTest.py', lineno=39, function='<module>', code_context=['logger.debug("## Explicit log: Start")\n'], index=0)
2020-12-13 14:09:27,559 inspect              DEBUG                <<< Exit  getouterframes : Return value: [FrameInfo(frame=<frame at 0x7fb12c43e8, file '/home/pi/dev/py-logging-plus/logging_plus/__init__.py', line 107, code debug>, filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0), FrameInfo(frame=<frame at 0x7fb15c19f8, file 'logTest.py', line 39, code <module>>, filename='logTest.py', lineno=39, function='<module>', code_context=['logger.debug("## Explicit log: Start")\n'], index=0)]
2020-12-13 14:09:27,561 inspect              DEBUG            <<< Exit  stack : Return value: [FrameInfo(frame=<frame at 0x7fb12c43e8, file '/home/pi/dev/py-logging-plus/logging_plus/__init__.py', line 107, code debug>, filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0), FrameInfo(frame=<frame at 0x7fb15c19f8, file 'logTest.py', line 39, code <module>>, filename='logTest.py', lineno=39, function='<module>', code_context=['logger.debug("## Explicit log: Start")\n'], index=0)]
2020-12-13 14:09:27,565 logging              DEBUG            >>> Entry debug (/usr/lib/python3.7/logging/__init__.py - line 1361 - module logging)
2020-12-13 14:09:27,567 logging              DEBUG                >>> Entry isEnabledFor (/usr/lib/python3.7/logging/__init__.py - line 1619 - module logging)
2020-12-13 14:09:27,569 logging              DEBUG                    >>> Entry _acquireLock (/usr/lib/python3.7/logging/__init__.py - line 212 - module logging)
2020-12-13 14:09:27,571 logging              DEBUG                    <<< Exit  _acquireLock : Return value: None
2020-12-13 14:09:27,573 logging              DEBUG                    >>> Entry getEffectiveLevel (/usr/lib/python3.7/logging/__init__.py - line 1605 - module logging)
2020-12-13 14:09:27,575 logging              DEBUG                    <<< Exit  getEffectiveLevel : Return value: 10
2020-12-13 14:09:27,577 logging              DEBUG                    >>> Entry _releaseLock (/usr/lib/python3.7/logging/__init__.py - line 221 - module logging)
2020-12-13 14:09:27,578 logging              DEBUG                    <<< Exit  _releaseLock : Return value: None
2020-12-13 14:09:27,580 logging              DEBUG                <<< Exit  isEnabledFor : Return value: True
2020-12-13 14:09:27,582 logging              DEBUG                >>> Entry _log (/usr/lib/python3.7/logging/__init__.py - line 1496 - module logging)
2020-12-13 14:09:27,583 logging              DEBUG                    >>> Entry findCaller (/usr/lib/python3.7/logging/__init__.py - line 1451 - module logging)
2020-12-13 14:09:27,585 logging              DEBUG                        >>> Entry <lambda> (/usr/lib/python3.7/logging/__init__.py - line 154 - module logging)
2020-12-13 14:09:27,587 logging              DEBUG                        <<< Exit  <lambda> : Return value: <frame at 0x1492ce8, file '/usr/lib/python3.7/logging/__init__.py', line 1371, code debug>
2020-12-13 14:09:27,589 posixpath            DEBUG                        >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:27,591 posixpath            DEBUG                        <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:27,593 logging              DEBUG                    <<< Exit  findCaller : Return value: ('/home/pi/dev/py-logging-plus/logging_plus/__init__.py', 109, 'debug', None)
2020-12-13 14:09:27,595 logging              DEBUG                    >>> Entry makeRecord (/usr/lib/python3.7/logging/__init__.py - line 1481 - module logging)
2020-12-13 14:09:27,597 logging              DEBUG                        >>> Entry __init__ (/usr/lib/python3.7/logging/__init__.py - line 293 - module logging)
2020-12-13 14:09:27,600 logging              DEBUG                            >>> Entry getLevelName (/usr/lib/python3.7/logging/__init__.py - line 117 - module logging)
2020-12-13 14:09:27,602 logging              DEBUG                            <<< Exit  getLevelName : Return value: DEBUG
2020-12-13 14:09:27,604 posixpath            DEBUG                            >>> Entry basename (/usr/lib/python3.7/posixpath.py - line 144 - module posixpath)
2020-12-13 14:09:27,606 posixpath            DEBUG                                >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:27,608 posixpath            DEBUG                                <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:27,610 posixpath            DEBUG                            <<< Exit  basename : Return value: __init__.py
2020-12-13 14:09:27,612 posixpath            DEBUG                            >>> Entry splitext (/usr/lib/python3.7/posixpath.py - line 121 - module posixpath)
2020-12-13 14:09:27,614 genericpath          DEBUG                                >>> Entry _splitext (/usr/lib/python3.7/genericpath.py - line 117 - module genericpath)
2020-12-13 14:09:27,617 genericpath          DEBUG                                <<< Exit  _splitext : Return value: ('__init__', '.py')
2020-12-13 14:09:27,618 posixpath            DEBUG                            <<< Exit  splitext : Return value: ('__init__', '.py')
2020-12-13 14:09:27,622 threading            DEBUG                            >>> Entry current_thread (/usr/lib/python3.7/threading.py - line 1214 - module threading)
2020-12-13 14:09:27,624 threading            DEBUG                            <<< Exit  current_thread : Return value: <_MainThread(MainThread, started 548443516944)>
2020-12-13 14:09:27,626 threading            DEBUG                            >>> Entry name (/usr/lib/python3.7/threading.py - line 1052 - module threading)
2020-12-13 14:09:27,628 threading            DEBUG                            <<< Exit  name : Return value: MainThread
2020-12-13 14:09:27,630 logging              DEBUG                        <<< Exit  __init__ : Return value: None
2020-12-13 14:09:27,632 logging              DEBUG                    <<< Exit  makeRecord : Return value: <LogRecord: root, 10, /home/pi/dev/py-logging-plus/logging_plus/__init__.py, 109, "    ## Explicit log: Start">
2020-12-13 14:09:27,634 logging              DEBUG                    >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 1521 - module logging)
2020-12-13 14:09:27,636 logging              DEBUG                        >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:27,637 logging              DEBUG                        <<< Exit  filter : Return value: True
2020-12-13 14:09:27,639 logging              DEBUG                        >>> Entry callHandlers (/usr/lib/python3.7/logging/__init__.py - line 1575 - module logging)
2020-12-13 14:09:27,641 logging              DEBUG                            >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 892 - module logging)
2020-12-13 14:09:27,643 logging              DEBUG                                >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:27,646 logging              DEBUG                                <<< Exit  filter : Return value: True
2020-12-13 14:09:27,648 logging              DEBUG                                >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:27,650 logging              DEBUG                                <<< Exit  acquire : Return value: None
2020-12-13 14:09:27,652 logging              DEBUG                                >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1022 - module logging)
2020-12-13 14:09:27,655 logging              DEBUG                                    >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 869 - module logging)
2020-12-13 14:09:27,657 logging              DEBUG                                        >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 606 - module logging)
2020-12-13 14:09:27,660 logging              DEBUG                                            >>> Entry getMessage (/usr/lib/python3.7/logging/__init__.py - line 371 - module logging)
2020-12-13 14:09:27,663 logging              DEBUG                                            <<< Exit  getMessage : Return value:     ## Explicit log: Start
2020-12-13 14:09:27,665 logging              DEBUG                                            >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 584 - module logging)
2020-12-13 14:09:27,668 logging              DEBUG                                                >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 429 - module logging)
2020-12-13 14:09:27,670 logging              DEBUG                                                <<< Exit  usesTime : Return value: True
2020-12-13 14:09:27,673 logging              DEBUG                                            <<< Exit  usesTime : Return value: True
2020-12-13 14:09:27,675 logging              DEBUG                                            >>> Entry formatTime (/usr/lib/python3.7/logging/__init__.py - line 539 - module logging)
2020-12-13 14:09:27,678 logging              DEBUG                                            <<< Exit  formatTime : Return value: 2020-12-13 14:09:27,598
2020-12-13 14:09:27,680 logging              DEBUG                                            >>> Entry formatMessage (/usr/lib/python3.7/logging/__init__.py - line 590 - module logging)
2020-12-13 14:09:27,683 logging              DEBUG                                                >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 432 - module logging)
2020-12-13 14:09:27,685 logging              DEBUG                                                <<< Exit  format : Return value: 2020-12-13 14:09:27,598 root                 DEBUG        ## Explicit log: Start
2020-12-13 14:09:27,688 logging              DEBUG                                            <<< Exit  formatMessage : Return value: 2020-12-13 14:09:27,598 root                 DEBUG        ## Explicit log: Start
2020-12-13 14:09:27,690 logging              DEBUG                                        <<< Exit  format : Return value: 2020-12-13 14:09:27,598 root                 DEBUG        ## Explicit log: Start
2020-12-13 14:09:27,692 logging              DEBUG                                    <<< Exit  format : Return value: 2020-12-13 14:09:27,598 root                 DEBUG        ## Explicit log: Start
2020-12-13 14:09:27,695 logging              DEBUG                                    >>> Entry flush (/usr/lib/python3.7/logging/__init__.py - line 1011 - module logging)
2020-12-13 14:09:27,697 logging              DEBUG                                        >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:27,699 logging              DEBUG                                        <<< Exit  acquire : Return value: None
2020-12-13 14:09:27,701 logging              DEBUG                                        >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:27,704 logging              DEBUG                                        <<< Exit  release : Return value: None
2020-12-13 14:09:27,706 logging              DEBUG                                    <<< Exit  flush : Return value: None
2020-12-13 14:09:27,709 logging              DEBUG                                <<< Exit  emit : Return value: None
2020-12-13 14:09:27,711 logging              DEBUG                                >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:27,713 logging              DEBUG                                <<< Exit  release : Return value: None
2020-12-13 14:09:27,715 logging              DEBUG                            <<< Exit  handle : Return value: True
2020-12-13 14:09:27,717 logging              DEBUG                            >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 892 - module logging)
2020-12-13 14:09:27,719 logging              DEBUG                                >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:27,721 logging              DEBUG                                <<< Exit  filter : Return value: True
2020-12-13 14:09:27,723 logging              DEBUG                                >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:27,725 logging              DEBUG                                <<< Exit  acquire : Return value: None
2020-12-13 14:09:27,728 logging              DEBUG                                >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1123 - module logging)
2020-12-13 14:09:27,730 logging              DEBUG                                    >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1022 - module logging)
2020-12-13 14:09:27,732 logging              DEBUG                                        >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 869 - module logging)
2020-12-13 14:09:27,735 logging              DEBUG                                            >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 606 - module logging)
2020-12-13 14:09:27,737 logging              DEBUG                                                >>> Entry getMessage (/usr/lib/python3.7/logging/__init__.py - line 371 - module logging)
2020-12-13 14:09:27,740 logging              DEBUG                                                <<< Exit  getMessage : Return value:     ## Explicit log: Start
2020-12-13 14:09:27,742 logging              DEBUG                                                >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 584 - module logging)
2020-12-13 14:09:27,745 logging              DEBUG                                                    >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 429 - module logging)
2020-12-13 14:09:27,748 logging              DEBUG                                                    <<< Exit  usesTime : Return value: True
2020-12-13 14:09:27,750 logging              DEBUG                                                <<< Exit  usesTime : Return value: True
2020-12-13 14:09:27,754 logging              DEBUG                                                >>> Entry formatTime (/usr/lib/python3.7/logging/__init__.py - line 539 - module logging)
2020-12-13 14:09:27,756 logging              DEBUG                                                <<< Exit  formatTime : Return value: 2020-12-13 14:09:27,598
2020-12-13 14:09:27,759 logging              DEBUG                                                >>> Entry formatMessage (/usr/lib/python3.7/logging/__init__.py - line 590 - module logging)
2020-12-13 14:09:27,762 logging              DEBUG                                                    >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 432 - module logging)
2020-12-13 14:09:27,765 logging              DEBUG                                                    <<< Exit  format : Return value: 2020-12-13 14:09:27,598 root                 DEBUG        ## Explicit log: Start
2020-12-13 14:09:27,767 logging              DEBUG                                                <<< Exit  formatMessage : Return value: 2020-12-13 14:09:27,598 root                 DEBUG        ## Explicit log: Start
2020-12-13 14:09:27,770 logging              DEBUG                                            <<< Exit  format : Return value: 2020-12-13 14:09:27,598 root                 DEBUG        ## Explicit log: Start
2020-12-13 14:09:27,772 logging              DEBUG                                        <<< Exit  format : Return value: 2020-12-13 14:09:27,598 root                 DEBUG        ## Explicit log: Start
2020-12-13 14:09:27,598 root                 DEBUG        ## Explicit log: Start
2020-12-13 14:09:27,775 logging              DEBUG                                        >>> Entry flush (/usr/lib/python3.7/logging/__init__.py - line 1011 - module logging)
2020-12-13 14:09:27,777 logging              DEBUG                                            >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:27,780 logging              DEBUG                                            <<< Exit  acquire : Return value: None
2020-12-13 14:09:27,782 logging              DEBUG                                            >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:27,785 logging              DEBUG                                            <<< Exit  release : Return value: None
2020-12-13 14:09:27,787 logging              DEBUG                                        <<< Exit  flush : Return value: None
2020-12-13 14:09:27,789 logging              DEBUG                                    <<< Exit  emit : Return value: None
2020-12-13 14:09:27,791 logging              DEBUG                                <<< Exit  emit : Return value: None
2020-12-13 14:09:27,793 logging              DEBUG                                >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:27,795 logging              DEBUG                                <<< Exit  release : Return value: None
2020-12-13 14:09:27,797 logging              DEBUG                            <<< Exit  handle : Return value: True
2020-12-13 14:09:27,799 logging              DEBUG                        <<< Exit  callHandlers : Return value: None
2020-12-13 14:09:27,801 logging              DEBUG                    <<< Exit  handle : Return value: None
2020-12-13 14:09:27,803 logging              DEBUG                <<< Exit  _log : Return value: None
2020-12-13 14:09:27,804 logging              DEBUG            <<< Exit  debug : Return value: None
2020-12-13 14:09:27,805 logging_plus         DEBUG        <<< Exit  debug : Return value: None
2020-12-13 14:09:27,807 logTestMod           DEBUG        >>> Entry __init__ (/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py - line 7 - module logTestMod)
2020-12-13 14:09:27,808 logging_plus         DEBUG            >>> Entry debug (/home/pi/dev/py-logging-plus/logging_plus/__init__.py - line 103 - module logging_plus)
2020-12-13 14:09:27,810 inspect              DEBUG                >>> Entry stack (/usr/lib/python3.7/inspect.py - line 1511 - module inspect)
2020-12-13 14:09:27,812 inspect              DEBUG                    >>> Entry getouterframes (/usr/lib/python3.7/inspect.py - line 1483 - module inspect)
2020-12-13 14:09:27,814 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:27,815 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:27,817 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:27,820 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:27,822 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:27,824 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:27,827 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:27,829 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:27,832 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:27,834 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:27,836 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:27,838 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:27,841 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:27,843 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:27,845 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:27,847 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:27,849 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:27,852 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:27,854 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:27,856 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:27,859 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:27,861 inspect              DEBUG                                <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:27,864 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:27,867 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,869 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:27,871 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,874 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:27,876 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:27,879 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,881 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,884 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,887 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,889 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,892 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,894 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,896 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:27,898 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:27,900 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:27,902 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:27,904 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:27,906 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:27,908 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:27,911 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:27,913 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:27,915 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:27,918 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:27,920 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:27,922 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:27,924 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:27,927 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:27,929 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:27,931 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:27,934 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:27,936 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:27,939 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:27,941 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:27,944 inspect              DEBUG                                    <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:27,947 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:27,950 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,953 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:27,955 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,957 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:27,960 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:27,963 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,965 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,968 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,970 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,973 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,976 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:27,978 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:27,980 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:27,982 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:27,985 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:27,987 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:27,990 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:27,992 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:27,994 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:27,996 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:27,999 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:28,001 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module 'logging_plus' from '/home/pi/dev/py-logging-plus/logging_plus/__init__.py'>
2020-12-13 14:09:28,003 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:28,006 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#MIT License\n', '#\n', '#Copyright (c) 2020 signag\n', '#\n', '#Permission is hereby granted, free of charge, to any person obtaining a copy\n', '#of this software and associated documentation files (the "Software"), to deal\n', '#in the Software without restriction, including without limitation the rights\n', '#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '#copies of the Software, and to permit persons to whom the Software is\n', '#furnished to do so, subject to the following conditions:\n', '#\n', '#The above copyright notice and this permission notice shall be included in all\n', '#copies or substantial portions of the Software.\n', '#\n', '#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '#SOFTWARE.\n', '"""\n', '`logging_plus` - Add-on to Python logging\n', '\n', 'This module extends the standard Python logging module for the following aspects:\n', '- Subclassing Logger allows customization of logging messages depending on context\n', '- This is used for automatic indentation depending on call stack level\n', '- The module provides also the capability to generically log function entry and exit\n', '"""\n', 'import logging\n', 'import inspect\n', 'import sys\n', 'import atexit\n', '\n', '#---------------------------------------------------------------------------\n', '#   Miscellaneous module data\n', '#---------------------------------------------------------------------------\n', '#\n', '#This parameter controls whether or not logging inside infrastructure modules is activated.\n', '#The following modules are affected: inspect, logging, logging-plus\n', '#\n', 'noInfrastructureLogging = True\n', '\n', 'class Manager(logging.Manager):\n', '    """\n', '    Subclassing logging.Manager supports instantiating the subclassed Logger\n', '    instead of the standard Logger.\n', '    """\n', '    def __init__(self, rootnode):\n', '        """\n', '        Initialize the manager\n', '        """\n', '        super().__init__(rootnode)\n', '\n', '    def getLogger(self, name):\n', '        """\n', '        Return the subclassed Logger rather than the standard Logger\n', '        """\n', '        rv = None\n', '        if not isinstance(name, str):\n', "            raise TypeError('A logger name must be a string')\n", '        logging._acquireLock()\n', '        try:\n', '            if name in self.loggerDict:\n', '                rv = self.loggerDict[name]\n', '                if isinstance(rv, logging.PlaceHolder):\n', '                    ph = rv\n', '                    rv = (self.loggerClass or _loggerClass)(name)\n', '                    rv.manager = self\n', '                    self.loggerDict[name] = rv\n', '                    self._fixupChildren(ph, rv)\n', '                    self._fixupParents(rv)\n', '            else:\n', '                rv = (self.loggerClass or _loggerClass)(name)\n', '                rv.manager = self\n', '                self.loggerDict[name] = rv\n', '                self._fixupParents(rv)\n', '        finally:\n', '            logging._releaseLock()\n', '        return rv\n', '\n', '    def cleanupLoggers(self):\n', '        """\n', '        Remove registered file handlers from all available loggers\n', '        """\n', '        lgr = root\n', '        for hdl in reversed(lgr.handlers):\n', '            if isinstance(hdl, logging.FileHandler):\n', '                lgr.removeHandler(hdl)\n', '        for lgName in self.loggerDict:\n', '            lgr = self.getLogger(lgName)\n', '            for hdl in lgr.handlers:\n', '                if isinstance(hdl, logging.FileHandler):\n', '                    lgr.removeHandler(hdl)\n', '\n', 'class Logger(logging.Logger):\n', '    def __init__(self, name, level=logging.NOTSET):\n', '        """\n', '        Initialize the subclassed Logger\n', '        """\n', '        super().__init__(name, level)\n', '\n', '    def debug(self, msg, *args, **kwargs):\n', '        """\n', '        Indent DEBUG message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def info(self, msg, *args, **kwargs):\n', '        """\n', '        Indent INFO message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().info(msg, *args, **kwargs)\n', '\n', '    def warning(self, msg, *args, **kwargs):\n', '        """\n', '        Indent WARNING message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().warning(msg, *args, **kwargs)\n', '\n', '    def error(self, msg, *args, **kwargs):\n', '        """\n', '        Indent ERROR message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().error(msg, *args, **kwargs)\n', '\n', '    def logEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def logExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', 'class RootLogger(Logger):\n', '    """\n', '    This is the extended root logger\n', '    """\n', '    def __init__(self, level):\n', '        """\n', '        Initialize the logger with the name "root".\n', '        """\n', '        Logger.__init__(self, "root", level)\n', '\n', '_loggerClass = Logger\n', '\n', '\n', 'root = RootLogger(logging.WARNING)\n', 'Logger.root = root\n', 'Logger.manager = Manager(Logger.root)\n', '\n', 'def getLogger(name=None):\n', '    """\n', '    Return an extended logger with the specified name, creating it if necessary.\n', '\n', '    If no name is specified, return the root logger.\n', '    """\n', '    if not name or isinstance(name, str) and name == root.name:\n', '        return root\n', '    return Logger.manager.getLogger(name)\n', '\n', 'def excludeFromLogging(frame):\n', '    """\n', '    Check whether frame shall be excluded from logging.\n', '\n', '    This is the case if the module of the frame itself or on of its outer frames\n', '    belongs to the inspect or logging infrastructure\n', '    """\n', '    if not frame:\n', '        return False\n', '\n', '    module = inspect.getmodule(frame)\n', '    if not module:\n', '        return False\n', '\n', '    moduleName = module.__name__\n', '\n', '    if (moduleName == "inspect") \\\n', '    or (moduleName == "logging") \\\n', '    or (moduleName == __name__):\n', '        #Do not log inside infrastructure modules\n', '        return True\n', '    else:\n', '        oframe = frame.f_back\n', '        if not oframe:\n', '            return False\n', '        return excludeFromLogging(oframe)\n', '\n', 'def autoLogIgnore(frame, event, arg):\n', '    """\n', '    Function to register as trace function for scopes where logging shall be deactivated.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call'):\n", '        #Only call needs to be sensed       \n', '        return autoLogIgnore\n', '\n', 'def autoLogEntryExit(frame, event, arg):\n', '    """\n', '    Function to register as trace function for the current scope.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call') or (event == 'return'):\n", '        #Only call and return events are sensed\n', '        if not frame:\n', '            return autoLogIgnore\n', '\n', '        code_obj = frame.f_code\n', '        func_name = code_obj.co_name\n', '        file_name = code_obj.co_filename\n', '        file_line = code_obj.co_firstlineno\n', '\n', '        module = inspect.getmodule(frame)\n', '        if not module:\n', '            return autoLogIgnore\n', '\n', '        moduleName = module.__name__\n', '\n', "        if event == 'call':\n", '            #System has been entering a new scope.\n', '            if noInfrastructureLogging:\n', '                if excludeFromLogging(frame):\n', '                    return autoLogIgnore\n', '\n', "            getLogger(moduleName).autoLogEntry('%s (%s - line %s - module %s)', func_name, file_name, file_line, moduleName)\n", '            #The function returns a reference to itself, in order to register itself as trace functuion for the new scope\n', '            return autoLogEntryExit\n', "        elif event == 'return':\n", '            #System is about to exit a scope (function or other code block). arg is the value being returned.\n', "            getLogger(moduleName).autoLogExit ('%s : Return value: %s', func_name, arg)\n", '\n', 'def removeFileHandlers():\n', '    """This function removes file handlers from available loggers in order to avoid a race condition during shutdown\n', '    The Python shutdown sequence is as follows:\n', '    1. Stop main thread\n', '    2. Close open file handlers\n', '    3. Wait for termination of non-daemon threads\n', '    4. Execute registered atexit functions\n', '    5. Garbage collection\n', '    6. Process termination\n', '\n', '    If class __del__ functions include logging with file handlers, and if ojects are destroyed \n', '    during garbage collection (5), file output will lead to an exception \n', '    because open file handlers have already been closed (2).\n', '    \n', '    Note: This applies only to explicit logging within the __del__ functions.\n', '    Automatic logging of entry and exit has already been switched off at this time \n', '    through unregisterAutoLogEntryExit.\n', '    """\n', '    mgr = getLogger().manager\n', '    mgr.cleanupLoggers()\n', '\n', 'def registerAutoLogEntryExit():\n', '    """\n', '    Register autoLogEntryExit as system trace function\n', '\n', '    This will issue logging whenever a function scope is entered or exited\n', '    """\n', '    sys.settrace(autoLogEntryExit)\n', '\n', 'def unregisterAutoLogEntryExit():\n', '    """\n', '    Clear system trace function\n', '\n', '    This will stop logging function entry / exit\n', '    """\n', '    sys.settrace(None)\n', '\n', '#Register unregisterAutoLogEntryExit to avoid logging exceptions during module shutdown\n', 'atexit.register(removeFileHandlers)\n', 'atexit.register(unregisterAutoLogEntryExit)\n']
2020-12-13 14:09:28,009 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:28,012 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:28,014 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:28,016 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:28,018 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:28,020 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:28,022 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:28,024 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:28,027 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:28,029 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:28,032 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:28,034 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:28,036 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:28,038 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:28,040 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:28,042 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:28,045 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:28,047 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:28,049 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#MIT License\n', '#\n', '#Copyright (c) 2020 signag\n', '#\n', '#Permission is hereby granted, free of charge, to any person obtaining a copy\n', '#of this software and associated documentation files (the "Software"), to deal\n', '#in the Software without restriction, including without limitation the rights\n', '#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '#copies of the Software, and to permit persons to whom the Software is\n', '#furnished to do so, subject to the following conditions:\n', '#\n', '#The above copyright notice and this permission notice shall be included in all\n', '#copies or substantial portions of the Software.\n', '#\n', '#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '#SOFTWARE.\n', '"""\n', '`logging_plus` - Add-on to Python logging\n', '\n', 'This module extends the standard Python logging module for the following aspects:\n', '- Subclassing Logger allows customization of logging messages depending on context\n', '- This is used for automatic indentation depending on call stack level\n', '- The module provides also the capability to generically log function entry and exit\n', '"""\n', 'import logging\n', 'import inspect\n', 'import sys\n', 'import atexit\n', '\n', '#---------------------------------------------------------------------------\n', '#   Miscellaneous module data\n', '#---------------------------------------------------------------------------\n', '#\n', '#This parameter controls whether or not logging inside infrastructure modules is activated.\n', '#The following modules are affected: inspect, logging, logging-plus\n', '#\n', 'noInfrastructureLogging = True\n', '\n', 'class Manager(logging.Manager):\n', '    """\n', '    Subclassing logging.Manager supports instantiating the subclassed Logger\n', '    instead of the standard Logger.\n', '    """\n', '    def __init__(self, rootnode):\n', '        """\n', '        Initialize the manager\n', '        """\n', '        super().__init__(rootnode)\n', '\n', '    def getLogger(self, name):\n', '        """\n', '        Return the subclassed Logger rather than the standard Logger\n', '        """\n', '        rv = None\n', '        if not isinstance(name, str):\n', "            raise TypeError('A logger name must be a string')\n", '        logging._acquireLock()\n', '        try:\n', '            if name in self.loggerDict:\n', '                rv = self.loggerDict[name]\n', '                if isinstance(rv, logging.PlaceHolder):\n', '                    ph = rv\n', '                    rv = (self.loggerClass or _loggerClass)(name)\n', '                    rv.manager = self\n', '                    self.loggerDict[name] = rv\n', '                    self._fixupChildren(ph, rv)\n', '                    self._fixupParents(rv)\n', '            else:\n', '                rv = (self.loggerClass or _loggerClass)(name)\n', '                rv.manager = self\n', '                self.loggerDict[name] = rv\n', '                self._fixupParents(rv)\n', '        finally:\n', '            logging._releaseLock()\n', '        return rv\n', '\n', '    def cleanupLoggers(self):\n', '        """\n', '        Remove registered file handlers from all available loggers\n', '        """\n', '        lgr = root\n', '        for hdl in reversed(lgr.handlers):\n', '            if isinstance(hdl, logging.FileHandler):\n', '                lgr.removeHandler(hdl)\n', '        for lgName in self.loggerDict:\n', '            lgr = self.getLogger(lgName)\n', '            for hdl in lgr.handlers:\n', '                if isinstance(hdl, logging.FileHandler):\n', '                    lgr.removeHandler(hdl)\n', '\n', 'class Logger(logging.Logger):\n', '    def __init__(self, name, level=logging.NOTSET):\n', '        """\n', '        Initialize the subclassed Logger\n', '        """\n', '        super().__init__(name, level)\n', '\n', '    def debug(self, msg, *args, **kwargs):\n', '        """\n', '        Indent DEBUG message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def info(self, msg, *args, **kwargs):\n', '        """\n', '        Indent INFO message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().info(msg, *args, **kwargs)\n', '\n', '    def warning(self, msg, *args, **kwargs):\n', '        """\n', '        Indent WARNING message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().warning(msg, *args, **kwargs)\n', '\n', '    def error(self, msg, *args, **kwargs):\n', '        """\n', '        Indent ERROR message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().error(msg, *args, **kwargs)\n', '\n', '    def logEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def logExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', 'class RootLogger(Logger):\n', '    """\n', '    This is the extended root logger\n', '    """\n', '    def __init__(self, level):\n', '        """\n', '        Initialize the logger with the name "root".\n', '        """\n', '        Logger.__init__(self, "root", level)\n', '\n', '_loggerClass = Logger\n', '\n', '\n', 'root = RootLogger(logging.WARNING)\n', 'Logger.root = root\n', 'Logger.manager = Manager(Logger.root)\n', '\n', 'def getLogger(name=None):\n', '    """\n', '    Return an extended logger with the specified name, creating it if necessary.\n', '\n', '    If no name is specified, return the root logger.\n', '    """\n', '    if not name or isinstance(name, str) and name == root.name:\n', '        return root\n', '    return Logger.manager.getLogger(name)\n', '\n', 'def excludeFromLogging(frame):\n', '    """\n', '    Check whether frame shall be excluded from logging.\n', '\n', '    This is the case if the module of the frame itself or on of its outer frames\n', '    belongs to the inspect or logging infrastructure\n', '    """\n', '    if not frame:\n', '        return False\n', '\n', '    module = inspect.getmodule(frame)\n', '    if not module:\n', '        return False\n', '\n', '    moduleName = module.__name__\n', '\n', '    if (moduleName == "inspect") \\\n', '    or (moduleName == "logging") \\\n', '    or (moduleName == __name__):\n', '        #Do not log inside infrastructure modules\n', '        return True\n', '    else:\n', '        oframe = frame.f_back\n', '        if not oframe:\n', '            return False\n', '        return excludeFromLogging(oframe)\n', '\n', 'def autoLogIgnore(frame, event, arg):\n', '    """\n', '    Function to register as trace function for scopes where logging shall be deactivated.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call'):\n", '        #Only call needs to be sensed       \n', '        return autoLogIgnore\n', '\n', 'def autoLogEntryExit(frame, event, arg):\n', '    """\n', '    Function to register as trace function for the current scope.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call') or (event == 'return'):\n", '        #Only call and return events are sensed\n', '        if not frame:\n', '            return autoLogIgnore\n', '\n', '        code_obj = frame.f_code\n', '        func_name = code_obj.co_name\n', '        file_name = code_obj.co_filename\n', '        file_line = code_obj.co_firstlineno\n', '\n', '        module = inspect.getmodule(frame)\n', '        if not module:\n', '            return autoLogIgnore\n', '\n', '        moduleName = module.__name__\n', '\n', "        if event == 'call':\n", '            #System has been entering a new scope.\n', '            if noInfrastructureLogging:\n', '                if excludeFromLogging(frame):\n', '                    return autoLogIgnore\n', '\n', "            getLogger(moduleName).autoLogEntry('%s (%s - line %s - module %s)', func_name, file_name, file_line, moduleName)\n", '            #The function returns a reference to itself, in order to register itself as trace functuion for the new scope\n', '            return autoLogEntryExit\n', "        elif event == 'return':\n", '            #System is about to exit a scope (function or other code block). arg is the value being returned.\n', "            getLogger(moduleName).autoLogExit ('%s : Return value: %s', func_name, arg)\n", '\n', 'def removeFileHandlers():\n', '    """This function removes file handlers from available loggers in order to avoid a race condition during shutdown\n', '    The Python shutdown sequence is as follows:\n', '    1. Stop main thread\n', '    2. Close open file handlers\n', '    3. Wait for termination of non-daemon threads\n', '    4. Execute registered atexit functions\n', '    5. Garbage collection\n', '    6. Process termination\n', '\n', '    If class __del__ functions include logging with file handlers, and if ojects are destroyed \n', '    during garbage collection (5), file output will lead to an exception \n', '    because open file handlers have already been closed (2).\n', '    \n', '    Note: This applies only to explicit logging within the __del__ functions.\n', '    Automatic logging of entry and exit has already been switched off at this time \n', '    through unregisterAutoLogEntryExit.\n', '    """\n', '    mgr = getLogger().manager\n', '    mgr.cleanupLoggers()\n', '\n', 'def registerAutoLogEntryExit():\n', '    """\n', '    Register autoLogEntryExit as system trace function\n', '\n', '    This will issue logging whenever a function scope is entered or exited\n', '    """\n', '    sys.settrace(autoLogEntryExit)\n', '\n', 'def unregisterAutoLogEntryExit():\n', '    """\n', '    Clear system trace function\n', '\n', '    This will stop logging function entry / exit\n', '    """\n', '    sys.settrace(None)\n', '\n', '#Register unregisterAutoLogEntryExit to avoid logging exceptions during module shutdown\n', 'atexit.register(removeFileHandlers)\n', 'atexit.register(unregisterAutoLogEntryExit)\n'], 102)
2020-12-13 14:09:28,054 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0)
2020-12-13 14:09:28,058 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:28,061 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:28,064 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:28,067 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:28,069 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:28,071 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:28,074 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:28,076 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:28,079 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:28,082 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:28,084 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:28,087 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:28,090 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:28,093 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:28,096 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:28,099 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:28,102 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:28,104 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:28,107 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:28,110 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:28,113 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:28,116 inspect              DEBUG                                <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:28,120 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:28,122 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,124 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:28,127 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,129 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:28,132 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:28,134 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,136 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,139 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,141 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,144 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,146 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,148 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,151 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:28,153 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:28,155 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:28,158 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:28,160 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:28,162 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:28,164 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:28,168 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:28,170 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:28,174 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:28,176 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:28,178 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:28,181 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:28,183 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:28,186 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:28,188 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:28,191 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:28,193 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:28,196 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:28,199 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:28,203 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:28,206 inspect              DEBUG                                    <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:28,210 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:28,214 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,217 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:28,220 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,223 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:28,226 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:28,228 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,231 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,233 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,237 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,240 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,243 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,246 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,249 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:28,252 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:28,255 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:28,257 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:28,260 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:28,262 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:28,265 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:28,267 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:28,270 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:28,272 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module 'logTestMod' from '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py'>
2020-12-13 14:09:28,275 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:28,277 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#!/usr/bin/python3\n', '\n', 'from context import logging_plus\n', 'logger = logging_plus.getLogger(__name__)\n', '\n', 'class MyClass:\n', '    def __init__(self):\n', '        self.__status = 1\n', '        logger.debug("## Explicit log: A - Initializing MyClass")\n', '        \n', '    def __del__(self):\n', '        logger.debug("## Explicit log: B - Finalizing MyClass")\n', '\n', '    @property\n', '    def status(self):\n', '        logger.debug("## Explicit log: C - getter of MyClass")\n', '        return self.__status\n', '\n', '    @status.setter\n', '    def status(self, value):\n', '        logger.debug("## Explicit log: D - setter of MyClass")\n', '        self.__status = value\n', '\n', '    def doSomething(self):\n', '        logger.debug("## Explicit log: E - MyClass method call")\n', '\n', 'class MySpecialClass(MyClass):\n', '    def __init__(self):\n', '        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n', '        super().__init__()\n', '\n', '    def __del__(self):\n', '        logger.debug("## Explicit log: G - Finalizing subclass MySpecialClass(MyClass)")\n', '        super().__del__()\n']
2020-12-13 14:09:28,280 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:28,282 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:28,285 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:28,287 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:28,290 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:28,293 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:28,295 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:28,297 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:28,300 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:28,303 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:28,305 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:28,308 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:28,310 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:28,313 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:28,316 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:28,318 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:28,320 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:28,323 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:28,325 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#!/usr/bin/python3\n', '\n', 'from context import logging_plus\n', 'logger = logging_plus.getLogger(__name__)\n', '\n', 'class MyClass:\n', '    def __init__(self):\n', '        self.__status = 1\n', '        logger.debug("## Explicit log: A - Initializing MyClass")\n', '        \n', '    def __del__(self):\n', '        logger.debug("## Explicit log: B - Finalizing MyClass")\n', '\n', '    @property\n', '    def status(self):\n', '        logger.debug("## Explicit log: C - getter of MyClass")\n', '        return self.__status\n', '\n', '    @status.setter\n', '    def status(self, value):\n', '        logger.debug("## Explicit log: D - setter of MyClass")\n', '        self.__status = value\n', '\n', '    def doSomething(self):\n', '        logger.debug("## Explicit log: E - MyClass method call")\n', '\n', 'class MySpecialClass(MyClass):\n', '    def __init__(self):\n', '        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n', '        super().__init__()\n', '\n', '    def __del__(self):\n', '        logger.debug("## Explicit log: G - Finalizing subclass MySpecialClass(MyClass)")\n', '        super().__del__()\n'], 6)
2020-12-13 14:09:28,328 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=9, function='__init__', code_context=['        logger.debug("## Explicit log: A - Initializing MyClass")\n'], index=0)
2020-12-13 14:09:28,331 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:28,334 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:28,337 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:28,339 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:28,342 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:28,344 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:28,347 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:28,350 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:28,352 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:28,355 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:28,358 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:28,360 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:28,363 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:28,366 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:28,368 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:28,371 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:28,374 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:28,376 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:28,379 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:28,382 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:28,385 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:28,388 inspect              DEBUG                                <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:28,391 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:28,393 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,397 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:28,399 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,401 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:28,403 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:28,406 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,408 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,410 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,412 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,414 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,416 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,418 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,420 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:28,422 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:28,425 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:28,426 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:28,428 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:28,430 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:28,432 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:28,435 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:28,437 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:28,441 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:28,443 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:28,445 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:28,449 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:28,451 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:28,453 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:28,455 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:28,458 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:28,460 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:28,462 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:28,465 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:28,468 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:28,470 inspect              DEBUG                                    <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:28,473 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:28,476 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,478 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:28,481 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,483 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:28,485 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:28,488 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,490 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,492 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,495 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,497 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,499 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,502 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,505 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:28,507 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:28,509 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:28,511 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:28,514 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:28,516 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:28,519 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:28,521 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:28,524 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:28,526 inspect              DEBUG                                    >>> Entry getabsfile (/usr/lib/python3.7/inspect.py - line 702 - module inspect)
2020-12-13 14:09:28,529 posixpath            DEBUG                                        >>> Entry abspath (/usr/lib/python3.7/posixpath.py - line 376 - module posixpath)
2020-12-13 14:09:28,531 posixpath            DEBUG                                            >>> Entry isabs (/usr/lib/python3.7/posixpath.py - line 64 - module posixpath)
2020-12-13 14:09:28,534 posixpath            DEBUG                                                >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:28,537 posixpath            DEBUG                                                <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:28,539 posixpath            DEBUG                                            <<< Exit  isabs : Return value: False
2020-12-13 14:09:28,541 posixpath            DEBUG                                            >>> Entry join (/usr/lib/python3.7/posixpath.py - line 75 - module posixpath)
2020-12-13 14:09:28,544 posixpath            DEBUG                                                >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:28,547 posixpath            DEBUG                                                <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:28,549 posixpath            DEBUG                                            <<< Exit  join : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:28,552 posixpath            DEBUG                                            >>> Entry normpath (/usr/lib/python3.7/posixpath.py - line 338 - module posixpath)
2020-12-13 14:09:28,554 posixpath            DEBUG                                            <<< Exit  normpath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:28,557 posixpath            DEBUG                                        <<< Exit  abspath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:28,559 posixpath            DEBUG                                        >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:28,561 posixpath            DEBUG                                        <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:28,563 inspect              DEBUG                                    <<< Exit  getabsfile : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:28,565 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module '__main__' from 'logTest.py'>
2020-12-13 14:09:28,567 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:28,570 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n']
2020-12-13 14:09:28,572 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:28,574 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:28,576 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:28,578 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:28,581 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:28,583 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:28,585 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:28,587 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:28,589 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:28,592 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:28,594 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:28,596 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:28,599 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:28,601 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:28,604 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:28,606 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:28,608 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:28,610 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:28,612 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n'], 0)
2020-12-13 14:09:28,615 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='logTest.py', lineno=40, function='<module>', code_context=['z = logTestMod.MyClass()\n'], index=0)
2020-12-13 14:09:28,618 inspect              DEBUG                    <<< Exit  getouterframes : Return value: [FrameInfo(frame=<frame at 0x7fb12c43e8, file '/home/pi/dev/py-logging-plus/logging_plus/__init__.py', line 107, code debug>, filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0), FrameInfo(frame=<frame at 0x1492ce8, file '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', line 9, code __init__>, filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=9, function='__init__', code_context=['        logger.debug("## Explicit log: A - Initializing MyClass")\n'], index=0), FrameInfo(frame=<frame at 0x7fb15c19f8, file 'logTest.py', line 40, code <module>>, filename='logTest.py', lineno=40, function='<module>', code_context=['z = logTestMod.MyClass()\n'], index=0)]
2020-12-13 14:09:28,619 inspect              DEBUG                <<< Exit  stack : Return value: [FrameInfo(frame=<frame at 0x7fb12c43e8, file '/home/pi/dev/py-logging-plus/logging_plus/__init__.py', line 107, code debug>, filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0), FrameInfo(frame=<frame at 0x1492ce8, file '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', line 9, code __init__>, filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=9, function='__init__', code_context=['        logger.debug("## Explicit log: A - Initializing MyClass")\n'], index=0), FrameInfo(frame=<frame at 0x7fb15c19f8, file 'logTest.py', line 40, code <module>>, filename='logTest.py', lineno=40, function='<module>', code_context=['z = logTestMod.MyClass()\n'], index=0)]
2020-12-13 14:09:28,621 logging              DEBUG                >>> Entry debug (/usr/lib/python3.7/logging/__init__.py - line 1361 - module logging)
2020-12-13 14:09:28,623 logging              DEBUG                    >>> Entry isEnabledFor (/usr/lib/python3.7/logging/__init__.py - line 1619 - module logging)
2020-12-13 14:09:28,624 logging              DEBUG                    <<< Exit  isEnabledFor : Return value: True
2020-12-13 14:09:28,626 logging              DEBUG                    >>> Entry _log (/usr/lib/python3.7/logging/__init__.py - line 1496 - module logging)
2020-12-13 14:09:28,629 logging              DEBUG                        >>> Entry findCaller (/usr/lib/python3.7/logging/__init__.py - line 1451 - module logging)
2020-12-13 14:09:28,631 logging              DEBUG                            >>> Entry <lambda> (/usr/lib/python3.7/logging/__init__.py - line 154 - module logging)
2020-12-13 14:09:28,633 logging              DEBUG                            <<< Exit  <lambda> : Return value: <frame at 0x7fb12d8af8, file '/usr/lib/python3.7/logging/__init__.py', line 1371, code debug>
2020-12-13 14:09:28,636 posixpath            DEBUG                            >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:28,638 posixpath            DEBUG                            <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:28,641 logging              DEBUG                        <<< Exit  findCaller : Return value: ('/home/pi/dev/py-logging-plus/logging_plus/__init__.py', 109, 'debug', None)
2020-12-13 14:09:28,643 logging              DEBUG                        >>> Entry makeRecord (/usr/lib/python3.7/logging/__init__.py - line 1481 - module logging)
2020-12-13 14:09:28,645 logging              DEBUG                            >>> Entry __init__ (/usr/lib/python3.7/logging/__init__.py - line 293 - module logging)
2020-12-13 14:09:28,648 logging              DEBUG                                >>> Entry getLevelName (/usr/lib/python3.7/logging/__init__.py - line 117 - module logging)
2020-12-13 14:09:28,651 logging              DEBUG                                <<< Exit  getLevelName : Return value: DEBUG
2020-12-13 14:09:28,654 posixpath            DEBUG                                >>> Entry basename (/usr/lib/python3.7/posixpath.py - line 144 - module posixpath)
2020-12-13 14:09:28,657 posixpath            DEBUG                                    >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:28,661 posixpath            DEBUG                                    <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:28,664 posixpath            DEBUG                                <<< Exit  basename : Return value: __init__.py
2020-12-13 14:09:28,668 posixpath            DEBUG                                >>> Entry splitext (/usr/lib/python3.7/posixpath.py - line 121 - module posixpath)
2020-12-13 14:09:28,672 genericpath          DEBUG                                    >>> Entry _splitext (/usr/lib/python3.7/genericpath.py - line 117 - module genericpath)
2020-12-13 14:09:28,675 genericpath          DEBUG                                    <<< Exit  _splitext : Return value: ('__init__', '.py')
2020-12-13 14:09:28,678 posixpath            DEBUG                                <<< Exit  splitext : Return value: ('__init__', '.py')
2020-12-13 14:09:28,681 threading            DEBUG                                >>> Entry current_thread (/usr/lib/python3.7/threading.py - line 1214 - module threading)
2020-12-13 14:09:28,683 threading            DEBUG                                <<< Exit  current_thread : Return value: <_MainThread(MainThread, started 548443516944)>
2020-12-13 14:09:28,686 threading            DEBUG                                >>> Entry name (/usr/lib/python3.7/threading.py - line 1052 - module threading)
2020-12-13 14:09:28,688 threading            DEBUG                                <<< Exit  name : Return value: MainThread
2020-12-13 14:09:28,691 logging              DEBUG                            <<< Exit  __init__ : Return value: None
2020-12-13 14:09:28,693 logging              DEBUG                        <<< Exit  makeRecord : Return value: <LogRecord: logTestMod, 10, /home/pi/dev/py-logging-plus/logging_plus/__init__.py, 109, "        ## Explicit log: A - Initializing MyClass">
2020-12-13 14:09:28,695 logging              DEBUG                        >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 1521 - module logging)
2020-12-13 14:09:28,697 logging              DEBUG                            >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:28,699 logging              DEBUG                            <<< Exit  filter : Return value: True
2020-12-13 14:09:28,701 logging              DEBUG                            >>> Entry callHandlers (/usr/lib/python3.7/logging/__init__.py - line 1575 - module logging)
2020-12-13 14:09:28,704 logging              DEBUG                                >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 892 - module logging)
2020-12-13 14:09:28,706 logging              DEBUG                                    >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:28,709 logging              DEBUG                                    <<< Exit  filter : Return value: True
2020-12-13 14:09:28,712 logging              DEBUG                                    >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:28,714 logging              DEBUG                                    <<< Exit  acquire : Return value: None
2020-12-13 14:09:28,717 logging              DEBUG                                    >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1022 - module logging)
2020-12-13 14:09:28,719 logging              DEBUG                                        >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 869 - module logging)
2020-12-13 14:09:28,722 logging              DEBUG                                            >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 606 - module logging)
2020-12-13 14:09:28,725 logging              DEBUG                                                >>> Entry getMessage (/usr/lib/python3.7/logging/__init__.py - line 371 - module logging)
2020-12-13 14:09:28,728 logging              DEBUG                                                <<< Exit  getMessage : Return value:         ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:28,731 logging              DEBUG                                                >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 584 - module logging)
2020-12-13 14:09:28,734 logging              DEBUG                                                    >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 429 - module logging)
2020-12-13 14:09:28,737 logging              DEBUG                                                    <<< Exit  usesTime : Return value: True
2020-12-13 14:09:28,740 logging              DEBUG                                                <<< Exit  usesTime : Return value: True
2020-12-13 14:09:28,743 logging              DEBUG                                                >>> Entry formatTime (/usr/lib/python3.7/logging/__init__.py - line 539 - module logging)
2020-12-13 14:09:28,746 logging              DEBUG                                                <<< Exit  formatTime : Return value: 2020-12-13 14:09:28,646
2020-12-13 14:09:28,748 logging              DEBUG                                                >>> Entry formatMessage (/usr/lib/python3.7/logging/__init__.py - line 590 - module logging)
2020-12-13 14:09:28,751 logging              DEBUG                                                    >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 432 - module logging)
2020-12-13 14:09:28,754 logging              DEBUG                                                    <<< Exit  format : Return value: 2020-12-13 14:09:28,646 logTestMod           DEBUG            ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:28,758 logging              DEBUG                                                <<< Exit  formatMessage : Return value: 2020-12-13 14:09:28,646 logTestMod           DEBUG            ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:28,761 logging              DEBUG                                            <<< Exit  format : Return value: 2020-12-13 14:09:28,646 logTestMod           DEBUG            ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:28,763 logging              DEBUG                                        <<< Exit  format : Return value: 2020-12-13 14:09:28,646 logTestMod           DEBUG            ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:28,766 logging              DEBUG                                        >>> Entry flush (/usr/lib/python3.7/logging/__init__.py - line 1011 - module logging)
2020-12-13 14:09:28,769 logging              DEBUG                                            >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:28,772 logging              DEBUG                                            <<< Exit  acquire : Return value: None
2020-12-13 14:09:28,775 logging              DEBUG                                            >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:28,777 logging              DEBUG                                            <<< Exit  release : Return value: None
2020-12-13 14:09:28,780 logging              DEBUG                                        <<< Exit  flush : Return value: None
2020-12-13 14:09:28,782 logging              DEBUG                                    <<< Exit  emit : Return value: None
2020-12-13 14:09:28,784 logging              DEBUG                                    >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:28,786 logging              DEBUG                                    <<< Exit  release : Return value: None
2020-12-13 14:09:28,788 logging              DEBUG                                <<< Exit  handle : Return value: True
2020-12-13 14:09:28,790 logging              DEBUG                                >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 892 - module logging)
2020-12-13 14:09:28,792 logging              DEBUG                                    >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:28,795 logging              DEBUG                                    <<< Exit  filter : Return value: True
2020-12-13 14:09:28,797 logging              DEBUG                                    >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:28,799 logging              DEBUG                                    <<< Exit  acquire : Return value: None
2020-12-13 14:09:28,801 logging              DEBUG                                    >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1123 - module logging)
2020-12-13 14:09:28,803 logging              DEBUG                                        >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1022 - module logging)
2020-12-13 14:09:28,806 logging              DEBUG                                            >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 869 - module logging)
2020-12-13 14:09:28,808 logging              DEBUG                                                >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 606 - module logging)
2020-12-13 14:09:28,812 logging              DEBUG                                                    >>> Entry getMessage (/usr/lib/python3.7/logging/__init__.py - line 371 - module logging)
2020-12-13 14:09:28,814 logging              DEBUG                                                    <<< Exit  getMessage : Return value:         ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:28,817 logging              DEBUG                                                    >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 584 - module logging)
2020-12-13 14:09:28,820 logging              DEBUG                                                        >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 429 - module logging)
2020-12-13 14:09:28,823 logging              DEBUG                                                        <<< Exit  usesTime : Return value: True
2020-12-13 14:09:28,826 logging              DEBUG                                                    <<< Exit  usesTime : Return value: True
2020-12-13 14:09:28,830 logging              DEBUG                                                    >>> Entry formatTime (/usr/lib/python3.7/logging/__init__.py - line 539 - module logging)
2020-12-13 14:09:28,832 logging              DEBUG                                                    <<< Exit  formatTime : Return value: 2020-12-13 14:09:28,646
2020-12-13 14:09:28,835 logging              DEBUG                                                    >>> Entry formatMessage (/usr/lib/python3.7/logging/__init__.py - line 590 - module logging)
2020-12-13 14:09:28,838 logging              DEBUG                                                        >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 432 - module logging)
2020-12-13 14:09:28,841 logging              DEBUG                                                        <<< Exit  format : Return value: 2020-12-13 14:09:28,646 logTestMod           DEBUG            ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:28,844 logging              DEBUG                                                    <<< Exit  formatMessage : Return value: 2020-12-13 14:09:28,646 logTestMod           DEBUG            ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:28,847 logging              DEBUG                                                <<< Exit  format : Return value: 2020-12-13 14:09:28,646 logTestMod           DEBUG            ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:28,850 logging              DEBUG                                            <<< Exit  format : Return value: 2020-12-13 14:09:28,646 logTestMod           DEBUG            ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:28,646 logTestMod           DEBUG            ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:28,853 logging              DEBUG                                            >>> Entry flush (/usr/lib/python3.7/logging/__init__.py - line 1011 - module logging)
2020-12-13 14:09:28,856 logging              DEBUG                                                >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:28,859 logging              DEBUG                                                <<< Exit  acquire : Return value: None
2020-12-13 14:09:28,862 logging              DEBUG                                                >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:28,865 logging              DEBUG                                                <<< Exit  release : Return value: None
2020-12-13 14:09:28,867 logging              DEBUG                                            <<< Exit  flush : Return value: None
2020-12-13 14:09:28,870 logging              DEBUG                                        <<< Exit  emit : Return value: None
2020-12-13 14:09:28,872 logging              DEBUG                                    <<< Exit  emit : Return value: None
2020-12-13 14:09:28,875 logging              DEBUG                                    >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:28,878 logging              DEBUG                                    <<< Exit  release : Return value: None
2020-12-13 14:09:28,880 logging              DEBUG                                <<< Exit  handle : Return value: True
2020-12-13 14:09:28,882 logging              DEBUG                            <<< Exit  callHandlers : Return value: None
2020-12-13 14:09:28,883 logging              DEBUG                        <<< Exit  handle : Return value: None
2020-12-13 14:09:28,885 logging              DEBUG                    <<< Exit  _log : Return value: None
2020-12-13 14:09:28,887 logging              DEBUG                <<< Exit  debug : Return value: None
2020-12-13 14:09:28,888 logging_plus         DEBUG            <<< Exit  debug : Return value: None
2020-12-13 14:09:28,889 logTestMod           DEBUG        <<< Exit  __init__ : Return value: None
2020-12-13 14:09:28,890 logTestMod           DEBUG        >>> Entry __init__ (/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py - line 28 - module logTestMod)
2020-12-13 14:09:28,892 logging_plus         DEBUG            >>> Entry debug (/home/pi/dev/py-logging-plus/logging_plus/__init__.py - line 103 - module logging_plus)
2020-12-13 14:09:28,893 inspect              DEBUG                >>> Entry stack (/usr/lib/python3.7/inspect.py - line 1511 - module inspect)
2020-12-13 14:09:28,895 inspect              DEBUG                    >>> Entry getouterframes (/usr/lib/python3.7/inspect.py - line 1483 - module inspect)
2020-12-13 14:09:28,897 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:28,899 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:28,901 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:28,903 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:28,905 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:28,907 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:28,909 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:28,911 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:28,913 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:28,915 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:28,918 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:28,920 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:28,922 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:28,925 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:28,927 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:28,930 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:28,932 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:28,934 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:28,936 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:28,939 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:28,941 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:28,943 inspect              DEBUG                                <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:28,946 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:28,949 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,951 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:28,954 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,956 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:28,959 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:28,962 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,965 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,968 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,972 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,974 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,977 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:28,979 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:28,982 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:28,984 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:28,986 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:28,988 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:28,990 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:28,992 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:28,994 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:28,996 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:28,999 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:29,001 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:29,003 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:29,006 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:29,008 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:29,010 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:29,012 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:29,015 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:29,017 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:29,019 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:29,021 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:29,024 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:29,026 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:29,028 inspect              DEBUG                                    <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:29,031 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:29,033 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,035 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:29,037 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,039 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:29,042 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:29,044 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,046 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,049 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,051 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,053 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,056 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,058 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,060 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:29,062 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:29,065 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:29,067 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:29,069 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:29,071 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:29,073 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:29,075 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:29,077 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:29,080 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module 'logging_plus' from '/home/pi/dev/py-logging-plus/logging_plus/__init__.py'>
2020-12-13 14:09:29,082 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:29,084 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#MIT License\n', '#\n', '#Copyright (c) 2020 signag\n', '#\n', '#Permission is hereby granted, free of charge, to any person obtaining a copy\n', '#of this software and associated documentation files (the "Software"), to deal\n', '#in the Software without restriction, including without limitation the rights\n', '#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '#copies of the Software, and to permit persons to whom the Software is\n', '#furnished to do so, subject to the following conditions:\n', '#\n', '#The above copyright notice and this permission notice shall be included in all\n', '#copies or substantial portions of the Software.\n', '#\n', '#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '#SOFTWARE.\n', '"""\n', '`logging_plus` - Add-on to Python logging\n', '\n', 'This module extends the standard Python logging module for the following aspects:\n', '- Subclassing Logger allows customization of logging messages depending on context\n', '- This is used for automatic indentation depending on call stack level\n', '- The module provides also the capability to generically log function entry and exit\n', '"""\n', 'import logging\n', 'import inspect\n', 'import sys\n', 'import atexit\n', '\n', '#---------------------------------------------------------------------------\n', '#   Miscellaneous module data\n', '#---------------------------------------------------------------------------\n', '#\n', '#This parameter controls whether or not logging inside infrastructure modules is activated.\n', '#The following modules are affected: inspect, logging, logging-plus\n', '#\n', 'noInfrastructureLogging = True\n', '\n', 'class Manager(logging.Manager):\n', '    """\n', '    Subclassing logging.Manager supports instantiating the subclassed Logger\n', '    instead of the standard Logger.\n', '    """\n', '    def __init__(self, rootnode):\n', '        """\n', '        Initialize the manager\n', '        """\n', '        super().__init__(rootnode)\n', '\n', '    def getLogger(self, name):\n', '        """\n', '        Return the subclassed Logger rather than the standard Logger\n', '        """\n', '        rv = None\n', '        if not isinstance(name, str):\n', "            raise TypeError('A logger name must be a string')\n", '        logging._acquireLock()\n', '        try:\n', '            if name in self.loggerDict:\n', '                rv = self.loggerDict[name]\n', '                if isinstance(rv, logging.PlaceHolder):\n', '                    ph = rv\n', '                    rv = (self.loggerClass or _loggerClass)(name)\n', '                    rv.manager = self\n', '                    self.loggerDict[name] = rv\n', '                    self._fixupChildren(ph, rv)\n', '                    self._fixupParents(rv)\n', '            else:\n', '                rv = (self.loggerClass or _loggerClass)(name)\n', '                rv.manager = self\n', '                self.loggerDict[name] = rv\n', '                self._fixupParents(rv)\n', '        finally:\n', '            logging._releaseLock()\n', '        return rv\n', '\n', '    def cleanupLoggers(self):\n', '        """\n', '        Remove registered file handlers from all available loggers\n', '        """\n', '        lgr = root\n', '        for hdl in reversed(lgr.handlers):\n', '            if isinstance(hdl, logging.FileHandler):\n', '                lgr.removeHandler(hdl)\n', '        for lgName in self.loggerDict:\n', '            lgr = self.getLogger(lgName)\n', '            for hdl in lgr.handlers:\n', '                if isinstance(hdl, logging.FileHandler):\n', '                    lgr.removeHandler(hdl)\n', '\n', 'class Logger(logging.Logger):\n', '    def __init__(self, name, level=logging.NOTSET):\n', '        """\n', '        Initialize the subclassed Logger\n', '        """\n', '        super().__init__(name, level)\n', '\n', '    def debug(self, msg, *args, **kwargs):\n', '        """\n', '        Indent DEBUG message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def info(self, msg, *args, **kwargs):\n', '        """\n', '        Indent INFO message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().info(msg, *args, **kwargs)\n', '\n', '    def warning(self, msg, *args, **kwargs):\n', '        """\n', '        Indent WARNING message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().warning(msg, *args, **kwargs)\n', '\n', '    def error(self, msg, *args, **kwargs):\n', '        """\n', '        Indent ERROR message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().error(msg, *args, **kwargs)\n', '\n', '    def logEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def logExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', 'class RootLogger(Logger):\n', '    """\n', '    This is the extended root logger\n', '    """\n', '    def __init__(self, level):\n', '        """\n', '        Initialize the logger with the name "root".\n', '        """\n', '        Logger.__init__(self, "root", level)\n', '\n', '_loggerClass = Logger\n', '\n', '\n', 'root = RootLogger(logging.WARNING)\n', 'Logger.root = root\n', 'Logger.manager = Manager(Logger.root)\n', '\n', 'def getLogger(name=None):\n', '    """\n', '    Return an extended logger with the specified name, creating it if necessary.\n', '\n', '    If no name is specified, return the root logger.\n', '    """\n', '    if not name or isinstance(name, str) and name == root.name:\n', '        return root\n', '    return Logger.manager.getLogger(name)\n', '\n', 'def excludeFromLogging(frame):\n', '    """\n', '    Check whether frame shall be excluded from logging.\n', '\n', '    This is the case if the module of the frame itself or on of its outer frames\n', '    belongs to the inspect or logging infrastructure\n', '    """\n', '    if not frame:\n', '        return False\n', '\n', '    module = inspect.getmodule(frame)\n', '    if not module:\n', '        return False\n', '\n', '    moduleName = module.__name__\n', '\n', '    if (moduleName == "inspect") \\\n', '    or (moduleName == "logging") \\\n', '    or (moduleName == __name__):\n', '        #Do not log inside infrastructure modules\n', '        return True\n', '    else:\n', '        oframe = frame.f_back\n', '        if not oframe:\n', '            return False\n', '        return excludeFromLogging(oframe)\n', '\n', 'def autoLogIgnore(frame, event, arg):\n', '    """\n', '    Function to register as trace function for scopes where logging shall be deactivated.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call'):\n", '        #Only call needs to be sensed       \n', '        return autoLogIgnore\n', '\n', 'def autoLogEntryExit(frame, event, arg):\n', '    """\n', '    Function to register as trace function for the current scope.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call') or (event == 'return'):\n", '        #Only call and return events are sensed\n', '        if not frame:\n', '            return autoLogIgnore\n', '\n', '        code_obj = frame.f_code\n', '        func_name = code_obj.co_name\n', '        file_name = code_obj.co_filename\n', '        file_line = code_obj.co_firstlineno\n', '\n', '        module = inspect.getmodule(frame)\n', '        if not module:\n', '            return autoLogIgnore\n', '\n', '        moduleName = module.__name__\n', '\n', "        if event == 'call':\n", '            #System has been entering a new scope.\n', '            if noInfrastructureLogging:\n', '                if excludeFromLogging(frame):\n', '                    return autoLogIgnore\n', '\n', "            getLogger(moduleName).autoLogEntry('%s (%s - line %s - module %s)', func_name, file_name, file_line, moduleName)\n", '            #The function returns a reference to itself, in order to register itself as trace functuion for the new scope\n', '            return autoLogEntryExit\n', "        elif event == 'return':\n", '            #System is about to exit a scope (function or other code block). arg is the value being returned.\n', "            getLogger(moduleName).autoLogExit ('%s : Return value: %s', func_name, arg)\n", '\n', 'def removeFileHandlers():\n', '    """This function removes file handlers from available loggers in order to avoid a race condition during shutdown\n', '    The Python shutdown sequence is as follows:\n', '    1. Stop main thread\n', '    2. Close open file handlers\n', '    3. Wait for termination of non-daemon threads\n', '    4. Execute registered atexit functions\n', '    5. Garbage collection\n', '    6. Process termination\n', '\n', '    If class __del__ functions include logging with file handlers, and if ojects are destroyed \n', '    during garbage collection (5), file output will lead to an exception \n', '    because open file handlers have already been closed (2).\n', '    \n', '    Note: This applies only to explicit logging within the __del__ functions.\n', '    Automatic logging of entry and exit has already been switched off at this time \n', '    through unregisterAutoLogEntryExit.\n', '    """\n', '    mgr = getLogger().manager\n', '    mgr.cleanupLoggers()\n', '\n', 'def registerAutoLogEntryExit():\n', '    """\n', '    Register autoLogEntryExit as system trace function\n', '\n', '    This will issue logging whenever a function scope is entered or exited\n', '    """\n', '    sys.settrace(autoLogEntryExit)\n', '\n', 'def unregisterAutoLogEntryExit():\n', '    """\n', '    Clear system trace function\n', '\n', '    This will stop logging function entry / exit\n', '    """\n', '    sys.settrace(None)\n', '\n', '#Register unregisterAutoLogEntryExit to avoid logging exceptions during module shutdown\n', 'atexit.register(removeFileHandlers)\n', 'atexit.register(unregisterAutoLogEntryExit)\n']
2020-12-13 14:09:29,087 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:29,089 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:29,091 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:29,093 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:29,096 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:29,098 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:29,100 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:29,102 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:29,104 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:29,106 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:29,108 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:29,110 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:29,112 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:29,114 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:29,116 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:29,118 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:29,121 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:29,123 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:29,125 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#MIT License\n', '#\n', '#Copyright (c) 2020 signag\n', '#\n', '#Permission is hereby granted, free of charge, to any person obtaining a copy\n', '#of this software and associated documentation files (the "Software"), to deal\n', '#in the Software without restriction, including without limitation the rights\n', '#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '#copies of the Software, and to permit persons to whom the Software is\n', '#furnished to do so, subject to the following conditions:\n', '#\n', '#The above copyright notice and this permission notice shall be included in all\n', '#copies or substantial portions of the Software.\n', '#\n', '#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '#SOFTWARE.\n', '"""\n', '`logging_plus` - Add-on to Python logging\n', '\n', 'This module extends the standard Python logging module for the following aspects:\n', '- Subclassing Logger allows customization of logging messages depending on context\n', '- This is used for automatic indentation depending on call stack level\n', '- The module provides also the capability to generically log function entry and exit\n', '"""\n', 'import logging\n', 'import inspect\n', 'import sys\n', 'import atexit\n', '\n', '#---------------------------------------------------------------------------\n', '#   Miscellaneous module data\n', '#---------------------------------------------------------------------------\n', '#\n', '#This parameter controls whether or not logging inside infrastructure modules is activated.\n', '#The following modules are affected: inspect, logging, logging-plus\n', '#\n', 'noInfrastructureLogging = True\n', '\n', 'class Manager(logging.Manager):\n', '    """\n', '    Subclassing logging.Manager supports instantiating the subclassed Logger\n', '    instead of the standard Logger.\n', '    """\n', '    def __init__(self, rootnode):\n', '        """\n', '        Initialize the manager\n', '        """\n', '        super().__init__(rootnode)\n', '\n', '    def getLogger(self, name):\n', '        """\n', '        Return the subclassed Logger rather than the standard Logger\n', '        """\n', '        rv = None\n', '        if not isinstance(name, str):\n', "            raise TypeError('A logger name must be a string')\n", '        logging._acquireLock()\n', '        try:\n', '            if name in self.loggerDict:\n', '                rv = self.loggerDict[name]\n', '                if isinstance(rv, logging.PlaceHolder):\n', '                    ph = rv\n', '                    rv = (self.loggerClass or _loggerClass)(name)\n', '                    rv.manager = self\n', '                    self.loggerDict[name] = rv\n', '                    self._fixupChildren(ph, rv)\n', '                    self._fixupParents(rv)\n', '            else:\n', '                rv = (self.loggerClass or _loggerClass)(name)\n', '                rv.manager = self\n', '                self.loggerDict[name] = rv\n', '                self._fixupParents(rv)\n', '        finally:\n', '            logging._releaseLock()\n', '        return rv\n', '\n', '    def cleanupLoggers(self):\n', '        """\n', '        Remove registered file handlers from all available loggers\n', '        """\n', '        lgr = root\n', '        for hdl in reversed(lgr.handlers):\n', '            if isinstance(hdl, logging.FileHandler):\n', '                lgr.removeHandler(hdl)\n', '        for lgName in self.loggerDict:\n', '            lgr = self.getLogger(lgName)\n', '            for hdl in lgr.handlers:\n', '                if isinstance(hdl, logging.FileHandler):\n', '                    lgr.removeHandler(hdl)\n', '\n', 'class Logger(logging.Logger):\n', '    def __init__(self, name, level=logging.NOTSET):\n', '        """\n', '        Initialize the subclassed Logger\n', '        """\n', '        super().__init__(name, level)\n', '\n', '    def debug(self, msg, *args, **kwargs):\n', '        """\n', '        Indent DEBUG message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def info(self, msg, *args, **kwargs):\n', '        """\n', '        Indent INFO message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().info(msg, *args, **kwargs)\n', '\n', '    def warning(self, msg, *args, **kwargs):\n', '        """\n', '        Indent WARNING message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().warning(msg, *args, **kwargs)\n', '\n', '    def error(self, msg, *args, **kwargs):\n', '        """\n', '        Indent ERROR message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().error(msg, *args, **kwargs)\n', '\n', '    def logEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def logExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', 'class RootLogger(Logger):\n', '    """\n', '    This is the extended root logger\n', '    """\n', '    def __init__(self, level):\n', '        """\n', '        Initialize the logger with the name "root".\n', '        """\n', '        Logger.__init__(self, "root", level)\n', '\n', '_loggerClass = Logger\n', '\n', '\n', 'root = RootLogger(logging.WARNING)\n', 'Logger.root = root\n', 'Logger.manager = Manager(Logger.root)\n', '\n', 'def getLogger(name=None):\n', '    """\n', '    Return an extended logger with the specified name, creating it if necessary.\n', '\n', '    If no name is specified, return the root logger.\n', '    """\n', '    if not name or isinstance(name, str) and name == root.name:\n', '        return root\n', '    return Logger.manager.getLogger(name)\n', '\n', 'def excludeFromLogging(frame):\n', '    """\n', '    Check whether frame shall be excluded from logging.\n', '\n', '    This is the case if the module of the frame itself or on of its outer frames\n', '    belongs to the inspect or logging infrastructure\n', '    """\n', '    if not frame:\n', '        return False\n', '\n', '    module = inspect.getmodule(frame)\n', '    if not module:\n', '        return False\n', '\n', '    moduleName = module.__name__\n', '\n', '    if (moduleName == "inspect") \\\n', '    or (moduleName == "logging") \\\n', '    or (moduleName == __name__):\n', '        #Do not log inside infrastructure modules\n', '        return True\n', '    else:\n', '        oframe = frame.f_back\n', '        if not oframe:\n', '            return False\n', '        return excludeFromLogging(oframe)\n', '\n', 'def autoLogIgnore(frame, event, arg):\n', '    """\n', '    Function to register as trace function for scopes where logging shall be deactivated.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call'):\n", '        #Only call needs to be sensed       \n', '        return autoLogIgnore\n', '\n', 'def autoLogEntryExit(frame, event, arg):\n', '    """\n', '    Function to register as trace function for the current scope.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call') or (event == 'return'):\n", '        #Only call and return events are sensed\n', '        if not frame:\n', '            return autoLogIgnore\n', '\n', '        code_obj = frame.f_code\n', '        func_name = code_obj.co_name\n', '        file_name = code_obj.co_filename\n', '        file_line = code_obj.co_firstlineno\n', '\n', '        module = inspect.getmodule(frame)\n', '        if not module:\n', '            return autoLogIgnore\n', '\n', '        moduleName = module.__name__\n', '\n', "        if event == 'call':\n", '            #System has been entering a new scope.\n', '            if noInfrastructureLogging:\n', '                if excludeFromLogging(frame):\n', '                    return autoLogIgnore\n', '\n', "            getLogger(moduleName).autoLogEntry('%s (%s - line %s - module %s)', func_name, file_name, file_line, moduleName)\n", '            #The function returns a reference to itself, in order to register itself as trace functuion for the new scope\n', '            return autoLogEntryExit\n', "        elif event == 'return':\n", '            #System is about to exit a scope (function or other code block). arg is the value being returned.\n', "            getLogger(moduleName).autoLogExit ('%s : Return value: %s', func_name, arg)\n", '\n', 'def removeFileHandlers():\n', '    """This function removes file handlers from available loggers in order to avoid a race condition during shutdown\n', '    The Python shutdown sequence is as follows:\n', '    1. Stop main thread\n', '    2. Close open file handlers\n', '    3. Wait for termination of non-daemon threads\n', '    4. Execute registered atexit functions\n', '    5. Garbage collection\n', '    6. Process termination\n', '\n', '    If class __del__ functions include logging with file handlers, and if ojects are destroyed \n', '    during garbage collection (5), file output will lead to an exception \n', '    because open file handlers have already been closed (2).\n', '    \n', '    Note: This applies only to explicit logging within the __del__ functions.\n', '    Automatic logging of entry and exit has already been switched off at this time \n', '    through unregisterAutoLogEntryExit.\n', '    """\n', '    mgr = getLogger().manager\n', '    mgr.cleanupLoggers()\n', '\n', 'def registerAutoLogEntryExit():\n', '    """\n', '    Register autoLogEntryExit as system trace function\n', '\n', '    This will issue logging whenever a function scope is entered or exited\n', '    """\n', '    sys.settrace(autoLogEntryExit)\n', '\n', 'def unregisterAutoLogEntryExit():\n', '    """\n', '    Clear system trace function\n', '\n', '    This will stop logging function entry / exit\n', '    """\n', '    sys.settrace(None)\n', '\n', '#Register unregisterAutoLogEntryExit to avoid logging exceptions during module shutdown\n', 'atexit.register(removeFileHandlers)\n', 'atexit.register(unregisterAutoLogEntryExit)\n'], 102)
2020-12-13 14:09:29,131 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0)
2020-12-13 14:09:29,134 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:29,137 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:29,139 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:29,142 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:29,146 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:29,148 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:29,151 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:29,153 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:29,156 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:29,158 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:29,161 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:29,163 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:29,165 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:29,167 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:29,170 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:29,172 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:29,174 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:29,177 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:29,179 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:29,181 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:29,184 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:29,186 inspect              DEBUG                                <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:29,188 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:29,191 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,193 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:29,196 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,198 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:29,201 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:29,203 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,205 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,208 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,210 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,213 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,215 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,217 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,220 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:29,222 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:29,225 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:29,227 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:29,229 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:29,231 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:29,234 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:29,236 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:29,239 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:29,241 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:29,244 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:29,247 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:29,249 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:29,252 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:29,254 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:29,257 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:29,259 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:29,262 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:29,264 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:29,266 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:29,268 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:29,271 inspect              DEBUG                                    <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:29,273 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:29,275 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,277 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:29,280 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,282 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:29,284 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:29,286 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,289 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,291 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,293 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,295 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,298 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,300 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,302 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:29,305 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:29,307 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:29,309 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:29,311 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:29,313 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:29,316 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:29,318 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:29,320 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:29,322 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module 'logTestMod' from '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py'>
2020-12-13 14:09:29,324 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:29,326 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#!/usr/bin/python3\n', '\n', 'from context import logging_plus\n', 'logger = logging_plus.getLogger(__name__)\n', '\n', 'class MyClass:\n', '    def __init__(self):\n', '        self.__status = 1\n', '        logger.debug("## Explicit log: A - Initializing MyClass")\n', '        \n', '    def __del__(self):\n', '        logger.debug("## Explicit log: B - Finalizing MyClass")\n', '\n', '    @property\n', '    def status(self):\n', '        logger.debug("## Explicit log: C - getter of MyClass")\n', '        return self.__status\n', '\n', '    @status.setter\n', '    def status(self, value):\n', '        logger.debug("## Explicit log: D - setter of MyClass")\n', '        self.__status = value\n', '\n', '    def doSomething(self):\n', '        logger.debug("## Explicit log: E - MyClass method call")\n', '\n', 'class MySpecialClass(MyClass):\n', '    def __init__(self):\n', '        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n', '        super().__init__()\n', '\n', '    def __del__(self):\n', '        logger.debug("## Explicit log: G - Finalizing subclass MySpecialClass(MyClass)")\n', '        super().__del__()\n']
2020-12-13 14:09:29,328 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:29,330 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:29,333 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:29,335 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:29,337 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:29,339 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:29,341 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:29,343 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:29,345 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:29,347 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:29,349 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:29,351 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:29,353 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:29,356 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:29,358 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:29,360 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:29,362 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:29,364 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:29,366 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#!/usr/bin/python3\n', '\n', 'from context import logging_plus\n', 'logger = logging_plus.getLogger(__name__)\n', '\n', 'class MyClass:\n', '    def __init__(self):\n', '        self.__status = 1\n', '        logger.debug("## Explicit log: A - Initializing MyClass")\n', '        \n', '    def __del__(self):\n', '        logger.debug("## Explicit log: B - Finalizing MyClass")\n', '\n', '    @property\n', '    def status(self):\n', '        logger.debug("## Explicit log: C - getter of MyClass")\n', '        return self.__status\n', '\n', '    @status.setter\n', '    def status(self, value):\n', '        logger.debug("## Explicit log: D - setter of MyClass")\n', '        self.__status = value\n', '\n', '    def doSomething(self):\n', '        logger.debug("## Explicit log: E - MyClass method call")\n', '\n', 'class MySpecialClass(MyClass):\n', '    def __init__(self):\n', '        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n', '        super().__init__()\n', '\n', '    def __del__(self):\n', '        logger.debug("## Explicit log: G - Finalizing subclass MySpecialClass(MyClass)")\n', '        super().__del__()\n'], 27)
2020-12-13 14:09:29,369 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=29, function='__init__', code_context=['        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n'], index=0)
2020-12-13 14:09:29,372 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:29,373 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:29,375 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:29,377 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:29,379 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:29,381 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:29,383 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:29,386 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:29,388 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:29,390 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:29,392 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:29,394 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:29,397 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:29,399 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:29,402 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:29,405 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:29,407 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:29,409 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:29,412 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:29,414 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:29,416 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:29,418 inspect              DEBUG                                <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:29,420 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:29,422 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,425 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:29,427 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,429 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:29,431 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:29,433 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,435 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,437 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,439 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,441 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,444 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,446 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,448 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:29,450 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:29,452 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:29,454 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:29,456 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:29,458 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:29,460 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:29,462 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:29,465 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:29,467 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:29,470 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:29,472 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:29,474 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:29,477 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:29,479 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:29,481 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:29,483 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:29,486 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:29,488 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:29,490 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:29,493 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:29,495 inspect              DEBUG                                    <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:29,497 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:29,499 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,501 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:29,503 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,506 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:29,508 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:29,510 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,513 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,515 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,517 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,519 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,522 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,524 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,526 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:29,528 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:29,530 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:29,533 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:29,535 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:29,537 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:29,539 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:29,541 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:29,543 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:29,546 inspect              DEBUG                                    >>> Entry getabsfile (/usr/lib/python3.7/inspect.py - line 702 - module inspect)
2020-12-13 14:09:29,548 posixpath            DEBUG                                        >>> Entry abspath (/usr/lib/python3.7/posixpath.py - line 376 - module posixpath)
2020-12-13 14:09:29,550 posixpath            DEBUG                                            >>> Entry isabs (/usr/lib/python3.7/posixpath.py - line 64 - module posixpath)
2020-12-13 14:09:29,553 posixpath            DEBUG                                                >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:29,555 posixpath            DEBUG                                                <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:29,558 posixpath            DEBUG                                            <<< Exit  isabs : Return value: False
2020-12-13 14:09:29,560 posixpath            DEBUG                                            >>> Entry join (/usr/lib/python3.7/posixpath.py - line 75 - module posixpath)
2020-12-13 14:09:29,563 posixpath            DEBUG                                                >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:29,565 posixpath            DEBUG                                                <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:29,568 posixpath            DEBUG                                            <<< Exit  join : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:29,570 posixpath            DEBUG                                            >>> Entry normpath (/usr/lib/python3.7/posixpath.py - line 338 - module posixpath)
2020-12-13 14:09:29,573 posixpath            DEBUG                                            <<< Exit  normpath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:29,575 posixpath            DEBUG                                        <<< Exit  abspath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:29,578 posixpath            DEBUG                                        >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:29,580 posixpath            DEBUG                                        <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:29,582 inspect              DEBUG                                    <<< Exit  getabsfile : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:29,584 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module '__main__' from 'logTest.py'>
2020-12-13 14:09:29,586 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:29,588 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n']
2020-12-13 14:09:29,591 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:29,593 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:29,595 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:29,597 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:29,599 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:29,601 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:29,603 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:29,605 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:29,607 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:29,609 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:29,611 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:29,613 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:29,615 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:29,617 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:29,619 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:29,622 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:29,624 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:29,627 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:29,629 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n'], 0)
2020-12-13 14:09:29,631 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='logTest.py', lineno=41, function='<module>', code_context=['x = logTestMod.MySpecialClass()\n'], index=0)
2020-12-13 14:09:29,634 inspect              DEBUG                    <<< Exit  getouterframes : Return value: [FrameInfo(frame=<frame at 0x7fb12c43e8, file '/home/pi/dev/py-logging-plus/logging_plus/__init__.py', line 107, code debug>, filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0), FrameInfo(frame=<frame at 0x7fb12d8af8, file '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', line 29, code __init__>, filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=29, function='__init__', code_context=['        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n'], index=0), FrameInfo(frame=<frame at 0x7fb15c19f8, file 'logTest.py', line 41, code <module>>, filename='logTest.py', lineno=41, function='<module>', code_context=['x = logTestMod.MySpecialClass()\n'], index=0)]
2020-12-13 14:09:29,636 inspect              DEBUG                <<< Exit  stack : Return value: [FrameInfo(frame=<frame at 0x7fb12c43e8, file '/home/pi/dev/py-logging-plus/logging_plus/__init__.py', line 107, code debug>, filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0), FrameInfo(frame=<frame at 0x7fb12d8af8, file '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', line 29, code __init__>, filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=29, function='__init__', code_context=['        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n'], index=0), FrameInfo(frame=<frame at 0x7fb15c19f8, file 'logTest.py', line 41, code <module>>, filename='logTest.py', lineno=41, function='<module>', code_context=['x = logTestMod.MySpecialClass()\n'], index=0)]
2020-12-13 14:09:29,638 logging              DEBUG                >>> Entry debug (/usr/lib/python3.7/logging/__init__.py - line 1361 - module logging)
2020-12-13 14:09:29,640 logging              DEBUG                    >>> Entry isEnabledFor (/usr/lib/python3.7/logging/__init__.py - line 1619 - module logging)
2020-12-13 14:09:29,642 logging              DEBUG                    <<< Exit  isEnabledFor : Return value: True
2020-12-13 14:09:29,643 logging              DEBUG                    >>> Entry _log (/usr/lib/python3.7/logging/__init__.py - line 1496 - module logging)
2020-12-13 14:09:29,645 logging              DEBUG                        >>> Entry findCaller (/usr/lib/python3.7/logging/__init__.py - line 1451 - module logging)
2020-12-13 14:09:29,647 logging              DEBUG                            >>> Entry <lambda> (/usr/lib/python3.7/logging/__init__.py - line 154 - module logging)
2020-12-13 14:09:29,649 logging              DEBUG                            <<< Exit  <lambda> : Return value: <frame at 0x7fb12a6048, file '/usr/lib/python3.7/logging/__init__.py', line 1371, code debug>
2020-12-13 14:09:29,651 posixpath            DEBUG                            >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:29,653 posixpath            DEBUG                            <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:29,655 logging              DEBUG                        <<< Exit  findCaller : Return value: ('/home/pi/dev/py-logging-plus/logging_plus/__init__.py', 109, 'debug', None)
2020-12-13 14:09:29,657 logging              DEBUG                        >>> Entry makeRecord (/usr/lib/python3.7/logging/__init__.py - line 1481 - module logging)
2020-12-13 14:09:29,659 logging              DEBUG                            >>> Entry __init__ (/usr/lib/python3.7/logging/__init__.py - line 293 - module logging)
2020-12-13 14:09:29,661 logging              DEBUG                                >>> Entry getLevelName (/usr/lib/python3.7/logging/__init__.py - line 117 - module logging)
2020-12-13 14:09:29,663 logging              DEBUG                                <<< Exit  getLevelName : Return value: DEBUG
2020-12-13 14:09:29,665 posixpath            DEBUG                                >>> Entry basename (/usr/lib/python3.7/posixpath.py - line 144 - module posixpath)
2020-12-13 14:09:29,667 posixpath            DEBUG                                    >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:29,669 posixpath            DEBUG                                    <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:29,672 posixpath            DEBUG                                <<< Exit  basename : Return value: __init__.py
2020-12-13 14:09:29,674 posixpath            DEBUG                                >>> Entry splitext (/usr/lib/python3.7/posixpath.py - line 121 - module posixpath)
2020-12-13 14:09:29,676 genericpath          DEBUG                                    >>> Entry _splitext (/usr/lib/python3.7/genericpath.py - line 117 - module genericpath)
2020-12-13 14:09:29,678 genericpath          DEBUG                                    <<< Exit  _splitext : Return value: ('__init__', '.py')
2020-12-13 14:09:29,681 posixpath            DEBUG                                <<< Exit  splitext : Return value: ('__init__', '.py')
2020-12-13 14:09:29,683 threading            DEBUG                                >>> Entry current_thread (/usr/lib/python3.7/threading.py - line 1214 - module threading)
2020-12-13 14:09:29,685 threading            DEBUG                                <<< Exit  current_thread : Return value: <_MainThread(MainThread, started 548443516944)>
2020-12-13 14:09:29,687 threading            DEBUG                                >>> Entry name (/usr/lib/python3.7/threading.py - line 1052 - module threading)
2020-12-13 14:09:29,689 threading            DEBUG                                <<< Exit  name : Return value: MainThread
2020-12-13 14:09:29,691 logging              DEBUG                            <<< Exit  __init__ : Return value: None
2020-12-13 14:09:29,693 logging              DEBUG                        <<< Exit  makeRecord : Return value: <LogRecord: logTestMod, 10, /home/pi/dev/py-logging-plus/logging_plus/__init__.py, 109, "        ## Explicit log: F - Initializing subclass MySpecialClass(MyClass)">
2020-12-13 14:09:29,695 logging              DEBUG                        >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 1521 - module logging)
2020-12-13 14:09:29,697 logging              DEBUG                            >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:29,699 logging              DEBUG                            <<< Exit  filter : Return value: True
2020-12-13 14:09:29,701 logging              DEBUG                            >>> Entry callHandlers (/usr/lib/python3.7/logging/__init__.py - line 1575 - module logging)
2020-12-13 14:09:29,704 logging              DEBUG                                >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 892 - module logging)
2020-12-13 14:09:29,706 logging              DEBUG                                    >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:29,709 logging              DEBUG                                    <<< Exit  filter : Return value: True
2020-12-13 14:09:29,711 logging              DEBUG                                    >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:29,713 logging              DEBUG                                    <<< Exit  acquire : Return value: None
2020-12-13 14:09:29,715 logging              DEBUG                                    >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1022 - module logging)
2020-12-13 14:09:29,718 logging              DEBUG                                        >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 869 - module logging)
2020-12-13 14:09:29,720 logging              DEBUG                                            >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 606 - module logging)
2020-12-13 14:09:29,723 logging              DEBUG                                                >>> Entry getMessage (/usr/lib/python3.7/logging/__init__.py - line 371 - module logging)
2020-12-13 14:09:29,725 logging              DEBUG                                                <<< Exit  getMessage : Return value:         ## Explicit log: F - Initializing subclass MySpecialClass(MyClass)
2020-12-13 14:09:29,728 logging              DEBUG                                                >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 584 - module logging)
2020-12-13 14:09:29,731 logging              DEBUG                                                    >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 429 - module logging)
2020-12-13 14:09:29,734 logging              DEBUG                                                    <<< Exit  usesTime : Return value: True
2020-12-13 14:09:29,737 logging              DEBUG                                                <<< Exit  usesTime : Return value: True
2020-12-13 14:09:29,739 logging              DEBUG                                                >>> Entry formatTime (/usr/lib/python3.7/logging/__init__.py - line 539 - module logging)
2020-12-13 14:09:29,742 logging              DEBUG                                                <<< Exit  formatTime : Return value: 2020-12-13 14:09:29,659
2020-12-13 14:09:29,744 logging              DEBUG                                                >>> Entry formatMessage (/usr/lib/python3.7/logging/__init__.py - line 590 - module logging)
2020-12-13 14:09:29,747 logging              DEBUG                                                    >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 432 - module logging)
2020-12-13 14:09:29,750 logging              DEBUG                                                    <<< Exit  format : Return value: 2020-12-13 14:09:29,659 logTestMod           DEBUG            ## Explicit log: F - Initializing subclass MySpecialClass(MyClass)
2020-12-13 14:09:29,752 logging              DEBUG                                                <<< Exit  formatMessage : Return value: 2020-12-13 14:09:29,659 logTestMod           DEBUG            ## Explicit log: F - Initializing subclass MySpecialClass(MyClass)
2020-12-13 14:09:29,755 logging              DEBUG                                            <<< Exit  format : Return value: 2020-12-13 14:09:29,659 logTestMod           DEBUG            ## Explicit log: F - Initializing subclass MySpecialClass(MyClass)
2020-12-13 14:09:29,757 logging              DEBUG                                        <<< Exit  format : Return value: 2020-12-13 14:09:29,659 logTestMod           DEBUG            ## Explicit log: F - Initializing subclass MySpecialClass(MyClass)
2020-12-13 14:09:29,759 logging              DEBUG                                        >>> Entry flush (/usr/lib/python3.7/logging/__init__.py - line 1011 - module logging)
2020-12-13 14:09:29,762 logging              DEBUG                                            >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:29,764 logging              DEBUG                                            <<< Exit  acquire : Return value: None
2020-12-13 14:09:29,766 logging              DEBUG                                            >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:29,769 logging              DEBUG                                            <<< Exit  release : Return value: None
2020-12-13 14:09:29,771 logging              DEBUG                                        <<< Exit  flush : Return value: None
2020-12-13 14:09:29,773 logging              DEBUG                                    <<< Exit  emit : Return value: None
2020-12-13 14:09:29,776 logging              DEBUG                                    >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:29,778 logging              DEBUG                                    <<< Exit  release : Return value: None
2020-12-13 14:09:29,780 logging              DEBUG                                <<< Exit  handle : Return value: True
2020-12-13 14:09:29,782 logging              DEBUG                                >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 892 - module logging)
2020-12-13 14:09:29,784 logging              DEBUG                                    >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:29,787 logging              DEBUG                                    <<< Exit  filter : Return value: True
2020-12-13 14:09:29,789 logging              DEBUG                                    >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:29,791 logging              DEBUG                                    <<< Exit  acquire : Return value: None
2020-12-13 14:09:29,793 logging              DEBUG                                    >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1123 - module logging)
2020-12-13 14:09:29,796 logging              DEBUG                                        >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1022 - module logging)
2020-12-13 14:09:29,798 logging              DEBUG                                            >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 869 - module logging)
2020-12-13 14:09:29,801 logging              DEBUG                                                >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 606 - module logging)
2020-12-13 14:09:29,803 logging              DEBUG                                                    >>> Entry getMessage (/usr/lib/python3.7/logging/__init__.py - line 371 - module logging)
2020-12-13 14:09:29,806 logging              DEBUG                                                    <<< Exit  getMessage : Return value:         ## Explicit log: F - Initializing subclass MySpecialClass(MyClass)
2020-12-13 14:09:29,809 logging              DEBUG                                                    >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 584 - module logging)
2020-12-13 14:09:29,811 logging              DEBUG                                                        >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 429 - module logging)
2020-12-13 14:09:29,814 logging              DEBUG                                                        <<< Exit  usesTime : Return value: True
2020-12-13 14:09:29,817 logging              DEBUG                                                    <<< Exit  usesTime : Return value: True
2020-12-13 14:09:29,819 logging              DEBUG                                                    >>> Entry formatTime (/usr/lib/python3.7/logging/__init__.py - line 539 - module logging)
2020-12-13 14:09:29,822 logging              DEBUG                                                    <<< Exit  formatTime : Return value: 2020-12-13 14:09:29,659
2020-12-13 14:09:29,825 logging              DEBUG                                                    >>> Entry formatMessage (/usr/lib/python3.7/logging/__init__.py - line 590 - module logging)
2020-12-13 14:09:29,828 logging              DEBUG                                                        >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 432 - module logging)
2020-12-13 14:09:29,831 logging              DEBUG                                                        <<< Exit  format : Return value: 2020-12-13 14:09:29,659 logTestMod           DEBUG            ## Explicit log: F - Initializing subclass MySpecialClass(MyClass)
2020-12-13 14:09:29,834 logging              DEBUG                                                    <<< Exit  formatMessage : Return value: 2020-12-13 14:09:29,659 logTestMod           DEBUG            ## Explicit log: F - Initializing subclass MySpecialClass(MyClass)
2020-12-13 14:09:29,836 logging              DEBUG                                                <<< Exit  format : Return value: 2020-12-13 14:09:29,659 logTestMod           DEBUG            ## Explicit log: F - Initializing subclass MySpecialClass(MyClass)
2020-12-13 14:09:29,839 logging              DEBUG                                            <<< Exit  format : Return value: 2020-12-13 14:09:29,659 logTestMod           DEBUG            ## Explicit log: F - Initializing subclass MySpecialClass(MyClass)
2020-12-13 14:09:29,659 logTestMod           DEBUG            ## Explicit log: F - Initializing subclass MySpecialClass(MyClass)
2020-12-13 14:09:29,841 logging              DEBUG                                            >>> Entry flush (/usr/lib/python3.7/logging/__init__.py - line 1011 - module logging)
2020-12-13 14:09:29,843 logging              DEBUG                                                >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:29,846 logging              DEBUG                                                <<< Exit  acquire : Return value: None
2020-12-13 14:09:29,849 logging              DEBUG                                                >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:29,851 logging              DEBUG                                                <<< Exit  release : Return value: None
2020-12-13 14:09:29,854 logging              DEBUG                                            <<< Exit  flush : Return value: None
2020-12-13 14:09:29,856 logging              DEBUG                                        <<< Exit  emit : Return value: None
2020-12-13 14:09:29,858 logging              DEBUG                                    <<< Exit  emit : Return value: None
2020-12-13 14:09:29,860 logging              DEBUG                                    >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:29,863 logging              DEBUG                                    <<< Exit  release : Return value: None
2020-12-13 14:09:29,865 logging              DEBUG                                <<< Exit  handle : Return value: True
2020-12-13 14:09:29,867 logging              DEBUG                            <<< Exit  callHandlers : Return value: None
2020-12-13 14:09:29,868 logging              DEBUG                        <<< Exit  handle : Return value: None
2020-12-13 14:09:29,870 logging              DEBUG                    <<< Exit  _log : Return value: None
2020-12-13 14:09:29,872 logging              DEBUG                <<< Exit  debug : Return value: None
2020-12-13 14:09:29,873 logging_plus         DEBUG            <<< Exit  debug : Return value: None
2020-12-13 14:09:29,875 logTestMod           DEBUG            >>> Entry __init__ (/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py - line 7 - module logTestMod)
2020-12-13 14:09:29,876 logging_plus         DEBUG                >>> Entry debug (/home/pi/dev/py-logging-plus/logging_plus/__init__.py - line 103 - module logging_plus)
2020-12-13 14:09:29,878 inspect              DEBUG                    >>> Entry stack (/usr/lib/python3.7/inspect.py - line 1511 - module inspect)
2020-12-13 14:09:29,880 inspect              DEBUG                        >>> Entry getouterframes (/usr/lib/python3.7/inspect.py - line 1483 - module inspect)
2020-12-13 14:09:29,882 inspect              DEBUG                            >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:29,884 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:29,886 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:29,888 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:29,890 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:29,892 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:29,895 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:29,897 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:29,900 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:29,902 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:29,905 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:29,907 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:29,910 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:29,913 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:29,916 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:29,918 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:29,921 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:29,924 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:29,926 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:29,928 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:29,930 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:29,933 inspect              DEBUG                                    <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:29,935 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:29,937 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,940 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:29,942 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,944 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:29,946 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:29,949 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,951 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,953 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,955 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,958 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,960 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:29,962 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:29,965 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:29,967 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:29,969 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:29,971 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:29,973 inspect              DEBUG                                >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:29,976 inspect              DEBUG                                    >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:29,978 inspect              DEBUG                                        >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:29,980 inspect              DEBUG                                            >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:29,983 inspect              DEBUG                                            <<< Exit  ismodule : Return value: False
2020-12-13 14:09:29,985 inspect              DEBUG                                            >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:29,987 inspect              DEBUG                                            <<< Exit  isclass : Return value: False
2020-12-13 14:09:29,990 inspect              DEBUG                                            >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:29,992 inspect              DEBUG                                            <<< Exit  ismethod : Return value: False
2020-12-13 14:09:29,995 inspect              DEBUG                                            >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:29,997 inspect              DEBUG                                            <<< Exit  isfunction : Return value: False
2020-12-13 14:09:30,000 inspect              DEBUG                                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:30,002 inspect              DEBUG                                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:30,005 inspect              DEBUG                                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:30,007 inspect              DEBUG                                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:30,009 inspect              DEBUG                                            >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:30,012 inspect              DEBUG                                            <<< Exit  iscode : Return value: True
2020-12-13 14:09:30,014 inspect              DEBUG                                        <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:30,016 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,019 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,021 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,023 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,026 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,028 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:30,030 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,033 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,035 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,038 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,040 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,042 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,045 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,047 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:30,049 genericpath          DEBUG                                        >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:30,052 genericpath          DEBUG                                        <<< Exit  exists : Return value: True
2020-12-13 14:09:30,054 inspect              DEBUG                                    <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:30,056 linecache            DEBUG                                    >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:30,059 linecache            DEBUG                                    <<< Exit  checkcache : Return value: None
2020-12-13 14:09:30,061 inspect              DEBUG                                    >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:30,063 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:30,066 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:30,068 inspect              DEBUG                                    <<< Exit  getmodule : Return value: <module 'logging_plus' from '/home/pi/dev/py-logging-plus/logging_plus/__init__.py'>
2020-12-13 14:09:30,070 linecache            DEBUG                                    >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:30,072 linecache            DEBUG                                    <<< Exit  getlines : Return value: ['#MIT License\n', '#\n', '#Copyright (c) 2020 signag\n', '#\n', '#Permission is hereby granted, free of charge, to any person obtaining a copy\n', '#of this software and associated documentation files (the "Software"), to deal\n', '#in the Software without restriction, including without limitation the rights\n', '#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '#copies of the Software, and to permit persons to whom the Software is\n', '#furnished to do so, subject to the following conditions:\n', '#\n', '#The above copyright notice and this permission notice shall be included in all\n', '#copies or substantial portions of the Software.\n', '#\n', '#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '#SOFTWARE.\n', '"""\n', '`logging_plus` - Add-on to Python logging\n', '\n', 'This module extends the standard Python logging module for the following aspects:\n', '- Subclassing Logger allows customization of logging messages depending on context\n', '- This is used for automatic indentation depending on call stack level\n', '- The module provides also the capability to generically log function entry and exit\n', '"""\n', 'import logging\n', 'import inspect\n', 'import sys\n', 'import atexit\n', '\n', '#---------------------------------------------------------------------------\n', '#   Miscellaneous module data\n', '#---------------------------------------------------------------------------\n', '#\n', '#This parameter controls whether or not logging inside infrastructure modules is activated.\n', '#The following modules are affected: inspect, logging, logging-plus\n', '#\n', 'noInfrastructureLogging = True\n', '\n', 'class Manager(logging.Manager):\n', '    """\n', '    Subclassing logging.Manager supports instantiating the subclassed Logger\n', '    instead of the standard Logger.\n', '    """\n', '    def __init__(self, rootnode):\n', '        """\n', '        Initialize the manager\n', '        """\n', '        super().__init__(rootnode)\n', '\n', '    def getLogger(self, name):\n', '        """\n', '        Return the subclassed Logger rather than the standard Logger\n', '        """\n', '        rv = None\n', '        if not isinstance(name, str):\n', "            raise TypeError('A logger name must be a string')\n", '        logging._acquireLock()\n', '        try:\n', '            if name in self.loggerDict:\n', '                rv = self.loggerDict[name]\n', '                if isinstance(rv, logging.PlaceHolder):\n', '                    ph = rv\n', '                    rv = (self.loggerClass or _loggerClass)(name)\n', '                    rv.manager = self\n', '                    self.loggerDict[name] = rv\n', '                    self._fixupChildren(ph, rv)\n', '                    self._fixupParents(rv)\n', '            else:\n', '                rv = (self.loggerClass or _loggerClass)(name)\n', '                rv.manager = self\n', '                self.loggerDict[name] = rv\n', '                self._fixupParents(rv)\n', '        finally:\n', '            logging._releaseLock()\n', '        return rv\n', '\n', '    def cleanupLoggers(self):\n', '        """\n', '        Remove registered file handlers from all available loggers\n', '        """\n', '        lgr = root\n', '        for hdl in reversed(lgr.handlers):\n', '            if isinstance(hdl, logging.FileHandler):\n', '                lgr.removeHandler(hdl)\n', '        for lgName in self.loggerDict:\n', '            lgr = self.getLogger(lgName)\n', '            for hdl in lgr.handlers:\n', '                if isinstance(hdl, logging.FileHandler):\n', '                    lgr.removeHandler(hdl)\n', '\n', 'class Logger(logging.Logger):\n', '    def __init__(self, name, level=logging.NOTSET):\n', '        """\n', '        Initialize the subclassed Logger\n', '        """\n', '        super().__init__(name, level)\n', '\n', '    def debug(self, msg, *args, **kwargs):\n', '        """\n', '        Indent DEBUG message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def info(self, msg, *args, **kwargs):\n', '        """\n', '        Indent INFO message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().info(msg, *args, **kwargs)\n', '\n', '    def warning(self, msg, *args, **kwargs):\n', '        """\n', '        Indent WARNING message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().warning(msg, *args, **kwargs)\n', '\n', '    def error(self, msg, *args, **kwargs):\n', '        """\n', '        Indent ERROR message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().error(msg, *args, **kwargs)\n', '\n', '    def logEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def logExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', 'class RootLogger(Logger):\n', '    """\n', '    This is the extended root logger\n', '    """\n', '    def __init__(self, level):\n', '        """\n', '        Initialize the logger with the name "root".\n', '        """\n', '        Logger.__init__(self, "root", level)\n', '\n', '_loggerClass = Logger\n', '\n', '\n', 'root = RootLogger(logging.WARNING)\n', 'Logger.root = root\n', 'Logger.manager = Manager(Logger.root)\n', '\n', 'def getLogger(name=None):\n', '    """\n', '    Return an extended logger with the specified name, creating it if necessary.\n', '\n', '    If no name is specified, return the root logger.\n', '    """\n', '    if not name or isinstance(name, str) and name == root.name:\n', '        return root\n', '    return Logger.manager.getLogger(name)\n', '\n', 'def excludeFromLogging(frame):\n', '    """\n', '    Check whether frame shall be excluded from logging.\n', '\n', '    This is the case if the module of the frame itself or on of its outer frames\n', '    belongs to the inspect or logging infrastructure\n', '    """\n', '    if not frame:\n', '        return False\n', '\n', '    module = inspect.getmodule(frame)\n', '    if not module:\n', '        return False\n', '\n', '    moduleName = module.__name__\n', '\n', '    if (moduleName == "inspect") \\\n', '    or (moduleName == "logging") \\\n', '    or (moduleName == __name__):\n', '        #Do not log inside infrastructure modules\n', '        return True\n', '    else:\n', '        oframe = frame.f_back\n', '        if not oframe:\n', '            return False\n', '        return excludeFromLogging(oframe)\n', '\n', 'def autoLogIgnore(frame, event, arg):\n', '    """\n', '    Function to register as trace function for scopes where logging shall be deactivated.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call'):\n", '        #Only call needs to be sensed       \n', '        return autoLogIgnore\n', '\n', 'def autoLogEntryExit(frame, event, arg):\n', '    """\n', '    Function to register as trace function for the current scope.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call') or (event == 'return'):\n", '        #Only call and return events are sensed\n', '        if not frame:\n', '            return autoLogIgnore\n', '\n', '        code_obj = frame.f_code\n', '        func_name = code_obj.co_name\n', '        file_name = code_obj.co_filename\n', '        file_line = code_obj.co_firstlineno\n', '\n', '        module = inspect.getmodule(frame)\n', '        if not module:\n', '            return autoLogIgnore\n', '\n', '        moduleName = module.__name__\n', '\n', "        if event == 'call':\n", '            #System has been entering a new scope.\n', '            if noInfrastructureLogging:\n', '                if excludeFromLogging(frame):\n', '                    return autoLogIgnore\n', '\n', "            getLogger(moduleName).autoLogEntry('%s (%s - line %s - module %s)', func_name, file_name, file_line, moduleName)\n", '            #The function returns a reference to itself, in order to register itself as trace functuion for the new scope\n', '            return autoLogEntryExit\n', "        elif event == 'return':\n", '            #System is about to exit a scope (function or other code block). arg is the value being returned.\n', "            getLogger(moduleName).autoLogExit ('%s : Return value: %s', func_name, arg)\n", '\n', 'def removeFileHandlers():\n', '    """This function removes file handlers from available loggers in order to avoid a race condition during shutdown\n', '    The Python shutdown sequence is as follows:\n', '    1. Stop main thread\n', '    2. Close open file handlers\n', '    3. Wait for termination of non-daemon threads\n', '    4. Execute registered atexit functions\n', '    5. Garbage collection\n', '    6. Process termination\n', '\n', '    If class __del__ functions include logging with file handlers, and if ojects are destroyed \n', '    during garbage collection (5), file output will lead to an exception \n', '    because open file handlers have already been closed (2).\n', '    \n', '    Note: This applies only to explicit logging within the __del__ functions.\n', '    Automatic logging of entry and exit has already been switched off at this time \n', '    through unregisterAutoLogEntryExit.\n', '    """\n', '    mgr = getLogger().manager\n', '    mgr.cleanupLoggers()\n', '\n', 'def registerAutoLogEntryExit():\n', '    """\n', '    Register autoLogEntryExit as system trace function\n', '\n', '    This will issue logging whenever a function scope is entered or exited\n', '    """\n', '    sys.settrace(autoLogEntryExit)\n', '\n', 'def unregisterAutoLogEntryExit():\n', '    """\n', '    Clear system trace function\n', '\n', '    This will stop logging function entry / exit\n', '    """\n', '    sys.settrace(None)\n', '\n', '#Register unregisterAutoLogEntryExit to avoid logging exceptions during module shutdown\n', 'atexit.register(removeFileHandlers)\n', 'atexit.register(unregisterAutoLogEntryExit)\n']
2020-12-13 14:09:30,075 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:30,077 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:30,079 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:30,082 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:30,084 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:30,086 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:30,088 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:30,090 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:30,092 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:30,095 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:30,097 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:30,099 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:30,101 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:30,103 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:30,105 re                   DEBUG                                    >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:30,108 re                   DEBUG                                        >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:30,110 re                   DEBUG                                        <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:30,113 re                   DEBUG                                    <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:30,116 inspect              DEBUG                                <<< Exit  findsource : Return value: (['#MIT License\n', '#\n', '#Copyright (c) 2020 signag\n', '#\n', '#Permission is hereby granted, free of charge, to any person obtaining a copy\n', '#of this software and associated documentation files (the "Software"), to deal\n', '#in the Software without restriction, including without limitation the rights\n', '#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '#copies of the Software, and to permit persons to whom the Software is\n', '#furnished to do so, subject to the following conditions:\n', '#\n', '#The above copyright notice and this permission notice shall be included in all\n', '#copies or substantial portions of the Software.\n', '#\n', '#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '#SOFTWARE.\n', '"""\n', '`logging_plus` - Add-on to Python logging\n', '\n', 'This module extends the standard Python logging module for the following aspects:\n', '- Subclassing Logger allows customization of logging messages depending on context\n', '- This is used for automatic indentation depending on call stack level\n', '- The module provides also the capability to generically log function entry and exit\n', '"""\n', 'import logging\n', 'import inspect\n', 'import sys\n', 'import atexit\n', '\n', '#---------------------------------------------------------------------------\n', '#   Miscellaneous module data\n', '#---------------------------------------------------------------------------\n', '#\n', '#This parameter controls whether or not logging inside infrastructure modules is activated.\n', '#The following modules are affected: inspect, logging, logging-plus\n', '#\n', 'noInfrastructureLogging = True\n', '\n', 'class Manager(logging.Manager):\n', '    """\n', '    Subclassing logging.Manager supports instantiating the subclassed Logger\n', '    instead of the standard Logger.\n', '    """\n', '    def __init__(self, rootnode):\n', '        """\n', '        Initialize the manager\n', '        """\n', '        super().__init__(rootnode)\n', '\n', '    def getLogger(self, name):\n', '        """\n', '        Return the subclassed Logger rather than the standard Logger\n', '        """\n', '        rv = None\n', '        if not isinstance(name, str):\n', "            raise TypeError('A logger name must be a string')\n", '        logging._acquireLock()\n', '        try:\n', '            if name in self.loggerDict:\n', '                rv = self.loggerDict[name]\n', '                if isinstance(rv, logging.PlaceHolder):\n', '                    ph = rv\n', '                    rv = (self.loggerClass or _loggerClass)(name)\n', '                    rv.manager = self\n', '                    self.loggerDict[name] = rv\n', '                    self._fixupChildren(ph, rv)\n', '                    self._fixupParents(rv)\n', '            else:\n', '                rv = (self.loggerClass or _loggerClass)(name)\n', '                rv.manager = self\n', '                self.loggerDict[name] = rv\n', '                self._fixupParents(rv)\n', '        finally:\n', '            logging._releaseLock()\n', '        return rv\n', '\n', '    def cleanupLoggers(self):\n', '        """\n', '        Remove registered file handlers from all available loggers\n', '        """\n', '        lgr = root\n', '        for hdl in reversed(lgr.handlers):\n', '            if isinstance(hdl, logging.FileHandler):\n', '                lgr.removeHandler(hdl)\n', '        for lgName in self.loggerDict:\n', '            lgr = self.getLogger(lgName)\n', '            for hdl in lgr.handlers:\n', '                if isinstance(hdl, logging.FileHandler):\n', '                    lgr.removeHandler(hdl)\n', '\n', 'class Logger(logging.Logger):\n', '    def __init__(self, name, level=logging.NOTSET):\n', '        """\n', '        Initialize the subclassed Logger\n', '        """\n', '        super().__init__(name, level)\n', '\n', '    def debug(self, msg, *args, **kwargs):\n', '        """\n', '        Indent DEBUG message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def info(self, msg, *args, **kwargs):\n', '        """\n', '        Indent INFO message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().info(msg, *args, **kwargs)\n', '\n', '    def warning(self, msg, *args, **kwargs):\n', '        """\n', '        Indent WARNING message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().warning(msg, *args, **kwargs)\n', '\n', '    def error(self, msg, *args, **kwargs):\n', '        """\n', '        Indent ERROR message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().error(msg, *args, **kwargs)\n', '\n', '    def logEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def logExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', 'class RootLogger(Logger):\n', '    """\n', '    This is the extended root logger\n', '    """\n', '    def __init__(self, level):\n', '        """\n', '        Initialize the logger with the name "root".\n', '        """\n', '        Logger.__init__(self, "root", level)\n', '\n', '_loggerClass = Logger\n', '\n', '\n', 'root = RootLogger(logging.WARNING)\n', 'Logger.root = root\n', 'Logger.manager = Manager(Logger.root)\n', '\n', 'def getLogger(name=None):\n', '    """\n', '    Return an extended logger with the specified name, creating it if necessary.\n', '\n', '    If no name is specified, return the root logger.\n', '    """\n', '    if not name or isinstance(name, str) and name == root.name:\n', '        return root\n', '    return Logger.manager.getLogger(name)\n', '\n', 'def excludeFromLogging(frame):\n', '    """\n', '    Check whether frame shall be excluded from logging.\n', '\n', '    This is the case if the module of the frame itself or on of its outer frames\n', '    belongs to the inspect or logging infrastructure\n', '    """\n', '    if not frame:\n', '        return False\n', '\n', '    module = inspect.getmodule(frame)\n', '    if not module:\n', '        return False\n', '\n', '    moduleName = module.__name__\n', '\n', '    if (moduleName == "inspect") \\\n', '    or (moduleName == "logging") \\\n', '    or (moduleName == __name__):\n', '        #Do not log inside infrastructure modules\n', '        return True\n', '    else:\n', '        oframe = frame.f_back\n', '        if not oframe:\n', '            return False\n', '        return excludeFromLogging(oframe)\n', '\n', 'def autoLogIgnore(frame, event, arg):\n', '    """\n', '    Function to register as trace function for scopes where logging shall be deactivated.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call'):\n", '        #Only call needs to be sensed       \n', '        return autoLogIgnore\n', '\n', 'def autoLogEntryExit(frame, event, arg):\n', '    """\n', '    Function to register as trace function for the current scope.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call') or (event == 'return'):\n", '        #Only call and return events are sensed\n', '        if not frame:\n', '            return autoLogIgnore\n', '\n', '        code_obj = frame.f_code\n', '        func_name = code_obj.co_name\n', '        file_name = code_obj.co_filename\n', '        file_line = code_obj.co_firstlineno\n', '\n', '        module = inspect.getmodule(frame)\n', '        if not module:\n', '            return autoLogIgnore\n', '\n', '        moduleName = module.__name__\n', '\n', "        if event == 'call':\n", '            #System has been entering a new scope.\n', '            if noInfrastructureLogging:\n', '                if excludeFromLogging(frame):\n', '                    return autoLogIgnore\n', '\n', "            getLogger(moduleName).autoLogEntry('%s (%s - line %s - module %s)', func_name, file_name, file_line, moduleName)\n", '            #The function returns a reference to itself, in order to register itself as trace functuion for the new scope\n', '            return autoLogEntryExit\n', "        elif event == 'return':\n", '            #System is about to exit a scope (function or other code block). arg is the value being returned.\n', "            getLogger(moduleName).autoLogExit ('%s : Return value: %s', func_name, arg)\n", '\n', 'def removeFileHandlers():\n', '    """This function removes file handlers from available loggers in order to avoid a race condition during shutdown\n', '    The Python shutdown sequence is as follows:\n', '    1. Stop main thread\n', '    2. Close open file handlers\n', '    3. Wait for termination of non-daemon threads\n', '    4. Execute registered atexit functions\n', '    5. Garbage collection\n', '    6. Process termination\n', '\n', '    If class __del__ functions include logging with file handlers, and if ojects are destroyed \n', '    during garbage collection (5), file output will lead to an exception \n', '    because open file handlers have already been closed (2).\n', '    \n', '    Note: This applies only to explicit logging within the __del__ functions.\n', '    Automatic logging of entry and exit has already been switched off at this time \n', '    through unregisterAutoLogEntryExit.\n', '    """\n', '    mgr = getLogger().manager\n', '    mgr.cleanupLoggers()\n', '\n', 'def registerAutoLogEntryExit():\n', '    """\n', '    Register autoLogEntryExit as system trace function\n', '\n', '    This will issue logging whenever a function scope is entered or exited\n', '    """\n', '    sys.settrace(autoLogEntryExit)\n', '\n', 'def unregisterAutoLogEntryExit():\n', '    """\n', '    Clear system trace function\n', '\n', '    This will stop logging function entry / exit\n', '    """\n', '    sys.settrace(None)\n', '\n', '#Register unregisterAutoLogEntryExit to avoid logging exceptions during module shutdown\n', 'atexit.register(removeFileHandlers)\n', 'atexit.register(unregisterAutoLogEntryExit)\n'], 102)
2020-12-13 14:09:30,122 inspect              DEBUG                            <<< Exit  getframeinfo : Return value: Traceback(filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0)
2020-12-13 14:09:30,125 inspect              DEBUG                            >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:30,127 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:30,129 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:30,131 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:30,133 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:30,135 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:30,138 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:30,140 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:30,142 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:30,144 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:30,147 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:30,149 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:30,151 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:30,153 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:30,156 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:30,158 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:30,160 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:30,163 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:30,165 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:30,167 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:30,170 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:30,172 inspect              DEBUG                                    <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:30,174 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,177 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,179 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,181 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,183 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,185 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:30,188 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,190 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,192 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,194 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,197 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,200 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,203 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,206 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:30,208 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:30,211 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:30,215 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:30,218 inspect              DEBUG                                >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:30,220 inspect              DEBUG                                    >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:30,223 inspect              DEBUG                                        >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:30,226 inspect              DEBUG                                            >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:30,228 inspect              DEBUG                                            <<< Exit  ismodule : Return value: False
2020-12-13 14:09:30,231 inspect              DEBUG                                            >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:30,234 inspect              DEBUG                                            <<< Exit  isclass : Return value: False
2020-12-13 14:09:30,236 inspect              DEBUG                                            >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:30,239 inspect              DEBUG                                            <<< Exit  ismethod : Return value: False
2020-12-13 14:09:30,241 inspect              DEBUG                                            >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:30,244 inspect              DEBUG                                            <<< Exit  isfunction : Return value: False
2020-12-13 14:09:30,246 inspect              DEBUG                                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:30,249 inspect              DEBUG                                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:30,251 inspect              DEBUG                                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:30,254 inspect              DEBUG                                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:30,257 inspect              DEBUG                                            >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:30,260 inspect              DEBUG                                            <<< Exit  iscode : Return value: True
2020-12-13 14:09:30,262 inspect              DEBUG                                        <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:30,265 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,268 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,271 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,273 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,276 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,279 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:30,282 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,284 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,287 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,290 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,293 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,295 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,298 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,301 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:30,303 genericpath          DEBUG                                        >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:30,306 genericpath          DEBUG                                        <<< Exit  exists : Return value: True
2020-12-13 14:09:30,308 inspect              DEBUG                                    <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:30,310 linecache            DEBUG                                    >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:30,313 linecache            DEBUG                                    <<< Exit  checkcache : Return value: None
2020-12-13 14:09:30,315 inspect              DEBUG                                    >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:30,317 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:30,319 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:30,322 inspect              DEBUG                                    <<< Exit  getmodule : Return value: <module 'logTestMod' from '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py'>
2020-12-13 14:09:30,324 linecache            DEBUG                                    >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:30,326 linecache            DEBUG                                    <<< Exit  getlines : Return value: ['#!/usr/bin/python3\n', '\n', 'from context import logging_plus\n', 'logger = logging_plus.getLogger(__name__)\n', '\n', 'class MyClass:\n', '    def __init__(self):\n', '        self.__status = 1\n', '        logger.debug("## Explicit log: A - Initializing MyClass")\n', '        \n', '    def __del__(self):\n', '        logger.debug("## Explicit log: B - Finalizing MyClass")\n', '\n', '    @property\n', '    def status(self):\n', '        logger.debug("## Explicit log: C - getter of MyClass")\n', '        return self.__status\n', '\n', '    @status.setter\n', '    def status(self, value):\n', '        logger.debug("## Explicit log: D - setter of MyClass")\n', '        self.__status = value\n', '\n', '    def doSomething(self):\n', '        logger.debug("## Explicit log: E - MyClass method call")\n', '\n', 'class MySpecialClass(MyClass):\n', '    def __init__(self):\n', '        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n', '        super().__init__()\n', '\n', '    def __del__(self):\n', '        logger.debug("## Explicit log: G - Finalizing subclass MySpecialClass(MyClass)")\n', '        super().__del__()\n']
2020-12-13 14:09:30,329 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:30,331 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:30,333 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:30,335 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:30,338 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:30,340 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:30,342 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:30,344 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:30,346 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:30,349 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:30,351 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:30,353 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:30,355 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:30,357 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:30,360 re                   DEBUG                                    >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:30,362 re                   DEBUG                                        >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:30,364 re                   DEBUG                                        <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:30,366 re                   DEBUG                                    <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:30,369 inspect              DEBUG                                <<< Exit  findsource : Return value: (['#!/usr/bin/python3\n', '\n', 'from context import logging_plus\n', 'logger = logging_plus.getLogger(__name__)\n', '\n', 'class MyClass:\n', '    def __init__(self):\n', '        self.__status = 1\n', '        logger.debug("## Explicit log: A - Initializing MyClass")\n', '        \n', '    def __del__(self):\n', '        logger.debug("## Explicit log: B - Finalizing MyClass")\n', '\n', '    @property\n', '    def status(self):\n', '        logger.debug("## Explicit log: C - getter of MyClass")\n', '        return self.__status\n', '\n', '    @status.setter\n', '    def status(self, value):\n', '        logger.debug("## Explicit log: D - setter of MyClass")\n', '        self.__status = value\n', '\n', '    def doSomething(self):\n', '        logger.debug("## Explicit log: E - MyClass method call")\n', '\n', 'class MySpecialClass(MyClass):\n', '    def __init__(self):\n', '        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n', '        super().__init__()\n', '\n', '    def __del__(self):\n', '        logger.debug("## Explicit log: G - Finalizing subclass MySpecialClass(MyClass)")\n', '        super().__del__()\n'], 6)
2020-12-13 14:09:30,371 inspect              DEBUG                            <<< Exit  getframeinfo : Return value: Traceback(filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=9, function='__init__', code_context=['        logger.debug("## Explicit log: A - Initializing MyClass")\n'], index=0)
2020-12-13 14:09:30,374 inspect              DEBUG                            >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:30,376 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:30,378 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:30,380 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:30,383 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:30,385 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:30,387 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:30,390 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:30,392 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:30,394 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:30,396 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:30,399 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:30,401 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:30,403 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:30,406 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:30,408 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:30,410 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:30,413 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:30,415 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:30,417 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:30,419 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:30,422 inspect              DEBUG                                    <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:30,424 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,426 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,428 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,431 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,433 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,435 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:30,438 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,440 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,443 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,446 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,448 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,451 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,454 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,456 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:30,459 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:30,461 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:30,463 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:30,465 inspect              DEBUG                                >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:30,467 inspect              DEBUG                                    >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:30,470 inspect              DEBUG                                        >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:30,473 inspect              DEBUG                                            >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:30,476 inspect              DEBUG                                            <<< Exit  ismodule : Return value: False
2020-12-13 14:09:30,478 inspect              DEBUG                                            >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:30,481 inspect              DEBUG                                            <<< Exit  isclass : Return value: False
2020-12-13 14:09:30,484 inspect              DEBUG                                            >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:30,486 inspect              DEBUG                                            <<< Exit  ismethod : Return value: False
2020-12-13 14:09:30,489 inspect              DEBUG                                            >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:30,491 inspect              DEBUG                                            <<< Exit  isfunction : Return value: False
2020-12-13 14:09:30,493 inspect              DEBUG                                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:30,496 inspect              DEBUG                                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:30,498 inspect              DEBUG                                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:30,501 inspect              DEBUG                                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:30,503 inspect              DEBUG                                            >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:30,505 inspect              DEBUG                                            <<< Exit  iscode : Return value: True
2020-12-13 14:09:30,508 inspect              DEBUG                                        <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:30,510 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,512 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,515 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,517 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,519 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,522 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:30,524 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,527 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,529 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,531 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,534 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,536 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,538 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,541 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:30,543 genericpath          DEBUG                                        >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:30,546 genericpath          DEBUG                                        <<< Exit  exists : Return value: True
2020-12-13 14:09:30,548 inspect              DEBUG                                    <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:30,550 linecache            DEBUG                                    >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:30,553 linecache            DEBUG                                    <<< Exit  checkcache : Return value: None
2020-12-13 14:09:30,555 inspect              DEBUG                                    >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:30,557 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:30,559 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:30,561 inspect              DEBUG                                    <<< Exit  getmodule : Return value: <module 'logTestMod' from '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py'>
2020-12-13 14:09:30,564 linecache            DEBUG                                    >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:30,566 linecache            DEBUG                                    <<< Exit  getlines : Return value: ['#!/usr/bin/python3\n', '\n', 'from context import logging_plus\n', 'logger = logging_plus.getLogger(__name__)\n', '\n', 'class MyClass:\n', '    def __init__(self):\n', '        self.__status = 1\n', '        logger.debug("## Explicit log: A - Initializing MyClass")\n', '        \n', '    def __del__(self):\n', '        logger.debug("## Explicit log: B - Finalizing MyClass")\n', '\n', '    @property\n', '    def status(self):\n', '        logger.debug("## Explicit log: C - getter of MyClass")\n', '        return self.__status\n', '\n', '    @status.setter\n', '    def status(self, value):\n', '        logger.debug("## Explicit log: D - setter of MyClass")\n', '        self.__status = value\n', '\n', '    def doSomething(self):\n', '        logger.debug("## Explicit log: E - MyClass method call")\n', '\n', 'class MySpecialClass(MyClass):\n', '    def __init__(self):\n', '        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n', '        super().__init__()\n', '\n', '    def __del__(self):\n', '        logger.debug("## Explicit log: G - Finalizing subclass MySpecialClass(MyClass)")\n', '        super().__del__()\n']
2020-12-13 14:09:30,568 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:30,570 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:30,572 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:30,575 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:30,577 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:30,579 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:30,581 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:30,583 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:30,585 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:30,587 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:30,590 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:30,592 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:30,594 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:30,596 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:30,598 re                   DEBUG                                    >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:30,601 re                   DEBUG                                        >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:30,603 re                   DEBUG                                        <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:30,606 re                   DEBUG                                    <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:30,608 inspect              DEBUG                                <<< Exit  findsource : Return value: (['#!/usr/bin/python3\n', '\n', 'from context import logging_plus\n', 'logger = logging_plus.getLogger(__name__)\n', '\n', 'class MyClass:\n', '    def __init__(self):\n', '        self.__status = 1\n', '        logger.debug("## Explicit log: A - Initializing MyClass")\n', '        \n', '    def __del__(self):\n', '        logger.debug("## Explicit log: B - Finalizing MyClass")\n', '\n', '    @property\n', '    def status(self):\n', '        logger.debug("## Explicit log: C - getter of MyClass")\n', '        return self.__status\n', '\n', '    @status.setter\n', '    def status(self, value):\n', '        logger.debug("## Explicit log: D - setter of MyClass")\n', '        self.__status = value\n', '\n', '    def doSomething(self):\n', '        logger.debug("## Explicit log: E - MyClass method call")\n', '\n', 'class MySpecialClass(MyClass):\n', '    def __init__(self):\n', '        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n', '        super().__init__()\n', '\n', '    def __del__(self):\n', '        logger.debug("## Explicit log: G - Finalizing subclass MySpecialClass(MyClass)")\n', '        super().__del__()\n'], 27)
2020-12-13 14:09:30,610 inspect              DEBUG                            <<< Exit  getframeinfo : Return value: Traceback(filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=30, function='__init__', code_context=['        super().__init__()\n'], index=0)
2020-12-13 14:09:30,613 inspect              DEBUG                            >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:30,615 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:30,617 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:30,619 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:30,621 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:30,623 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:30,626 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:30,628 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:30,631 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:30,633 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:30,636 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:30,639 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:30,642 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:30,645 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:30,647 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:30,651 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:30,654 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:30,657 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:30,660 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:30,663 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:30,665 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:30,668 inspect              DEBUG                                    <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:30,670 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,673 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,675 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,678 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,680 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,682 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:30,685 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,687 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,690 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,692 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,695 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,698 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,700 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,703 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:30,706 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:30,709 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:30,712 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:30,715 inspect              DEBUG                                >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:30,718 inspect              DEBUG                                    >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:30,721 inspect              DEBUG                                        >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:30,723 inspect              DEBUG                                            >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:30,726 inspect              DEBUG                                            <<< Exit  ismodule : Return value: False
2020-12-13 14:09:30,729 inspect              DEBUG                                            >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:30,732 inspect              DEBUG                                            <<< Exit  isclass : Return value: False
2020-12-13 14:09:30,734 inspect              DEBUG                                            >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:30,737 inspect              DEBUG                                            <<< Exit  ismethod : Return value: False
2020-12-13 14:09:30,740 inspect              DEBUG                                            >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:30,743 inspect              DEBUG                                            <<< Exit  isfunction : Return value: False
2020-12-13 14:09:30,745 inspect              DEBUG                                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:30,748 inspect              DEBUG                                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:30,751 inspect              DEBUG                                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:30,754 inspect              DEBUG                                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:30,757 inspect              DEBUG                                            >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:30,759 inspect              DEBUG                                            <<< Exit  iscode : Return value: True
2020-12-13 14:09:30,762 inspect              DEBUG                                        <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:30,765 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,767 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,770 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,772 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,775 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:30,777 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:30,779 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,782 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,784 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,786 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,789 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,791 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:30,793 inspect              DEBUG                                        >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:30,796 inspect              DEBUG                                        <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:30,798 genericpath          DEBUG                                        >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:30,800 genericpath          DEBUG                                        <<< Exit  exists : Return value: True
2020-12-13 14:09:30,803 inspect              DEBUG                                    <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:30,805 linecache            DEBUG                                    >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:30,807 linecache            DEBUG                                    <<< Exit  checkcache : Return value: None
2020-12-13 14:09:30,809 inspect              DEBUG                                    >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:30,812 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:30,814 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:30,816 inspect              DEBUG                                        >>> Entry getabsfile (/usr/lib/python3.7/inspect.py - line 702 - module inspect)
2020-12-13 14:09:30,819 posixpath            DEBUG                                            >>> Entry abspath (/usr/lib/python3.7/posixpath.py - line 376 - module posixpath)
2020-12-13 14:09:30,822 posixpath            DEBUG                                                >>> Entry isabs (/usr/lib/python3.7/posixpath.py - line 64 - module posixpath)
2020-12-13 14:09:30,824 posixpath            DEBUG                                                    >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:30,827 posixpath            DEBUG                                                    <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:30,829 posixpath            DEBUG                                                <<< Exit  isabs : Return value: False
2020-12-13 14:09:30,832 posixpath            DEBUG                                                >>> Entry join (/usr/lib/python3.7/posixpath.py - line 75 - module posixpath)
2020-12-13 14:09:30,835 posixpath            DEBUG                                                    >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:30,837 posixpath            DEBUG                                                    <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:30,840 posixpath            DEBUG                                                <<< Exit  join : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:30,842 posixpath            DEBUG                                                >>> Entry normpath (/usr/lib/python3.7/posixpath.py - line 338 - module posixpath)
2020-12-13 14:09:30,845 posixpath            DEBUG                                                <<< Exit  normpath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:30,847 posixpath            DEBUG                                            <<< Exit  abspath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:30,850 posixpath            DEBUG                                            >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:30,852 posixpath            DEBUG                                            <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:30,854 inspect              DEBUG                                        <<< Exit  getabsfile : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:30,857 inspect              DEBUG                                    <<< Exit  getmodule : Return value: <module '__main__' from 'logTest.py'>
2020-12-13 14:09:30,859 linecache            DEBUG                                    >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:30,861 linecache            DEBUG                                    <<< Exit  getlines : Return value: ['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n']
2020-12-13 14:09:30,864 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:30,866 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:30,868 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:30,870 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:30,873 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:30,875 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:30,877 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:30,879 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:30,881 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:30,883 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:30,886 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:30,888 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:30,890 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:30,892 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:30,894 re                   DEBUG                                    >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:30,896 re                   DEBUG                                        >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:30,899 re                   DEBUG                                        <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:30,901 re                   DEBUG                                    <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:30,903 inspect              DEBUG                                <<< Exit  findsource : Return value: (['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n'], 0)
2020-12-13 14:09:30,906 inspect              DEBUG                            <<< Exit  getframeinfo : Return value: Traceback(filename='logTest.py', lineno=41, function='<module>', code_context=['x = logTestMod.MySpecialClass()\n'], index=0)
2020-12-13 14:09:30,909 inspect              DEBUG                        <<< Exit  getouterframes : Return value: [FrameInfo(frame=<frame at 0x7fb12c43e8, file '/home/pi/dev/py-logging-plus/logging_plus/__init__.py', line 107, code debug>, filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0), FrameInfo(frame=<frame at 0x1492ce8, file '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', line 9, code __init__>, filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=9, function='__init__', code_context=['        logger.debug("## Explicit log: A - Initializing MyClass")\n'], index=0), FrameInfo(frame=<frame at 0x7fb12d8af8, file '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', line 30, code __init__>, filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=30, function='__init__', code_context=['        super().__init__()\n'], index=0), FrameInfo(frame=<frame at 0x7fb15c19f8, file 'logTest.py', line 41, code <module>>, filename='logTest.py', lineno=41, function='<module>', code_context=['x = logTestMod.MySpecialClass()\n'], index=0)]
2020-12-13 14:09:30,910 inspect              DEBUG                    <<< Exit  stack : Return value: [FrameInfo(frame=<frame at 0x7fb12c43e8, file '/home/pi/dev/py-logging-plus/logging_plus/__init__.py', line 107, code debug>, filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0), FrameInfo(frame=<frame at 0x1492ce8, file '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', line 9, code __init__>, filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=9, function='__init__', code_context=['        logger.debug("## Explicit log: A - Initializing MyClass")\n'], index=0), FrameInfo(frame=<frame at 0x7fb12d8af8, file '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', line 30, code __init__>, filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=30, function='__init__', code_context=['        super().__init__()\n'], index=0), FrameInfo(frame=<frame at 0x7fb15c19f8, file 'logTest.py', line 41, code <module>>, filename='logTest.py', lineno=41, function='<module>', code_context=['x = logTestMod.MySpecialClass()\n'], index=0)]
2020-12-13 14:09:30,912 logging              DEBUG                    >>> Entry debug (/usr/lib/python3.7/logging/__init__.py - line 1361 - module logging)
2020-12-13 14:09:30,914 logging              DEBUG                        >>> Entry isEnabledFor (/usr/lib/python3.7/logging/__init__.py - line 1619 - module logging)
2020-12-13 14:09:30,916 logging              DEBUG                        <<< Exit  isEnabledFor : Return value: True
2020-12-13 14:09:30,918 logging              DEBUG                        >>> Entry _log (/usr/lib/python3.7/logging/__init__.py - line 1496 - module logging)
2020-12-13 14:09:30,920 logging              DEBUG                            >>> Entry findCaller (/usr/lib/python3.7/logging/__init__.py - line 1451 - module logging)
2020-12-13 14:09:30,922 logging              DEBUG                                >>> Entry <lambda> (/usr/lib/python3.7/logging/__init__.py - line 154 - module logging)
2020-12-13 14:09:30,924 logging              DEBUG                                <<< Exit  <lambda> : Return value: <frame at 0x149e518, file '/usr/lib/python3.7/logging/__init__.py', line 1371, code debug>
2020-12-13 14:09:30,927 posixpath            DEBUG                                >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:30,929 posixpath            DEBUG                                <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:30,931 logging              DEBUG                            <<< Exit  findCaller : Return value: ('/home/pi/dev/py-logging-plus/logging_plus/__init__.py', 109, 'debug', None)
2020-12-13 14:09:30,933 logging              DEBUG                            >>> Entry makeRecord (/usr/lib/python3.7/logging/__init__.py - line 1481 - module logging)
2020-12-13 14:09:30,935 logging              DEBUG                                >>> Entry __init__ (/usr/lib/python3.7/logging/__init__.py - line 293 - module logging)
2020-12-13 14:09:30,937 logging              DEBUG                                    >>> Entry getLevelName (/usr/lib/python3.7/logging/__init__.py - line 117 - module logging)
2020-12-13 14:09:30,939 logging              DEBUG                                    <<< Exit  getLevelName : Return value: DEBUG
2020-12-13 14:09:30,941 posixpath            DEBUG                                    >>> Entry basename (/usr/lib/python3.7/posixpath.py - line 144 - module posixpath)
2020-12-13 14:09:30,943 posixpath            DEBUG                                        >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:30,946 posixpath            DEBUG                                        <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:30,948 posixpath            DEBUG                                    <<< Exit  basename : Return value: __init__.py
2020-12-13 14:09:30,950 posixpath            DEBUG                                    >>> Entry splitext (/usr/lib/python3.7/posixpath.py - line 121 - module posixpath)
2020-12-13 14:09:30,953 genericpath          DEBUG                                        >>> Entry _splitext (/usr/lib/python3.7/genericpath.py - line 117 - module genericpath)
2020-12-13 14:09:30,955 genericpath          DEBUG                                        <<< Exit  _splitext : Return value: ('__init__', '.py')
2020-12-13 14:09:30,957 posixpath            DEBUG                                    <<< Exit  splitext : Return value: ('__init__', '.py')
2020-12-13 14:09:30,959 threading            DEBUG                                    >>> Entry current_thread (/usr/lib/python3.7/threading.py - line 1214 - module threading)
2020-12-13 14:09:30,961 threading            DEBUG                                    <<< Exit  current_thread : Return value: <_MainThread(MainThread, started 548443516944)>
2020-12-13 14:09:30,964 threading            DEBUG                                    >>> Entry name (/usr/lib/python3.7/threading.py - line 1052 - module threading)
2020-12-13 14:09:30,966 threading            DEBUG                                    <<< Exit  name : Return value: MainThread
2020-12-13 14:09:30,968 logging              DEBUG                                <<< Exit  __init__ : Return value: None
2020-12-13 14:09:30,970 logging              DEBUG                            <<< Exit  makeRecord : Return value: <LogRecord: logTestMod, 10, /home/pi/dev/py-logging-plus/logging_plus/__init__.py, 109, "            ## Explicit log: A - Initializing MyClass">
2020-12-13 14:09:30,972 logging              DEBUG                            >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 1521 - module logging)
2020-12-13 14:09:30,974 logging              DEBUG                                >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:30,976 logging              DEBUG                                <<< Exit  filter : Return value: True
2020-12-13 14:09:30,978 logging              DEBUG                                >>> Entry callHandlers (/usr/lib/python3.7/logging/__init__.py - line 1575 - module logging)
2020-12-13 14:09:30,981 logging              DEBUG                                    >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 892 - module logging)
2020-12-13 14:09:30,983 logging              DEBUG                                        >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:30,985 logging              DEBUG                                        <<< Exit  filter : Return value: True
2020-12-13 14:09:30,987 logging              DEBUG                                        >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:30,990 logging              DEBUG                                        <<< Exit  acquire : Return value: None
2020-12-13 14:09:30,992 logging              DEBUG                                        >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1022 - module logging)
2020-12-13 14:09:30,994 logging              DEBUG                                            >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 869 - module logging)
2020-12-13 14:09:30,997 logging              DEBUG                                                >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 606 - module logging)
2020-12-13 14:09:31,000 logging              DEBUG                                                    >>> Entry getMessage (/usr/lib/python3.7/logging/__init__.py - line 371 - module logging)
2020-12-13 14:09:31,002 logging              DEBUG                                                    <<< Exit  getMessage : Return value:             ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:31,005 logging              DEBUG                                                    >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 584 - module logging)
2020-12-13 14:09:31,008 logging              DEBUG                                                        >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 429 - module logging)
2020-12-13 14:09:31,010 logging              DEBUG                                                        <<< Exit  usesTime : Return value: True
2020-12-13 14:09:31,013 logging              DEBUG                                                    <<< Exit  usesTime : Return value: True
2020-12-13 14:09:31,016 logging              DEBUG                                                    >>> Entry formatTime (/usr/lib/python3.7/logging/__init__.py - line 539 - module logging)
2020-12-13 14:09:31,018 logging              DEBUG                                                    <<< Exit  formatTime : Return value: 2020-12-13 14:09:30,935
2020-12-13 14:09:31,021 logging              DEBUG                                                    >>> Entry formatMessage (/usr/lib/python3.7/logging/__init__.py - line 590 - module logging)
2020-12-13 14:09:31,024 logging              DEBUG                                                        >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 432 - module logging)
2020-12-13 14:09:31,027 logging              DEBUG                                                        <<< Exit  format : Return value: 2020-12-13 14:09:30,935 logTestMod           DEBUG                ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:31,030 logging              DEBUG                                                    <<< Exit  formatMessage : Return value: 2020-12-13 14:09:30,935 logTestMod           DEBUG                ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:31,033 logging              DEBUG                                                <<< Exit  format : Return value: 2020-12-13 14:09:30,935 logTestMod           DEBUG                ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:31,035 logging              DEBUG                                            <<< Exit  format : Return value: 2020-12-13 14:09:30,935 logTestMod           DEBUG                ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:31,037 logging              DEBUG                                            >>> Entry flush (/usr/lib/python3.7/logging/__init__.py - line 1011 - module logging)
2020-12-13 14:09:31,040 logging              DEBUG                                                >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:31,043 logging              DEBUG                                                <<< Exit  acquire : Return value: None
2020-12-13 14:09:31,045 logging              DEBUG                                                >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:31,048 logging              DEBUG                                                <<< Exit  release : Return value: None
2020-12-13 14:09:31,050 logging              DEBUG                                            <<< Exit  flush : Return value: None
2020-12-13 14:09:31,053 logging              DEBUG                                        <<< Exit  emit : Return value: None
2020-12-13 14:09:31,055 logging              DEBUG                                        >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:31,057 logging              DEBUG                                        <<< Exit  release : Return value: None
2020-12-13 14:09:31,059 logging              DEBUG                                    <<< Exit  handle : Return value: True
2020-12-13 14:09:31,062 logging              DEBUG                                    >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 892 - module logging)
2020-12-13 14:09:31,064 logging              DEBUG                                        >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:31,066 logging              DEBUG                                        <<< Exit  filter : Return value: True
2020-12-13 14:09:31,068 logging              DEBUG                                        >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:31,071 logging              DEBUG                                        <<< Exit  acquire : Return value: None
2020-12-13 14:09:31,073 logging              DEBUG                                        >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1123 - module logging)
2020-12-13 14:09:31,076 logging              DEBUG                                            >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1022 - module logging)
2020-12-13 14:09:31,078 logging              DEBUG                                                >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 869 - module logging)
2020-12-13 14:09:31,081 logging              DEBUG                                                    >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 606 - module logging)
2020-12-13 14:09:31,084 logging              DEBUG                                                        >>> Entry getMessage (/usr/lib/python3.7/logging/__init__.py - line 371 - module logging)
2020-12-13 14:09:31,087 logging              DEBUG                                                        <<< Exit  getMessage : Return value:             ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:31,089 logging              DEBUG                                                        >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 584 - module logging)
2020-12-13 14:09:31,092 logging              DEBUG                                                            >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 429 - module logging)
2020-12-13 14:09:31,095 logging              DEBUG                                                            <<< Exit  usesTime : Return value: True
2020-12-13 14:09:31,098 logging              DEBUG                                                        <<< Exit  usesTime : Return value: True
2020-12-13 14:09:31,101 logging              DEBUG                                                        >>> Entry formatTime (/usr/lib/python3.7/logging/__init__.py - line 539 - module logging)
2020-12-13 14:09:31,104 logging              DEBUG                                                        <<< Exit  formatTime : Return value: 2020-12-13 14:09:30,935
2020-12-13 14:09:31,106 logging              DEBUG                                                        >>> Entry formatMessage (/usr/lib/python3.7/logging/__init__.py - line 590 - module logging)
2020-12-13 14:09:31,109 logging              DEBUG                                                            >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 432 - module logging)
2020-12-13 14:09:31,112 logging              DEBUG                                                            <<< Exit  format : Return value: 2020-12-13 14:09:30,935 logTestMod           DEBUG                ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:31,115 logging              DEBUG                                                        <<< Exit  formatMessage : Return value: 2020-12-13 14:09:30,935 logTestMod           DEBUG                ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:31,118 logging              DEBUG                                                    <<< Exit  format : Return value: 2020-12-13 14:09:30,935 logTestMod           DEBUG                ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:31,120 logging              DEBUG                                                <<< Exit  format : Return value: 2020-12-13 14:09:30,935 logTestMod           DEBUG                ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:30,935 logTestMod           DEBUG                ## Explicit log: A - Initializing MyClass
2020-12-13 14:09:31,123 logging              DEBUG                                                >>> Entry flush (/usr/lib/python3.7/logging/__init__.py - line 1011 - module logging)
2020-12-13 14:09:31,126 logging              DEBUG                                                    >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:31,129 logging              DEBUG                                                    <<< Exit  acquire : Return value: None
2020-12-13 14:09:31,133 logging              DEBUG                                                    >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:31,136 logging              DEBUG                                                    <<< Exit  release : Return value: None
2020-12-13 14:09:31,140 logging              DEBUG                                                <<< Exit  flush : Return value: None
2020-12-13 14:09:31,143 logging              DEBUG                                            <<< Exit  emit : Return value: None
2020-12-13 14:09:31,146 logging              DEBUG                                        <<< Exit  emit : Return value: None
2020-12-13 14:09:31,149 logging              DEBUG                                        >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:31,151 logging              DEBUG                                        <<< Exit  release : Return value: None
2020-12-13 14:09:31,153 logging              DEBUG                                    <<< Exit  handle : Return value: True
2020-12-13 14:09:31,156 logging              DEBUG                                <<< Exit  callHandlers : Return value: None
2020-12-13 14:09:31,158 logging              DEBUG                            <<< Exit  handle : Return value: None
2020-12-13 14:09:31,160 logging              DEBUG                        <<< Exit  _log : Return value: None
2020-12-13 14:09:31,161 logging              DEBUG                    <<< Exit  debug : Return value: None
2020-12-13 14:09:31,163 logging_plus         DEBUG                <<< Exit  debug : Return value: None
2020-12-13 14:09:31,164 logTestMod           DEBUG            <<< Exit  __init__ : Return value: None
2020-12-13 14:09:31,166 logTestMod           DEBUG        <<< Exit  __init__ : Return value: None
2020-12-13 14:09:31,167 logTestMod           DEBUG        >>> Entry status (/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py - line 14 - module logTestMod)
2020-12-13 14:09:31,169 logging_plus         DEBUG            >>> Entry debug (/home/pi/dev/py-logging-plus/logging_plus/__init__.py - line 103 - module logging_plus)
2020-12-13 14:09:31,171 inspect              DEBUG                >>> Entry stack (/usr/lib/python3.7/inspect.py - line 1511 - module inspect)
2020-12-13 14:09:31,172 inspect              DEBUG                    >>> Entry getouterframes (/usr/lib/python3.7/inspect.py - line 1483 - module inspect)
2020-12-13 14:09:31,174 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:31,176 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:31,179 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:31,181 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:31,183 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:31,185 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:31,188 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:31,190 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:31,192 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:31,194 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:31,197 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:31,199 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:31,202 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:31,204 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:31,207 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:31,210 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:31,212 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:31,215 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:31,217 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:31,220 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:31,222 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:31,225 inspect              DEBUG                                <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:31,227 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:31,229 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,232 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:31,234 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,237 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:31,239 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:31,241 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,244 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,246 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,248 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,250 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,252 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,254 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,256 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:31,258 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:31,260 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:31,262 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:31,264 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:31,266 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:31,268 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:31,271 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:31,273 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:31,275 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:31,278 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:31,280 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:31,282 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:31,284 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:31,287 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:31,289 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:31,291 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:31,294 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:31,296 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:31,298 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:31,301 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:31,303 inspect              DEBUG                                    <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:31,305 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:31,307 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,309 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:31,311 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,314 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:31,316 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:31,318 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,320 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,323 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,325 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,327 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,329 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,332 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,334 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:31,336 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:31,338 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:31,340 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:31,342 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:31,345 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:31,347 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:31,349 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:31,351 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:31,353 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module 'logging_plus' from '/home/pi/dev/py-logging-plus/logging_plus/__init__.py'>
2020-12-13 14:09:31,355 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:31,357 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#MIT License\n', '#\n', '#Copyright (c) 2020 signag\n', '#\n', '#Permission is hereby granted, free of charge, to any person obtaining a copy\n', '#of this software and associated documentation files (the "Software"), to deal\n', '#in the Software without restriction, including without limitation the rights\n', '#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '#copies of the Software, and to permit persons to whom the Software is\n', '#furnished to do so, subject to the following conditions:\n', '#\n', '#The above copyright notice and this permission notice shall be included in all\n', '#copies or substantial portions of the Software.\n', '#\n', '#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '#SOFTWARE.\n', '"""\n', '`logging_plus` - Add-on to Python logging\n', '\n', 'This module extends the standard Python logging module for the following aspects:\n', '- Subclassing Logger allows customization of logging messages depending on context\n', '- This is used for automatic indentation depending on call stack level\n', '- The module provides also the capability to generically log function entry and exit\n', '"""\n', 'import logging\n', 'import inspect\n', 'import sys\n', 'import atexit\n', '\n', '#---------------------------------------------------------------------------\n', '#   Miscellaneous module data\n', '#---------------------------------------------------------------------------\n', '#\n', '#This parameter controls whether or not logging inside infrastructure modules is activated.\n', '#The following modules are affected: inspect, logging, logging-plus\n', '#\n', 'noInfrastructureLogging = True\n', '\n', 'class Manager(logging.Manager):\n', '    """\n', '    Subclassing logging.Manager supports instantiating the subclassed Logger\n', '    instead of the standard Logger.\n', '    """\n', '    def __init__(self, rootnode):\n', '        """\n', '        Initialize the manager\n', '        """\n', '        super().__init__(rootnode)\n', '\n', '    def getLogger(self, name):\n', '        """\n', '        Return the subclassed Logger rather than the standard Logger\n', '        """\n', '        rv = None\n', '        if not isinstance(name, str):\n', "            raise TypeError('A logger name must be a string')\n", '        logging._acquireLock()\n', '        try:\n', '            if name in self.loggerDict:\n', '                rv = self.loggerDict[name]\n', '                if isinstance(rv, logging.PlaceHolder):\n', '                    ph = rv\n', '                    rv = (self.loggerClass or _loggerClass)(name)\n', '                    rv.manager = self\n', '                    self.loggerDict[name] = rv\n', '                    self._fixupChildren(ph, rv)\n', '                    self._fixupParents(rv)\n', '            else:\n', '                rv = (self.loggerClass or _loggerClass)(name)\n', '                rv.manager = self\n', '                self.loggerDict[name] = rv\n', '                self._fixupParents(rv)\n', '        finally:\n', '            logging._releaseLock()\n', '        return rv\n', '\n', '    def cleanupLoggers(self):\n', '        """\n', '        Remove registered file handlers from all available loggers\n', '        """\n', '        lgr = root\n', '        for hdl in reversed(lgr.handlers):\n', '            if isinstance(hdl, logging.FileHandler):\n', '                lgr.removeHandler(hdl)\n', '        for lgName in self.loggerDict:\n', '            lgr = self.getLogger(lgName)\n', '            for hdl in lgr.handlers:\n', '                if isinstance(hdl, logging.FileHandler):\n', '                    lgr.removeHandler(hdl)\n', '\n', 'class Logger(logging.Logger):\n', '    def __init__(self, name, level=logging.NOTSET):\n', '        """\n', '        Initialize the subclassed Logger\n', '        """\n', '        super().__init__(name, level)\n', '\n', '    def debug(self, msg, *args, **kwargs):\n', '        """\n', '        Indent DEBUG message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def info(self, msg, *args, **kwargs):\n', '        """\n', '        Indent INFO message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().info(msg, *args, **kwargs)\n', '\n', '    def warning(self, msg, *args, **kwargs):\n', '        """\n', '        Indent WARNING message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().warning(msg, *args, **kwargs)\n', '\n', '    def error(self, msg, *args, **kwargs):\n', '        """\n', '        Indent ERROR message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().error(msg, *args, **kwargs)\n', '\n', '    def logEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def logExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', 'class RootLogger(Logger):\n', '    """\n', '    This is the extended root logger\n', '    """\n', '    def __init__(self, level):\n', '        """\n', '        Initialize the logger with the name "root".\n', '        """\n', '        Logger.__init__(self, "root", level)\n', '\n', '_loggerClass = Logger\n', '\n', '\n', 'root = RootLogger(logging.WARNING)\n', 'Logger.root = root\n', 'Logger.manager = Manager(Logger.root)\n', '\n', 'def getLogger(name=None):\n', '    """\n', '    Return an extended logger with the specified name, creating it if necessary.\n', '\n', '    If no name is specified, return the root logger.\n', '    """\n', '    if not name or isinstance(name, str) and name == root.name:\n', '        return root\n', '    return Logger.manager.getLogger(name)\n', '\n', 'def excludeFromLogging(frame):\n', '    """\n', '    Check whether frame shall be excluded from logging.\n', '\n', '    This is the case if the module of the frame itself or on of its outer frames\n', '    belongs to the inspect or logging infrastructure\n', '    """\n', '    if not frame:\n', '        return False\n', '\n', '    module = inspect.getmodule(frame)\n', '    if not module:\n', '        return False\n', '\n', '    moduleName = module.__name__\n', '\n', '    if (moduleName == "inspect") \\\n', '    or (moduleName == "logging") \\\n', '    or (moduleName == __name__):\n', '        #Do not log inside infrastructure modules\n', '        return True\n', '    else:\n', '        oframe = frame.f_back\n', '        if not oframe:\n', '            return False\n', '        return excludeFromLogging(oframe)\n', '\n', 'def autoLogIgnore(frame, event, arg):\n', '    """\n', '    Function to register as trace function for scopes where logging shall be deactivated.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call'):\n", '        #Only call needs to be sensed       \n', '        return autoLogIgnore\n', '\n', 'def autoLogEntryExit(frame, event, arg):\n', '    """\n', '    Function to register as trace function for the current scope.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call') or (event == 'return'):\n", '        #Only call and return events are sensed\n', '        if not frame:\n', '            return autoLogIgnore\n', '\n', '        code_obj = frame.f_code\n', '        func_name = code_obj.co_name\n', '        file_name = code_obj.co_filename\n', '        file_line = code_obj.co_firstlineno\n', '\n', '        module = inspect.getmodule(frame)\n', '        if not module:\n', '            return autoLogIgnore\n', '\n', '        moduleName = module.__name__\n', '\n', "        if event == 'call':\n", '            #System has been entering a new scope.\n', '            if noInfrastructureLogging:\n', '                if excludeFromLogging(frame):\n', '                    return autoLogIgnore\n', '\n', "            getLogger(moduleName).autoLogEntry('%s (%s - line %s - module %s)', func_name, file_name, file_line, moduleName)\n", '            #The function returns a reference to itself, in order to register itself as trace functuion for the new scope\n', '            return autoLogEntryExit\n', "        elif event == 'return':\n", '            #System is about to exit a scope (function or other code block). arg is the value being returned.\n', "            getLogger(moduleName).autoLogExit ('%s : Return value: %s', func_name, arg)\n", '\n', 'def removeFileHandlers():\n', '    """This function removes file handlers from available loggers in order to avoid a race condition during shutdown\n', '    The Python shutdown sequence is as follows:\n', '    1. Stop main thread\n', '    2. Close open file handlers\n', '    3. Wait for termination of non-daemon threads\n', '    4. Execute registered atexit functions\n', '    5. Garbage collection\n', '    6. Process termination\n', '\n', '    If class __del__ functions include logging with file handlers, and if ojects are destroyed \n', '    during garbage collection (5), file output will lead to an exception \n', '    because open file handlers have already been closed (2).\n', '    \n', '    Note: This applies only to explicit logging within the __del__ functions.\n', '    Automatic logging of entry and exit has already been switched off at this time \n', '    through unregisterAutoLogEntryExit.\n', '    """\n', '    mgr = getLogger().manager\n', '    mgr.cleanupLoggers()\n', '\n', 'def registerAutoLogEntryExit():\n', '    """\n', '    Register autoLogEntryExit as system trace function\n', '\n', '    This will issue logging whenever a function scope is entered or exited\n', '    """\n', '    sys.settrace(autoLogEntryExit)\n', '\n', 'def unregisterAutoLogEntryExit():\n', '    """\n', '    Clear system trace function\n', '\n', '    This will stop logging function entry / exit\n', '    """\n', '    sys.settrace(None)\n', '\n', '#Register unregisterAutoLogEntryExit to avoid logging exceptions during module shutdown\n', 'atexit.register(removeFileHandlers)\n', 'atexit.register(unregisterAutoLogEntryExit)\n']
2020-12-13 14:09:31,361 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:31,363 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:31,365 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:31,367 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:31,369 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:31,371 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:31,373 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:31,375 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:31,377 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:31,379 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:31,382 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:31,383 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:31,386 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:31,388 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:31,390 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:31,392 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:31,394 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:31,396 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:31,398 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#MIT License\n', '#\n', '#Copyright (c) 2020 signag\n', '#\n', '#Permission is hereby granted, free of charge, to any person obtaining a copy\n', '#of this software and associated documentation files (the "Software"), to deal\n', '#in the Software without restriction, including without limitation the rights\n', '#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '#copies of the Software, and to permit persons to whom the Software is\n', '#furnished to do so, subject to the following conditions:\n', '#\n', '#The above copyright notice and this permission notice shall be included in all\n', '#copies or substantial portions of the Software.\n', '#\n', '#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '#SOFTWARE.\n', '"""\n', '`logging_plus` - Add-on to Python logging\n', '\n', 'This module extends the standard Python logging module for the following aspects:\n', '- Subclassing Logger allows customization of logging messages depending on context\n', '- This is used for automatic indentation depending on call stack level\n', '- The module provides also the capability to generically log function entry and exit\n', '"""\n', 'import logging\n', 'import inspect\n', 'import sys\n', 'import atexit\n', '\n', '#---------------------------------------------------------------------------\n', '#   Miscellaneous module data\n', '#---------------------------------------------------------------------------\n', '#\n', '#This parameter controls whether or not logging inside infrastructure modules is activated.\n', '#The following modules are affected: inspect, logging, logging-plus\n', '#\n', 'noInfrastructureLogging = True\n', '\n', 'class Manager(logging.Manager):\n', '    """\n', '    Subclassing logging.Manager supports instantiating the subclassed Logger\n', '    instead of the standard Logger.\n', '    """\n', '    def __init__(self, rootnode):\n', '        """\n', '        Initialize the manager\n', '        """\n', '        super().__init__(rootnode)\n', '\n', '    def getLogger(self, name):\n', '        """\n', '        Return the subclassed Logger rather than the standard Logger\n', '        """\n', '        rv = None\n', '        if not isinstance(name, str):\n', "            raise TypeError('A logger name must be a string')\n", '        logging._acquireLock()\n', '        try:\n', '            if name in self.loggerDict:\n', '                rv = self.loggerDict[name]\n', '                if isinstance(rv, logging.PlaceHolder):\n', '                    ph = rv\n', '                    rv = (self.loggerClass or _loggerClass)(name)\n', '                    rv.manager = self\n', '                    self.loggerDict[name] = rv\n', '                    self._fixupChildren(ph, rv)\n', '                    self._fixupParents(rv)\n', '            else:\n', '                rv = (self.loggerClass or _loggerClass)(name)\n', '                rv.manager = self\n', '                self.loggerDict[name] = rv\n', '                self._fixupParents(rv)\n', '        finally:\n', '            logging._releaseLock()\n', '        return rv\n', '\n', '    def cleanupLoggers(self):\n', '        """\n', '        Remove registered file handlers from all available loggers\n', '        """\n', '        lgr = root\n', '        for hdl in reversed(lgr.handlers):\n', '            if isinstance(hdl, logging.FileHandler):\n', '                lgr.removeHandler(hdl)\n', '        for lgName in self.loggerDict:\n', '            lgr = self.getLogger(lgName)\n', '            for hdl in lgr.handlers:\n', '                if isinstance(hdl, logging.FileHandler):\n', '                    lgr.removeHandler(hdl)\n', '\n', 'class Logger(logging.Logger):\n', '    def __init__(self, name, level=logging.NOTSET):\n', '        """\n', '        Initialize the subclassed Logger\n', '        """\n', '        super().__init__(name, level)\n', '\n', '    def debug(self, msg, *args, **kwargs):\n', '        """\n', '        Indent DEBUG message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def info(self, msg, *args, **kwargs):\n', '        """\n', '        Indent INFO message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().info(msg, *args, **kwargs)\n', '\n', '    def warning(self, msg, *args, **kwargs):\n', '        """\n', '        Indent WARNING message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().warning(msg, *args, **kwargs)\n', '\n', '    def error(self, msg, *args, **kwargs):\n', '        """\n', '        Indent ERROR message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().error(msg, *args, **kwargs)\n', '\n', '    def logEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def logExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', 'class RootLogger(Logger):\n', '    """\n', '    This is the extended root logger\n', '    """\n', '    def __init__(self, level):\n', '        """\n', '        Initialize the logger with the name "root".\n', '        """\n', '        Logger.__init__(self, "root", level)\n', '\n', '_loggerClass = Logger\n', '\n', '\n', 'root = RootLogger(logging.WARNING)\n', 'Logger.root = root\n', 'Logger.manager = Manager(Logger.root)\n', '\n', 'def getLogger(name=None):\n', '    """\n', '    Return an extended logger with the specified name, creating it if necessary.\n', '\n', '    If no name is specified, return the root logger.\n', '    """\n', '    if not name or isinstance(name, str) and name == root.name:\n', '        return root\n', '    return Logger.manager.getLogger(name)\n', '\n', 'def excludeFromLogging(frame):\n', '    """\n', '    Check whether frame shall be excluded from logging.\n', '\n', '    This is the case if the module of the frame itself or on of its outer frames\n', '    belongs to the inspect or logging infrastructure\n', '    """\n', '    if not frame:\n', '        return False\n', '\n', '    module = inspect.getmodule(frame)\n', '    if not module:\n', '        return False\n', '\n', '    moduleName = module.__name__\n', '\n', '    if (moduleName == "inspect") \\\n', '    or (moduleName == "logging") \\\n', '    or (moduleName == __name__):\n', '        #Do not log inside infrastructure modules\n', '        return True\n', '    else:\n', '        oframe = frame.f_back\n', '        if not oframe:\n', '            return False\n', '        return excludeFromLogging(oframe)\n', '\n', 'def autoLogIgnore(frame, event, arg):\n', '    """\n', '    Function to register as trace function for scopes where logging shall be deactivated.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call'):\n", '        #Only call needs to be sensed       \n', '        return autoLogIgnore\n', '\n', 'def autoLogEntryExit(frame, event, arg):\n', '    """\n', '    Function to register as trace function for the current scope.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call') or (event == 'return'):\n", '        #Only call and return events are sensed\n', '        if not frame:\n', '            return autoLogIgnore\n', '\n', '        code_obj = frame.f_code\n', '        func_name = code_obj.co_name\n', '        file_name = code_obj.co_filename\n', '        file_line = code_obj.co_firstlineno\n', '\n', '        module = inspect.getmodule(frame)\n', '        if not module:\n', '            return autoLogIgnore\n', '\n', '        moduleName = module.__name__\n', '\n', "        if event == 'call':\n", '            #System has been entering a new scope.\n', '            if noInfrastructureLogging:\n', '                if excludeFromLogging(frame):\n', '                    return autoLogIgnore\n', '\n', "            getLogger(moduleName).autoLogEntry('%s (%s - line %s - module %s)', func_name, file_name, file_line, moduleName)\n", '            #The function returns a reference to itself, in order to register itself as trace functuion for the new scope\n', '            return autoLogEntryExit\n', "        elif event == 'return':\n", '            #System is about to exit a scope (function or other code block). arg is the value being returned.\n', "            getLogger(moduleName).autoLogExit ('%s : Return value: %s', func_name, arg)\n", '\n', 'def removeFileHandlers():\n', '    """This function removes file handlers from available loggers in order to avoid a race condition during shutdown\n', '    The Python shutdown sequence is as follows:\n', '    1. Stop main thread\n', '    2. Close open file handlers\n', '    3. Wait for termination of non-daemon threads\n', '    4. Execute registered atexit functions\n', '    5. Garbage collection\n', '    6. Process termination\n', '\n', '    If class __del__ functions include logging with file handlers, and if ojects are destroyed \n', '    during garbage collection (5), file output will lead to an exception \n', '    because open file handlers have already been closed (2).\n', '    \n', '    Note: This applies only to explicit logging within the __del__ functions.\n', '    Automatic logging of entry and exit has already been switched off at this time \n', '    through unregisterAutoLogEntryExit.\n', '    """\n', '    mgr = getLogger().manager\n', '    mgr.cleanupLoggers()\n', '\n', 'def registerAutoLogEntryExit():\n', '    """\n', '    Register autoLogEntryExit as system trace function\n', '\n', '    This will issue logging whenever a function scope is entered or exited\n', '    """\n', '    sys.settrace(autoLogEntryExit)\n', '\n', 'def unregisterAutoLogEntryExit():\n', '    """\n', '    Clear system trace function\n', '\n', '    This will stop logging function entry / exit\n', '    """\n', '    sys.settrace(None)\n', '\n', '#Register unregisterAutoLogEntryExit to avoid logging exceptions during module shutdown\n', 'atexit.register(removeFileHandlers)\n', 'atexit.register(unregisterAutoLogEntryExit)\n'], 102)
2020-12-13 14:09:31,403 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0)
2020-12-13 14:09:31,405 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:31,407 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:31,409 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:31,411 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:31,413 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:31,415 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:31,417 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:31,419 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:31,421 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:31,423 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:31,426 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:31,428 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:31,430 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:31,432 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:31,434 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:31,436 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:31,438 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:31,440 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:31,443 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:31,445 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:31,447 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:31,449 inspect              DEBUG                                <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:31,451 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:31,453 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,456 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:31,458 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,460 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:31,462 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:31,464 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,466 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,468 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,470 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,472 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,474 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,477 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,479 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:31,481 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:31,483 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:31,485 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:31,487 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:31,489 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:31,491 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:31,493 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:31,495 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:31,497 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:31,500 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:31,502 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:31,504 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:31,507 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:31,509 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:31,511 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:31,513 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:31,516 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:31,518 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:31,520 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:31,523 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:31,525 inspect              DEBUG                                    <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:31,527 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:31,529 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,531 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:31,534 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,536 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:31,538 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:31,540 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,542 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,544 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,547 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,549 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,551 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,554 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,556 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:31,558 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:31,560 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:31,562 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:31,564 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:31,567 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:31,569 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:31,571 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:31,573 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:31,575 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module 'logTestMod' from '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py'>
2020-12-13 14:09:31,577 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:31,579 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#!/usr/bin/python3\n', '\n', 'from context import logging_plus\n', 'logger = logging_plus.getLogger(__name__)\n', '\n', 'class MyClass:\n', '    def __init__(self):\n', '        self.__status = 1\n', '        logger.debug("## Explicit log: A - Initializing MyClass")\n', '        \n', '    def __del__(self):\n', '        logger.debug("## Explicit log: B - Finalizing MyClass")\n', '\n', '    @property\n', '    def status(self):\n', '        logger.debug("## Explicit log: C - getter of MyClass")\n', '        return self.__status\n', '\n', '    @status.setter\n', '    def status(self, value):\n', '        logger.debug("## Explicit log: D - setter of MyClass")\n', '        self.__status = value\n', '\n', '    def doSomething(self):\n', '        logger.debug("## Explicit log: E - MyClass method call")\n', '\n', 'class MySpecialClass(MyClass):\n', '    def __init__(self):\n', '        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n', '        super().__init__()\n', '\n', '    def __del__(self):\n', '        logger.debug("## Explicit log: G - Finalizing subclass MySpecialClass(MyClass)")\n', '        super().__del__()\n']
2020-12-13 14:09:31,581 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:31,583 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:31,585 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:31,587 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:31,589 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:31,591 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:31,593 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:31,595 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:31,597 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:31,599 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:31,601 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:31,603 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:31,605 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:31,607 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:31,609 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:31,612 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:31,614 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:31,616 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:31,618 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#!/usr/bin/python3\n', '\n', 'from context import logging_plus\n', 'logger = logging_plus.getLogger(__name__)\n', '\n', 'class MyClass:\n', '    def __init__(self):\n', '        self.__status = 1\n', '        logger.debug("## Explicit log: A - Initializing MyClass")\n', '        \n', '    def __del__(self):\n', '        logger.debug("## Explicit log: B - Finalizing MyClass")\n', '\n', '    @property\n', '    def status(self):\n', '        logger.debug("## Explicit log: C - getter of MyClass")\n', '        return self.__status\n', '\n', '    @status.setter\n', '    def status(self, value):\n', '        logger.debug("## Explicit log: D - setter of MyClass")\n', '        self.__status = value\n', '\n', '    def doSomething(self):\n', '        logger.debug("## Explicit log: E - MyClass method call")\n', '\n', 'class MySpecialClass(MyClass):\n', '    def __init__(self):\n', '        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n', '        super().__init__()\n', '\n', '    def __del__(self):\n', '        logger.debug("## Explicit log: G - Finalizing subclass MySpecialClass(MyClass)")\n', '        super().__del__()\n'], 13)
2020-12-13 14:09:31,620 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=16, function='status', code_context=['        logger.debug("## Explicit log: C - getter of MyClass")\n'], index=0)
2020-12-13 14:09:31,623 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:31,625 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:31,627 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:31,629 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:31,631 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:31,633 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:31,635 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:31,637 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:31,639 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:31,641 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:31,643 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:31,645 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:31,647 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:31,650 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:31,652 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:31,654 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:31,656 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:31,658 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:31,660 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:31,663 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:31,665 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:31,667 inspect              DEBUG                                <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:31,669 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:31,671 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,673 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:31,675 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,677 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:31,679 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:31,682 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,684 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,686 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,688 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,690 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,692 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,694 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,696 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:31,698 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:31,700 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:31,702 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:31,704 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:31,706 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:31,708 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:31,711 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:31,713 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:31,716 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:31,718 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:31,720 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:31,722 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:31,725 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:31,727 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:31,729 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:31,732 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:31,734 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:31,736 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:31,738 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:31,741 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:31,743 inspect              DEBUG                                    <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:31,745 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:31,747 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,749 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:31,751 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,754 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:31,756 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:31,758 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,760 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,763 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,765 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,767 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,770 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:31,772 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:31,775 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:31,777 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:31,780 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:31,783 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:31,785 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:31,788 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:31,790 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:31,793 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:31,796 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:31,799 inspect              DEBUG                                    >>> Entry getabsfile (/usr/lib/python3.7/inspect.py - line 702 - module inspect)
2020-12-13 14:09:31,801 posixpath            DEBUG                                        >>> Entry abspath (/usr/lib/python3.7/posixpath.py - line 376 - module posixpath)
2020-12-13 14:09:31,804 posixpath            DEBUG                                            >>> Entry isabs (/usr/lib/python3.7/posixpath.py - line 64 - module posixpath)
2020-12-13 14:09:31,807 posixpath            DEBUG                                                >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:31,809 posixpath            DEBUG                                                <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:31,811 posixpath            DEBUG                                            <<< Exit  isabs : Return value: False
2020-12-13 14:09:31,814 posixpath            DEBUG                                            >>> Entry join (/usr/lib/python3.7/posixpath.py - line 75 - module posixpath)
2020-12-13 14:09:31,816 posixpath            DEBUG                                                >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:31,819 posixpath            DEBUG                                                <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:31,821 posixpath            DEBUG                                            <<< Exit  join : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:31,824 posixpath            DEBUG                                            >>> Entry normpath (/usr/lib/python3.7/posixpath.py - line 338 - module posixpath)
2020-12-13 14:09:31,826 posixpath            DEBUG                                            <<< Exit  normpath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:31,829 posixpath            DEBUG                                        <<< Exit  abspath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:31,831 posixpath            DEBUG                                        >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:31,833 posixpath            DEBUG                                        <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:31,835 inspect              DEBUG                                    <<< Exit  getabsfile : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:31,838 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module '__main__' from 'logTest.py'>
2020-12-13 14:09:31,840 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:31,842 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n']
2020-12-13 14:09:31,844 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:31,846 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:31,848 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:31,850 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:31,852 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:31,854 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:31,856 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:31,858 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:31,860 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:31,862 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:31,864 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:31,866 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:31,868 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:31,870 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:31,872 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:31,874 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:31,876 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:31,878 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:31,880 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n'], 0)
2020-12-13 14:09:31,883 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='logTest.py', lineno=42, function='<module>', code_context=['y = x.status\n'], index=0)
2020-12-13 14:09:31,886 inspect              DEBUG                    <<< Exit  getouterframes : Return value: [FrameInfo(frame=<frame at 0x7fb12c43e8, file '/home/pi/dev/py-logging-plus/logging_plus/__init__.py', line 107, code debug>, filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0), FrameInfo(frame=<frame at 0x149e518, file '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', line 16, code status>, filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=16, function='status', code_context=['        logger.debug("## Explicit log: C - getter of MyClass")\n'], index=0), FrameInfo(frame=<frame at 0x7fb15c19f8, file 'logTest.py', line 42, code <module>>, filename='logTest.py', lineno=42, function='<module>', code_context=['y = x.status\n'], index=0)]
2020-12-13 14:09:31,887 inspect              DEBUG                <<< Exit  stack : Return value: [FrameInfo(frame=<frame at 0x7fb12c43e8, file '/home/pi/dev/py-logging-plus/logging_plus/__init__.py', line 107, code debug>, filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0), FrameInfo(frame=<frame at 0x149e518, file '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', line 16, code status>, filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=16, function='status', code_context=['        logger.debug("## Explicit log: C - getter of MyClass")\n'], index=0), FrameInfo(frame=<frame at 0x7fb15c19f8, file 'logTest.py', line 42, code <module>>, filename='logTest.py', lineno=42, function='<module>', code_context=['y = x.status\n'], index=0)]
2020-12-13 14:09:31,889 logging              DEBUG                >>> Entry debug (/usr/lib/python3.7/logging/__init__.py - line 1361 - module logging)
2020-12-13 14:09:31,891 logging              DEBUG                    >>> Entry isEnabledFor (/usr/lib/python3.7/logging/__init__.py - line 1619 - module logging)
2020-12-13 14:09:31,893 logging              DEBUG                    <<< Exit  isEnabledFor : Return value: True
2020-12-13 14:09:31,895 logging              DEBUG                    >>> Entry _log (/usr/lib/python3.7/logging/__init__.py - line 1496 - module logging)
2020-12-13 14:09:31,897 logging              DEBUG                        >>> Entry findCaller (/usr/lib/python3.7/logging/__init__.py - line 1451 - module logging)
2020-12-13 14:09:31,898 logging              DEBUG                            >>> Entry <lambda> (/usr/lib/python3.7/logging/__init__.py - line 154 - module logging)
2020-12-13 14:09:31,901 logging              DEBUG                            <<< Exit  <lambda> : Return value: <frame at 0x14a1a78, file '/usr/lib/python3.7/logging/__init__.py', line 1371, code debug>
2020-12-13 14:09:31,902 posixpath            DEBUG                            >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:31,904 posixpath            DEBUG                            <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:31,906 logging              DEBUG                        <<< Exit  findCaller : Return value: ('/home/pi/dev/py-logging-plus/logging_plus/__init__.py', 109, 'debug', None)
2020-12-13 14:09:31,908 logging              DEBUG                        >>> Entry makeRecord (/usr/lib/python3.7/logging/__init__.py - line 1481 - module logging)
2020-12-13 14:09:31,910 logging              DEBUG                            >>> Entry __init__ (/usr/lib/python3.7/logging/__init__.py - line 293 - module logging)
2020-12-13 14:09:31,912 logging              DEBUG                                >>> Entry getLevelName (/usr/lib/python3.7/logging/__init__.py - line 117 - module logging)
2020-12-13 14:09:31,914 logging              DEBUG                                <<< Exit  getLevelName : Return value: DEBUG
2020-12-13 14:09:31,916 posixpath            DEBUG                                >>> Entry basename (/usr/lib/python3.7/posixpath.py - line 144 - module posixpath)
2020-12-13 14:09:31,919 posixpath            DEBUG                                    >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:31,921 posixpath            DEBUG                                    <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:31,923 posixpath            DEBUG                                <<< Exit  basename : Return value: __init__.py
2020-12-13 14:09:31,925 posixpath            DEBUG                                >>> Entry splitext (/usr/lib/python3.7/posixpath.py - line 121 - module posixpath)
2020-12-13 14:09:31,927 genericpath          DEBUG                                    >>> Entry _splitext (/usr/lib/python3.7/genericpath.py - line 117 - module genericpath)
2020-12-13 14:09:31,929 genericpath          DEBUG                                    <<< Exit  _splitext : Return value: ('__init__', '.py')
2020-12-13 14:09:31,931 posixpath            DEBUG                                <<< Exit  splitext : Return value: ('__init__', '.py')
2020-12-13 14:09:31,933 threading            DEBUG                                >>> Entry current_thread (/usr/lib/python3.7/threading.py - line 1214 - module threading)
2020-12-13 14:09:31,935 threading            DEBUG                                <<< Exit  current_thread : Return value: <_MainThread(MainThread, started 548443516944)>
2020-12-13 14:09:31,938 threading            DEBUG                                >>> Entry name (/usr/lib/python3.7/threading.py - line 1052 - module threading)
2020-12-13 14:09:31,940 threading            DEBUG                                <<< Exit  name : Return value: MainThread
2020-12-13 14:09:31,942 logging              DEBUG                            <<< Exit  __init__ : Return value: None
2020-12-13 14:09:31,943 logging              DEBUG                        <<< Exit  makeRecord : Return value: <LogRecord: logTestMod, 10, /home/pi/dev/py-logging-plus/logging_plus/__init__.py, 109, "        ## Explicit log: C - getter of MyClass">
2020-12-13 14:09:31,945 logging              DEBUG                        >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 1521 - module logging)
2020-12-13 14:09:31,947 logging              DEBUG                            >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:31,949 logging              DEBUG                            <<< Exit  filter : Return value: True
2020-12-13 14:09:31,951 logging              DEBUG                            >>> Entry callHandlers (/usr/lib/python3.7/logging/__init__.py - line 1575 - module logging)
2020-12-13 14:09:31,953 logging              DEBUG                                >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 892 - module logging)
2020-12-13 14:09:31,955 logging              DEBUG                                    >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:31,958 logging              DEBUG                                    <<< Exit  filter : Return value: True
2020-12-13 14:09:31,960 logging              DEBUG                                    >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:31,962 logging              DEBUG                                    <<< Exit  acquire : Return value: None
2020-12-13 14:09:31,964 logging              DEBUG                                    >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1022 - module logging)
2020-12-13 14:09:31,966 logging              DEBUG                                        >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 869 - module logging)
2020-12-13 14:09:31,970 logging              DEBUG                                            >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 606 - module logging)
2020-12-13 14:09:31,973 logging              DEBUG                                                >>> Entry getMessage (/usr/lib/python3.7/logging/__init__.py - line 371 - module logging)
2020-12-13 14:09:31,975 logging              DEBUG                                                <<< Exit  getMessage : Return value:         ## Explicit log: C - getter of MyClass
2020-12-13 14:09:31,978 logging              DEBUG                                                >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 584 - module logging)
2020-12-13 14:09:31,981 logging              DEBUG                                                    >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 429 - module logging)
2020-12-13 14:09:31,983 logging              DEBUG                                                    <<< Exit  usesTime : Return value: True
2020-12-13 14:09:31,986 logging              DEBUG                                                <<< Exit  usesTime : Return value: True
2020-12-13 14:09:31,989 logging              DEBUG                                                >>> Entry formatTime (/usr/lib/python3.7/logging/__init__.py - line 539 - module logging)
2020-12-13 14:09:31,991 logging              DEBUG                                                <<< Exit  formatTime : Return value: 2020-12-13 14:09:31,911
2020-12-13 14:09:31,994 logging              DEBUG                                                >>> Entry formatMessage (/usr/lib/python3.7/logging/__init__.py - line 590 - module logging)
2020-12-13 14:09:31,996 logging              DEBUG                                                    >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 432 - module logging)
2020-12-13 14:09:31,999 logging              DEBUG                                                    <<< Exit  format : Return value: 2020-12-13 14:09:31,911 logTestMod           DEBUG            ## Explicit log: C - getter of MyClass
2020-12-13 14:09:32,002 logging              DEBUG                                                <<< Exit  formatMessage : Return value: 2020-12-13 14:09:31,911 logTestMod           DEBUG            ## Explicit log: C - getter of MyClass
2020-12-13 14:09:32,004 logging              DEBUG                                            <<< Exit  format : Return value: 2020-12-13 14:09:31,911 logTestMod           DEBUG            ## Explicit log: C - getter of MyClass
2020-12-13 14:09:32,006 logging              DEBUG                                        <<< Exit  format : Return value: 2020-12-13 14:09:31,911 logTestMod           DEBUG            ## Explicit log: C - getter of MyClass
2020-12-13 14:09:32,009 logging              DEBUG                                        >>> Entry flush (/usr/lib/python3.7/logging/__init__.py - line 1011 - module logging)
2020-12-13 14:09:32,011 logging              DEBUG                                            >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:32,013 logging              DEBUG                                            <<< Exit  acquire : Return value: None
2020-12-13 14:09:32,016 logging              DEBUG                                            >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:32,018 logging              DEBUG                                            <<< Exit  release : Return value: None
2020-12-13 14:09:32,020 logging              DEBUG                                        <<< Exit  flush : Return value: None
2020-12-13 14:09:32,022 logging              DEBUG                                    <<< Exit  emit : Return value: None
2020-12-13 14:09:32,025 logging              DEBUG                                    >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:32,027 logging              DEBUG                                    <<< Exit  release : Return value: None
2020-12-13 14:09:32,029 logging              DEBUG                                <<< Exit  handle : Return value: True
2020-12-13 14:09:32,031 logging              DEBUG                                >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 892 - module logging)
2020-12-13 14:09:32,033 logging              DEBUG                                    >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:32,035 logging              DEBUG                                    <<< Exit  filter : Return value: True
2020-12-13 14:09:32,037 logging              DEBUG                                    >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:32,040 logging              DEBUG                                    <<< Exit  acquire : Return value: None
2020-12-13 14:09:32,042 logging              DEBUG                                    >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1123 - module logging)
2020-12-13 14:09:32,044 logging              DEBUG                                        >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1022 - module logging)
2020-12-13 14:09:32,047 logging              DEBUG                                            >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 869 - module logging)
2020-12-13 14:09:32,049 logging              DEBUG                                                >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 606 - module logging)
2020-12-13 14:09:32,052 logging              DEBUG                                                    >>> Entry getMessage (/usr/lib/python3.7/logging/__init__.py - line 371 - module logging)
2020-12-13 14:09:32,054 logging              DEBUG                                                    <<< Exit  getMessage : Return value:         ## Explicit log: C - getter of MyClass
2020-12-13 14:09:32,057 logging              DEBUG                                                    >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 584 - module logging)
2020-12-13 14:09:32,060 logging              DEBUG                                                        >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 429 - module logging)
2020-12-13 14:09:32,063 logging              DEBUG                                                        <<< Exit  usesTime : Return value: True
2020-12-13 14:09:32,065 logging              DEBUG                                                    <<< Exit  usesTime : Return value: True
2020-12-13 14:09:32,068 logging              DEBUG                                                    >>> Entry formatTime (/usr/lib/python3.7/logging/__init__.py - line 539 - module logging)
2020-12-13 14:09:32,070 logging              DEBUG                                                    <<< Exit  formatTime : Return value: 2020-12-13 14:09:31,911
2020-12-13 14:09:32,073 logging              DEBUG                                                    >>> Entry formatMessage (/usr/lib/python3.7/logging/__init__.py - line 590 - module logging)
2020-12-13 14:09:32,076 logging              DEBUG                                                        >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 432 - module logging)
2020-12-13 14:09:32,079 logging              DEBUG                                                        <<< Exit  format : Return value: 2020-12-13 14:09:31,911 logTestMod           DEBUG            ## Explicit log: C - getter of MyClass
2020-12-13 14:09:32,081 logging              DEBUG                                                    <<< Exit  formatMessage : Return value: 2020-12-13 14:09:31,911 logTestMod           DEBUG            ## Explicit log: C - getter of MyClass
2020-12-13 14:09:32,084 logging              DEBUG                                                <<< Exit  format : Return value: 2020-12-13 14:09:31,911 logTestMod           DEBUG            ## Explicit log: C - getter of MyClass
2020-12-13 14:09:32,086 logging              DEBUG                                            <<< Exit  format : Return value: 2020-12-13 14:09:31,911 logTestMod           DEBUG            ## Explicit log: C - getter of MyClass
2020-12-13 14:09:31,911 logTestMod           DEBUG            ## Explicit log: C - getter of MyClass
2020-12-13 14:09:32,089 logging              DEBUG                                            >>> Entry flush (/usr/lib/python3.7/logging/__init__.py - line 1011 - module logging)
2020-12-13 14:09:32,091 logging              DEBUG                                                >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:32,094 logging              DEBUG                                                <<< Exit  acquire : Return value: None
2020-12-13 14:09:32,096 logging              DEBUG                                                >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:32,099 logging              DEBUG                                                <<< Exit  release : Return value: None
2020-12-13 14:09:32,101 logging              DEBUG                                            <<< Exit  flush : Return value: None
2020-12-13 14:09:32,104 logging              DEBUG                                        <<< Exit  emit : Return value: None
2020-12-13 14:09:32,106 logging              DEBUG                                    <<< Exit  emit : Return value: None
2020-12-13 14:09:32,108 logging              DEBUG                                    >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:32,110 logging              DEBUG                                    <<< Exit  release : Return value: None
2020-12-13 14:09:32,112 logging              DEBUG                                <<< Exit  handle : Return value: True
2020-12-13 14:09:32,114 logging              DEBUG                            <<< Exit  callHandlers : Return value: None
2020-12-13 14:09:32,116 logging              DEBUG                        <<< Exit  handle : Return value: None
2020-12-13 14:09:32,118 logging              DEBUG                    <<< Exit  _log : Return value: None
2020-12-13 14:09:32,119 logging              DEBUG                <<< Exit  debug : Return value: None
2020-12-13 14:09:32,121 logging_plus         DEBUG            <<< Exit  debug : Return value: None
2020-12-13 14:09:32,122 logTestMod           DEBUG        <<< Exit  status : Return value: 1
2020-12-13 14:09:32,123 logTestMod           DEBUG        >>> Entry status (/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py - line 19 - module logTestMod)
2020-12-13 14:09:32,125 logging_plus         DEBUG            >>> Entry debug (/home/pi/dev/py-logging-plus/logging_plus/__init__.py - line 103 - module logging_plus)
2020-12-13 14:09:32,126 inspect              DEBUG                >>> Entry stack (/usr/lib/python3.7/inspect.py - line 1511 - module inspect)
2020-12-13 14:09:32,128 inspect              DEBUG                    >>> Entry getouterframes (/usr/lib/python3.7/inspect.py - line 1483 - module inspect)
2020-12-13 14:09:32,130 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:32,132 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:32,134 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:32,136 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:32,138 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:32,140 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:32,142 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:32,144 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:32,146 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:32,148 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:32,151 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:32,153 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:32,155 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:32,157 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:32,159 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:32,161 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:32,163 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:32,166 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:32,168 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:32,170 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:32,172 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:32,174 inspect              DEBUG                                <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:32,176 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:32,178 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,180 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:32,182 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,184 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:32,186 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:32,189 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,191 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,193 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,195 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,197 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,199 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,201 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,204 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:32,207 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:32,209 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:32,212 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:32,216 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:32,219 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:32,222 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:32,224 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:32,227 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:32,229 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:32,232 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:32,234 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:32,236 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:32,239 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:32,241 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:32,243 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:32,246 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:32,248 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:32,250 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:32,253 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:32,255 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:32,258 inspect              DEBUG                                    <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:32,260 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:32,263 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,265 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:32,267 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,270 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:32,273 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:32,275 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,278 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,280 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,283 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,286 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,288 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,291 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,293 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:32,296 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:32,299 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:32,301 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:32,303 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:32,306 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:32,309 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:32,312 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:32,314 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:32,317 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module 'logging_plus' from '/home/pi/dev/py-logging-plus/logging_plus/__init__.py'>
2020-12-13 14:09:32,319 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:32,321 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#MIT License\n', '#\n', '#Copyright (c) 2020 signag\n', '#\n', '#Permission is hereby granted, free of charge, to any person obtaining a copy\n', '#of this software and associated documentation files (the "Software"), to deal\n', '#in the Software without restriction, including without limitation the rights\n', '#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '#copies of the Software, and to permit persons to whom the Software is\n', '#furnished to do so, subject to the following conditions:\n', '#\n', '#The above copyright notice and this permission notice shall be included in all\n', '#copies or substantial portions of the Software.\n', '#\n', '#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '#SOFTWARE.\n', '"""\n', '`logging_plus` - Add-on to Python logging\n', '\n', 'This module extends the standard Python logging module for the following aspects:\n', '- Subclassing Logger allows customization of logging messages depending on context\n', '- This is used for automatic indentation depending on call stack level\n', '- The module provides also the capability to generically log function entry and exit\n', '"""\n', 'import logging\n', 'import inspect\n', 'import sys\n', 'import atexit\n', '\n', '#---------------------------------------------------------------------------\n', '#   Miscellaneous module data\n', '#---------------------------------------------------------------------------\n', '#\n', '#This parameter controls whether or not logging inside infrastructure modules is activated.\n', '#The following modules are affected: inspect, logging, logging-plus\n', '#\n', 'noInfrastructureLogging = True\n', '\n', 'class Manager(logging.Manager):\n', '    """\n', '    Subclassing logging.Manager supports instantiating the subclassed Logger\n', '    instead of the standard Logger.\n', '    """\n', '    def __init__(self, rootnode):\n', '        """\n', '        Initialize the manager\n', '        """\n', '        super().__init__(rootnode)\n', '\n', '    def getLogger(self, name):\n', '        """\n', '        Return the subclassed Logger rather than the standard Logger\n', '        """\n', '        rv = None\n', '        if not isinstance(name, str):\n', "            raise TypeError('A logger name must be a string')\n", '        logging._acquireLock()\n', '        try:\n', '            if name in self.loggerDict:\n', '                rv = self.loggerDict[name]\n', '                if isinstance(rv, logging.PlaceHolder):\n', '                    ph = rv\n', '                    rv = (self.loggerClass or _loggerClass)(name)\n', '                    rv.manager = self\n', '                    self.loggerDict[name] = rv\n', '                    self._fixupChildren(ph, rv)\n', '                    self._fixupParents(rv)\n', '            else:\n', '                rv = (self.loggerClass or _loggerClass)(name)\n', '                rv.manager = self\n', '                self.loggerDict[name] = rv\n', '                self._fixupParents(rv)\n', '        finally:\n', '            logging._releaseLock()\n', '        return rv\n', '\n', '    def cleanupLoggers(self):\n', '        """\n', '        Remove registered file handlers from all available loggers\n', '        """\n', '        lgr = root\n', '        for hdl in reversed(lgr.handlers):\n', '            if isinstance(hdl, logging.FileHandler):\n', '                lgr.removeHandler(hdl)\n', '        for lgName in self.loggerDict:\n', '            lgr = self.getLogger(lgName)\n', '            for hdl in lgr.handlers:\n', '                if isinstance(hdl, logging.FileHandler):\n', '                    lgr.removeHandler(hdl)\n', '\n', 'class Logger(logging.Logger):\n', '    def __init__(self, name, level=logging.NOTSET):\n', '        """\n', '        Initialize the subclassed Logger\n', '        """\n', '        super().__init__(name, level)\n', '\n', '    def debug(self, msg, *args, **kwargs):\n', '        """\n', '        Indent DEBUG message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def info(self, msg, *args, **kwargs):\n', '        """\n', '        Indent INFO message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().info(msg, *args, **kwargs)\n', '\n', '    def warning(self, msg, *args, **kwargs):\n', '        """\n', '        Indent WARNING message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().warning(msg, *args, **kwargs)\n', '\n', '    def error(self, msg, *args, **kwargs):\n', '        """\n', '        Indent ERROR message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().error(msg, *args, **kwargs)\n', '\n', '    def logEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def logExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', 'class RootLogger(Logger):\n', '    """\n', '    This is the extended root logger\n', '    """\n', '    def __init__(self, level):\n', '        """\n', '        Initialize the logger with the name "root".\n', '        """\n', '        Logger.__init__(self, "root", level)\n', '\n', '_loggerClass = Logger\n', '\n', '\n', 'root = RootLogger(logging.WARNING)\n', 'Logger.root = root\n', 'Logger.manager = Manager(Logger.root)\n', '\n', 'def getLogger(name=None):\n', '    """\n', '    Return an extended logger with the specified name, creating it if necessary.\n', '\n', '    If no name is specified, return the root logger.\n', '    """\n', '    if not name or isinstance(name, str) and name == root.name:\n', '        return root\n', '    return Logger.manager.getLogger(name)\n', '\n', 'def excludeFromLogging(frame):\n', '    """\n', '    Check whether frame shall be excluded from logging.\n', '\n', '    This is the case if the module of the frame itself or on of its outer frames\n', '    belongs to the inspect or logging infrastructure\n', '    """\n', '    if not frame:\n', '        return False\n', '\n', '    module = inspect.getmodule(frame)\n', '    if not module:\n', '        return False\n', '\n', '    moduleName = module.__name__\n', '\n', '    if (moduleName == "inspect") \\\n', '    or (moduleName == "logging") \\\n', '    or (moduleName == __name__):\n', '        #Do not log inside infrastructure modules\n', '        return True\n', '    else:\n', '        oframe = frame.f_back\n', '        if not oframe:\n', '            return False\n', '        return excludeFromLogging(oframe)\n', '\n', 'def autoLogIgnore(frame, event, arg):\n', '    """\n', '    Function to register as trace function for scopes where logging shall be deactivated.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call'):\n", '        #Only call needs to be sensed       \n', '        return autoLogIgnore\n', '\n', 'def autoLogEntryExit(frame, event, arg):\n', '    """\n', '    Function to register as trace function for the current scope.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call') or (event == 'return'):\n", '        #Only call and return events are sensed\n', '        if not frame:\n', '            return autoLogIgnore\n', '\n', '        code_obj = frame.f_code\n', '        func_name = code_obj.co_name\n', '        file_name = code_obj.co_filename\n', '        file_line = code_obj.co_firstlineno\n', '\n', '        module = inspect.getmodule(frame)\n', '        if not module:\n', '            return autoLogIgnore\n', '\n', '        moduleName = module.__name__\n', '\n', "        if event == 'call':\n", '            #System has been entering a new scope.\n', '            if noInfrastructureLogging:\n', '                if excludeFromLogging(frame):\n', '                    return autoLogIgnore\n', '\n', "            getLogger(moduleName).autoLogEntry('%s (%s - line %s - module %s)', func_name, file_name, file_line, moduleName)\n", '            #The function returns a reference to itself, in order to register itself as trace functuion for the new scope\n', '            return autoLogEntryExit\n', "        elif event == 'return':\n", '            #System is about to exit a scope (function or other code block). arg is the value being returned.\n', "            getLogger(moduleName).autoLogExit ('%s : Return value: %s', func_name, arg)\n", '\n', 'def removeFileHandlers():\n', '    """This function removes file handlers from available loggers in order to avoid a race condition during shutdown\n', '    The Python shutdown sequence is as follows:\n', '    1. Stop main thread\n', '    2. Close open file handlers\n', '    3. Wait for termination of non-daemon threads\n', '    4. Execute registered atexit functions\n', '    5. Garbage collection\n', '    6. Process termination\n', '\n', '    If class __del__ functions include logging with file handlers, and if ojects are destroyed \n', '    during garbage collection (5), file output will lead to an exception \n', '    because open file handlers have already been closed (2).\n', '    \n', '    Note: This applies only to explicit logging within the __del__ functions.\n', '    Automatic logging of entry and exit has already been switched off at this time \n', '    through unregisterAutoLogEntryExit.\n', '    """\n', '    mgr = getLogger().manager\n', '    mgr.cleanupLoggers()\n', '\n', 'def registerAutoLogEntryExit():\n', '    """\n', '    Register autoLogEntryExit as system trace function\n', '\n', '    This will issue logging whenever a function scope is entered or exited\n', '    """\n', '    sys.settrace(autoLogEntryExit)\n', '\n', 'def unregisterAutoLogEntryExit():\n', '    """\n', '    Clear system trace function\n', '\n', '    This will stop logging function entry / exit\n', '    """\n', '    sys.settrace(None)\n', '\n', '#Register unregisterAutoLogEntryExit to avoid logging exceptions during module shutdown\n', 'atexit.register(removeFileHandlers)\n', 'atexit.register(unregisterAutoLogEntryExit)\n']
2020-12-13 14:09:32,324 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:32,326 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:32,329 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:32,331 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:32,333 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:32,335 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:32,337 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:32,339 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:32,342 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:32,344 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:32,346 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:32,348 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:32,350 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:32,352 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:32,354 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:32,356 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:32,358 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:32,360 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:32,362 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#MIT License\n', '#\n', '#Copyright (c) 2020 signag\n', '#\n', '#Permission is hereby granted, free of charge, to any person obtaining a copy\n', '#of this software and associated documentation files (the "Software"), to deal\n', '#in the Software without restriction, including without limitation the rights\n', '#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '#copies of the Software, and to permit persons to whom the Software is\n', '#furnished to do so, subject to the following conditions:\n', '#\n', '#The above copyright notice and this permission notice shall be included in all\n', '#copies or substantial portions of the Software.\n', '#\n', '#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '#SOFTWARE.\n', '"""\n', '`logging_plus` - Add-on to Python logging\n', '\n', 'This module extends the standard Python logging module for the following aspects:\n', '- Subclassing Logger allows customization of logging messages depending on context\n', '- This is used for automatic indentation depending on call stack level\n', '- The module provides also the capability to generically log function entry and exit\n', '"""\n', 'import logging\n', 'import inspect\n', 'import sys\n', 'import atexit\n', '\n', '#---------------------------------------------------------------------------\n', '#   Miscellaneous module data\n', '#---------------------------------------------------------------------------\n', '#\n', '#This parameter controls whether or not logging inside infrastructure modules is activated.\n', '#The following modules are affected: inspect, logging, logging-plus\n', '#\n', 'noInfrastructureLogging = True\n', '\n', 'class Manager(logging.Manager):\n', '    """\n', '    Subclassing logging.Manager supports instantiating the subclassed Logger\n', '    instead of the standard Logger.\n', '    """\n', '    def __init__(self, rootnode):\n', '        """\n', '        Initialize the manager\n', '        """\n', '        super().__init__(rootnode)\n', '\n', '    def getLogger(self, name):\n', '        """\n', '        Return the subclassed Logger rather than the standard Logger\n', '        """\n', '        rv = None\n', '        if not isinstance(name, str):\n', "            raise TypeError('A logger name must be a string')\n", '        logging._acquireLock()\n', '        try:\n', '            if name in self.loggerDict:\n', '                rv = self.loggerDict[name]\n', '                if isinstance(rv, logging.PlaceHolder):\n', '                    ph = rv\n', '                    rv = (self.loggerClass or _loggerClass)(name)\n', '                    rv.manager = self\n', '                    self.loggerDict[name] = rv\n', '                    self._fixupChildren(ph, rv)\n', '                    self._fixupParents(rv)\n', '            else:\n', '                rv = (self.loggerClass or _loggerClass)(name)\n', '                rv.manager = self\n', '                self.loggerDict[name] = rv\n', '                self._fixupParents(rv)\n', '        finally:\n', '            logging._releaseLock()\n', '        return rv\n', '\n', '    def cleanupLoggers(self):\n', '        """\n', '        Remove registered file handlers from all available loggers\n', '        """\n', '        lgr = root\n', '        for hdl in reversed(lgr.handlers):\n', '            if isinstance(hdl, logging.FileHandler):\n', '                lgr.removeHandler(hdl)\n', '        for lgName in self.loggerDict:\n', '            lgr = self.getLogger(lgName)\n', '            for hdl in lgr.handlers:\n', '                if isinstance(hdl, logging.FileHandler):\n', '                    lgr.removeHandler(hdl)\n', '\n', 'class Logger(logging.Logger):\n', '    def __init__(self, name, level=logging.NOTSET):\n', '        """\n', '        Initialize the subclassed Logger\n', '        """\n', '        super().__init__(name, level)\n', '\n', '    def debug(self, msg, *args, **kwargs):\n', '        """\n', '        Indent DEBUG message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def info(self, msg, *args, **kwargs):\n', '        """\n', '        Indent INFO message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().info(msg, *args, **kwargs)\n', '\n', '    def warning(self, msg, *args, **kwargs):\n', '        """\n', '        Indent WARNING message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().warning(msg, *args, **kwargs)\n', '\n', '    def error(self, msg, *args, **kwargs):\n', '        """\n', '        Indent ERROR message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().error(msg, *args, **kwargs)\n', '\n', '    def logEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def logExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', 'class RootLogger(Logger):\n', '    """\n', '    This is the extended root logger\n', '    """\n', '    def __init__(self, level):\n', '        """\n', '        Initialize the logger with the name "root".\n', '        """\n', '        Logger.__init__(self, "root", level)\n', '\n', '_loggerClass = Logger\n', '\n', '\n', 'root = RootLogger(logging.WARNING)\n', 'Logger.root = root\n', 'Logger.manager = Manager(Logger.root)\n', '\n', 'def getLogger(name=None):\n', '    """\n', '    Return an extended logger with the specified name, creating it if necessary.\n', '\n', '    If no name is specified, return the root logger.\n', '    """\n', '    if not name or isinstance(name, str) and name == root.name:\n', '        return root\n', '    return Logger.manager.getLogger(name)\n', '\n', 'def excludeFromLogging(frame):\n', '    """\n', '    Check whether frame shall be excluded from logging.\n', '\n', '    This is the case if the module of the frame itself or on of its outer frames\n', '    belongs to the inspect or logging infrastructure\n', '    """\n', '    if not frame:\n', '        return False\n', '\n', '    module = inspect.getmodule(frame)\n', '    if not module:\n', '        return False\n', '\n', '    moduleName = module.__name__\n', '\n', '    if (moduleName == "inspect") \\\n', '    or (moduleName == "logging") \\\n', '    or (moduleName == __name__):\n', '        #Do not log inside infrastructure modules\n', '        return True\n', '    else:\n', '        oframe = frame.f_back\n', '        if not oframe:\n', '            return False\n', '        return excludeFromLogging(oframe)\n', '\n', 'def autoLogIgnore(frame, event, arg):\n', '    """\n', '    Function to register as trace function for scopes where logging shall be deactivated.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call'):\n", '        #Only call needs to be sensed       \n', '        return autoLogIgnore\n', '\n', 'def autoLogEntryExit(frame, event, arg):\n', '    """\n', '    Function to register as trace function for the current scope.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call') or (event == 'return'):\n", '        #Only call and return events are sensed\n', '        if not frame:\n', '            return autoLogIgnore\n', '\n', '        code_obj = frame.f_code\n', '        func_name = code_obj.co_name\n', '        file_name = code_obj.co_filename\n', '        file_line = code_obj.co_firstlineno\n', '\n', '        module = inspect.getmodule(frame)\n', '        if not module:\n', '            return autoLogIgnore\n', '\n', '        moduleName = module.__name__\n', '\n', "        if event == 'call':\n", '            #System has been entering a new scope.\n', '            if noInfrastructureLogging:\n', '                if excludeFromLogging(frame):\n', '                    return autoLogIgnore\n', '\n', "            getLogger(moduleName).autoLogEntry('%s (%s - line %s - module %s)', func_name, file_name, file_line, moduleName)\n", '            #The function returns a reference to itself, in order to register itself as trace functuion for the new scope\n', '            return autoLogEntryExit\n', "        elif event == 'return':\n", '            #System is about to exit a scope (function or other code block). arg is the value being returned.\n', "            getLogger(moduleName).autoLogExit ('%s : Return value: %s', func_name, arg)\n", '\n', 'def removeFileHandlers():\n', '    """This function removes file handlers from available loggers in order to avoid a race condition during shutdown\n', '    The Python shutdown sequence is as follows:\n', '    1. Stop main thread\n', '    2. Close open file handlers\n', '    3. Wait for termination of non-daemon threads\n', '    4. Execute registered atexit functions\n', '    5. Garbage collection\n', '    6. Process termination\n', '\n', '    If class __del__ functions include logging with file handlers, and if ojects are destroyed \n', '    during garbage collection (5), file output will lead to an exception \n', '    because open file handlers have already been closed (2).\n', '    \n', '    Note: This applies only to explicit logging within the __del__ functions.\n', '    Automatic logging of entry and exit has already been switched off at this time \n', '    through unregisterAutoLogEntryExit.\n', '    """\n', '    mgr = getLogger().manager\n', '    mgr.cleanupLoggers()\n', '\n', 'def registerAutoLogEntryExit():\n', '    """\n', '    Register autoLogEntryExit as system trace function\n', '\n', '    This will issue logging whenever a function scope is entered or exited\n', '    """\n', '    sys.settrace(autoLogEntryExit)\n', '\n', 'def unregisterAutoLogEntryExit():\n', '    """\n', '    Clear system trace function\n', '\n', '    This will stop logging function entry / exit\n', '    """\n', '    sys.settrace(None)\n', '\n', '#Register unregisterAutoLogEntryExit to avoid logging exceptions during module shutdown\n', 'atexit.register(removeFileHandlers)\n', 'atexit.register(unregisterAutoLogEntryExit)\n'], 102)
2020-12-13 14:09:32,366 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0)
2020-12-13 14:09:32,369 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:32,370 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:32,372 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:32,374 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:32,376 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:32,378 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:32,381 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:32,383 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:32,385 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:32,387 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:32,389 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:32,391 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:32,394 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:32,396 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:32,398 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:32,400 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:32,402 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:32,404 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:32,407 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:32,409 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:32,411 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:32,413 inspect              DEBUG                                <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:32,415 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:32,417 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,419 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:32,421 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,423 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:32,425 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:32,428 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,430 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,432 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,434 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,437 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,439 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,441 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,443 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:32,445 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:32,447 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:32,449 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:32,451 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:32,453 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:32,455 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:32,458 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:32,460 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:32,462 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:32,464 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:32,467 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:32,469 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:32,472 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:32,474 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:32,477 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:32,480 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:32,483 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:32,485 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:32,488 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:32,491 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:32,493 inspect              DEBUG                                    <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:32,495 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:32,498 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,500 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:32,502 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,504 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:32,507 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:32,509 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,511 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,513 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,516 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,518 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,520 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,522 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,525 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:32,527 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:32,529 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:32,531 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:32,533 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:32,535 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:32,537 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:32,539 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:32,542 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:32,544 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module 'logTestMod' from '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py'>
2020-12-13 14:09:32,546 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:32,548 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#!/usr/bin/python3\n', '\n', 'from context import logging_plus\n', 'logger = logging_plus.getLogger(__name__)\n', '\n', 'class MyClass:\n', '    def __init__(self):\n', '        self.__status = 1\n', '        logger.debug("## Explicit log: A - Initializing MyClass")\n', '        \n', '    def __del__(self):\n', '        logger.debug("## Explicit log: B - Finalizing MyClass")\n', '\n', '    @property\n', '    def status(self):\n', '        logger.debug("## Explicit log: C - getter of MyClass")\n', '        return self.__status\n', '\n', '    @status.setter\n', '    def status(self, value):\n', '        logger.debug("## Explicit log: D - setter of MyClass")\n', '        self.__status = value\n', '\n', '    def doSomething(self):\n', '        logger.debug("## Explicit log: E - MyClass method call")\n', '\n', 'class MySpecialClass(MyClass):\n', '    def __init__(self):\n', '        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n', '        super().__init__()\n', '\n', '    def __del__(self):\n', '        logger.debug("## Explicit log: G - Finalizing subclass MySpecialClass(MyClass)")\n', '        super().__del__()\n']
2020-12-13 14:09:32,550 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:32,552 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:32,554 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:32,556 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:32,558 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:32,560 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:32,562 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:32,564 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:32,566 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:32,569 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:32,571 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:32,573 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:32,575 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:32,577 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:32,579 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:32,581 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:32,583 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:32,585 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:32,587 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#!/usr/bin/python3\n', '\n', 'from context import logging_plus\n', 'logger = logging_plus.getLogger(__name__)\n', '\n', 'class MyClass:\n', '    def __init__(self):\n', '        self.__status = 1\n', '        logger.debug("## Explicit log: A - Initializing MyClass")\n', '        \n', '    def __del__(self):\n', '        logger.debug("## Explicit log: B - Finalizing MyClass")\n', '\n', '    @property\n', '    def status(self):\n', '        logger.debug("## Explicit log: C - getter of MyClass")\n', '        return self.__status\n', '\n', '    @status.setter\n', '    def status(self, value):\n', '        logger.debug("## Explicit log: D - setter of MyClass")\n', '        self.__status = value\n', '\n', '    def doSomething(self):\n', '        logger.debug("## Explicit log: E - MyClass method call")\n', '\n', 'class MySpecialClass(MyClass):\n', '    def __init__(self):\n', '        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n', '        super().__init__()\n', '\n', '    def __del__(self):\n', '        logger.debug("## Explicit log: G - Finalizing subclass MySpecialClass(MyClass)")\n', '        super().__del__()\n'], 18)
2020-12-13 14:09:32,590 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=21, function='status', code_context=['        logger.debug("## Explicit log: D - setter of MyClass")\n'], index=0)
2020-12-13 14:09:32,593 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:32,595 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:32,597 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:32,598 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:32,600 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:32,602 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:32,605 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:32,607 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:32,609 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:32,611 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:32,613 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:32,615 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:32,618 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:32,620 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:32,622 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:32,624 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:32,626 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:32,628 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:32,631 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:32,634 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:32,636 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:32,639 inspect              DEBUG                                <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:32,641 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:32,644 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,647 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:32,650 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,653 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:32,655 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:32,658 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,661 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,663 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,666 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,668 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,671 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,673 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,675 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:32,677 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:32,680 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:32,682 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:32,684 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:32,686 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:32,688 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:32,690 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:32,693 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:32,695 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:32,698 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:32,701 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:32,703 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:32,706 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:32,709 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:32,711 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:32,714 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:32,717 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:32,719 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:32,722 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:32,724 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:32,727 inspect              DEBUG                                    <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:32,729 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:32,732 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,734 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:32,737 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,739 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:32,742 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:32,745 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,747 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,750 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,752 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,755 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,758 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:32,760 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:32,762 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:32,765 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:32,767 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:32,769 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:32,771 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:32,773 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:32,775 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:32,777 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:32,779 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:32,782 inspect              DEBUG                                    >>> Entry getabsfile (/usr/lib/python3.7/inspect.py - line 702 - module inspect)
2020-12-13 14:09:32,784 posixpath            DEBUG                                        >>> Entry abspath (/usr/lib/python3.7/posixpath.py - line 376 - module posixpath)
2020-12-13 14:09:32,786 posixpath            DEBUG                                            >>> Entry isabs (/usr/lib/python3.7/posixpath.py - line 64 - module posixpath)
2020-12-13 14:09:32,789 posixpath            DEBUG                                                >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:32,791 posixpath            DEBUG                                                <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:32,794 posixpath            DEBUG                                            <<< Exit  isabs : Return value: False
2020-12-13 14:09:32,796 posixpath            DEBUG                                            >>> Entry join (/usr/lib/python3.7/posixpath.py - line 75 - module posixpath)
2020-12-13 14:09:32,798 posixpath            DEBUG                                                >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:32,801 posixpath            DEBUG                                                <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:32,803 posixpath            DEBUG                                            <<< Exit  join : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:32,806 posixpath            DEBUG                                            >>> Entry normpath (/usr/lib/python3.7/posixpath.py - line 338 - module posixpath)
2020-12-13 14:09:32,808 posixpath            DEBUG                                            <<< Exit  normpath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:32,811 posixpath            DEBUG                                        <<< Exit  abspath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:32,813 posixpath            DEBUG                                        >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:32,816 posixpath            DEBUG                                        <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:32,818 inspect              DEBUG                                    <<< Exit  getabsfile : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:32,821 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module '__main__' from 'logTest.py'>
2020-12-13 14:09:32,823 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:32,825 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n']
2020-12-13 14:09:32,828 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:32,830 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:32,832 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:32,834 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:32,836 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:32,838 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:32,840 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:32,842 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:32,844 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:32,846 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:32,848 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:32,850 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:32,852 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:32,854 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:32,856 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:32,858 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:32,861 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:32,863 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:32,865 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n'], 0)
2020-12-13 14:09:32,867 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='logTest.py', lineno=43, function='<module>', code_context=['x.status = 4\n'], index=0)
2020-12-13 14:09:32,870 inspect              DEBUG                    <<< Exit  getouterframes : Return value: [FrameInfo(frame=<frame at 0x7fb12c43e8, file '/home/pi/dev/py-logging-plus/logging_plus/__init__.py', line 107, code debug>, filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0), FrameInfo(frame=<frame at 0x14a1a78, file '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', line 21, code status>, filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=21, function='status', code_context=['        logger.debug("## Explicit log: D - setter of MyClass")\n'], index=0), FrameInfo(frame=<frame at 0x7fb15c19f8, file 'logTest.py', line 43, code <module>>, filename='logTest.py', lineno=43, function='<module>', code_context=['x.status = 4\n'], index=0)]
2020-12-13 14:09:32,872 inspect              DEBUG                <<< Exit  stack : Return value: [FrameInfo(frame=<frame at 0x7fb12c43e8, file '/home/pi/dev/py-logging-plus/logging_plus/__init__.py', line 107, code debug>, filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0), FrameInfo(frame=<frame at 0x14a1a78, file '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', line 21, code status>, filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=21, function='status', code_context=['        logger.debug("## Explicit log: D - setter of MyClass")\n'], index=0), FrameInfo(frame=<frame at 0x7fb15c19f8, file 'logTest.py', line 43, code <module>>, filename='logTest.py', lineno=43, function='<module>', code_context=['x.status = 4\n'], index=0)]
2020-12-13 14:09:32,873 logging              DEBUG                >>> Entry debug (/usr/lib/python3.7/logging/__init__.py - line 1361 - module logging)
2020-12-13 14:09:32,875 logging              DEBUG                    >>> Entry isEnabledFor (/usr/lib/python3.7/logging/__init__.py - line 1619 - module logging)
2020-12-13 14:09:32,877 logging              DEBUG                    <<< Exit  isEnabledFor : Return value: True
2020-12-13 14:09:32,879 logging              DEBUG                    >>> Entry _log (/usr/lib/python3.7/logging/__init__.py - line 1496 - module logging)
2020-12-13 14:09:32,881 logging              DEBUG                        >>> Entry findCaller (/usr/lib/python3.7/logging/__init__.py - line 1451 - module logging)
2020-12-13 14:09:32,883 logging              DEBUG                            >>> Entry <lambda> (/usr/lib/python3.7/logging/__init__.py - line 154 - module logging)
2020-12-13 14:09:32,885 logging              DEBUG                            <<< Exit  <lambda> : Return value: <frame at 0x7fb12a6048, file '/usr/lib/python3.7/logging/__init__.py', line 1371, code debug>
2020-12-13 14:09:32,887 posixpath            DEBUG                            >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:32,889 posixpath            DEBUG                            <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:32,891 logging              DEBUG                        <<< Exit  findCaller : Return value: ('/home/pi/dev/py-logging-plus/logging_plus/__init__.py', 109, 'debug', None)
2020-12-13 14:09:32,892 logging              DEBUG                        >>> Entry makeRecord (/usr/lib/python3.7/logging/__init__.py - line 1481 - module logging)
2020-12-13 14:09:32,894 logging              DEBUG                            >>> Entry __init__ (/usr/lib/python3.7/logging/__init__.py - line 293 - module logging)
2020-12-13 14:09:32,896 logging              DEBUG                                >>> Entry getLevelName (/usr/lib/python3.7/logging/__init__.py - line 117 - module logging)
2020-12-13 14:09:32,898 logging              DEBUG                                <<< Exit  getLevelName : Return value: DEBUG
2020-12-13 14:09:32,901 posixpath            DEBUG                                >>> Entry basename (/usr/lib/python3.7/posixpath.py - line 144 - module posixpath)
2020-12-13 14:09:32,903 posixpath            DEBUG                                    >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:32,905 posixpath            DEBUG                                    <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:32,907 posixpath            DEBUG                                <<< Exit  basename : Return value: __init__.py
2020-12-13 14:09:32,909 posixpath            DEBUG                                >>> Entry splitext (/usr/lib/python3.7/posixpath.py - line 121 - module posixpath)
2020-12-13 14:09:32,911 genericpath          DEBUG                                    >>> Entry _splitext (/usr/lib/python3.7/genericpath.py - line 117 - module genericpath)
2020-12-13 14:09:32,913 genericpath          DEBUG                                    <<< Exit  _splitext : Return value: ('__init__', '.py')
2020-12-13 14:09:32,915 posixpath            DEBUG                                <<< Exit  splitext : Return value: ('__init__', '.py')
2020-12-13 14:09:32,918 threading            DEBUG                                >>> Entry current_thread (/usr/lib/python3.7/threading.py - line 1214 - module threading)
2020-12-13 14:09:32,920 threading            DEBUG                                <<< Exit  current_thread : Return value: <_MainThread(MainThread, started 548443516944)>
2020-12-13 14:09:32,922 threading            DEBUG                                >>> Entry name (/usr/lib/python3.7/threading.py - line 1052 - module threading)
2020-12-13 14:09:32,924 threading            DEBUG                                <<< Exit  name : Return value: MainThread
2020-12-13 14:09:32,926 logging              DEBUG                            <<< Exit  __init__ : Return value: None
2020-12-13 14:09:32,928 logging              DEBUG                        <<< Exit  makeRecord : Return value: <LogRecord: logTestMod, 10, /home/pi/dev/py-logging-plus/logging_plus/__init__.py, 109, "        ## Explicit log: D - setter of MyClass">
2020-12-13 14:09:32,930 logging              DEBUG                        >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 1521 - module logging)
2020-12-13 14:09:32,932 logging              DEBUG                            >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:32,934 logging              DEBUG                            <<< Exit  filter : Return value: True
2020-12-13 14:09:32,936 logging              DEBUG                            >>> Entry callHandlers (/usr/lib/python3.7/logging/__init__.py - line 1575 - module logging)
2020-12-13 14:09:32,938 logging              DEBUG                                >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 892 - module logging)
2020-12-13 14:09:32,940 logging              DEBUG                                    >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:32,943 logging              DEBUG                                    <<< Exit  filter : Return value: True
2020-12-13 14:09:32,945 logging              DEBUG                                    >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:32,948 logging              DEBUG                                    <<< Exit  acquire : Return value: None
2020-12-13 14:09:32,950 logging              DEBUG                                    >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1022 - module logging)
2020-12-13 14:09:32,952 logging              DEBUG                                        >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 869 - module logging)
2020-12-13 14:09:32,955 logging              DEBUG                                            >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 606 - module logging)
2020-12-13 14:09:32,957 logging              DEBUG                                                >>> Entry getMessage (/usr/lib/python3.7/logging/__init__.py - line 371 - module logging)
2020-12-13 14:09:32,960 logging              DEBUG                                                <<< Exit  getMessage : Return value:         ## Explicit log: D - setter of MyClass
2020-12-13 14:09:32,962 logging              DEBUG                                                >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 584 - module logging)
2020-12-13 14:09:32,965 logging              DEBUG                                                    >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 429 - module logging)
2020-12-13 14:09:32,968 logging              DEBUG                                                    <<< Exit  usesTime : Return value: True
2020-12-13 14:09:32,970 logging              DEBUG                                                <<< Exit  usesTime : Return value: True
2020-12-13 14:09:32,973 logging              DEBUG                                                >>> Entry formatTime (/usr/lib/python3.7/logging/__init__.py - line 539 - module logging)
2020-12-13 14:09:32,976 logging              DEBUG                                                <<< Exit  formatTime : Return value: 2020-12-13 14:09:32,895
2020-12-13 14:09:32,978 logging              DEBUG                                                >>> Entry formatMessage (/usr/lib/python3.7/logging/__init__.py - line 590 - module logging)
2020-12-13 14:09:32,981 logging              DEBUG                                                    >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 432 - module logging)
2020-12-13 14:09:32,984 logging              DEBUG                                                    <<< Exit  format : Return value: 2020-12-13 14:09:32,895 logTestMod           DEBUG            ## Explicit log: D - setter of MyClass
2020-12-13 14:09:32,986 logging              DEBUG                                                <<< Exit  formatMessage : Return value: 2020-12-13 14:09:32,895 logTestMod           DEBUG            ## Explicit log: D - setter of MyClass
2020-12-13 14:09:32,989 logging              DEBUG                                            <<< Exit  format : Return value: 2020-12-13 14:09:32,895 logTestMod           DEBUG            ## Explicit log: D - setter of MyClass
2020-12-13 14:09:32,991 logging              DEBUG                                        <<< Exit  format : Return value: 2020-12-13 14:09:32,895 logTestMod           DEBUG            ## Explicit log: D - setter of MyClass
2020-12-13 14:09:32,993 logging              DEBUG                                        >>> Entry flush (/usr/lib/python3.7/logging/__init__.py - line 1011 - module logging)
2020-12-13 14:09:32,996 logging              DEBUG                                            >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:32,998 logging              DEBUG                                            <<< Exit  acquire : Return value: None
2020-12-13 14:09:33,001 logging              DEBUG                                            >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:33,003 logging              DEBUG                                            <<< Exit  release : Return value: None
2020-12-13 14:09:33,005 logging              DEBUG                                        <<< Exit  flush : Return value: None
2020-12-13 14:09:33,007 logging              DEBUG                                    <<< Exit  emit : Return value: None
2020-12-13 14:09:33,009 logging              DEBUG                                    >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:33,012 logging              DEBUG                                    <<< Exit  release : Return value: None
2020-12-13 14:09:33,014 logging              DEBUG                                <<< Exit  handle : Return value: True
2020-12-13 14:09:33,016 logging              DEBUG                                >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 892 - module logging)
2020-12-13 14:09:33,018 logging              DEBUG                                    >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:33,020 logging              DEBUG                                    <<< Exit  filter : Return value: True
2020-12-13 14:09:33,022 logging              DEBUG                                    >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:33,025 logging              DEBUG                                    <<< Exit  acquire : Return value: None
2020-12-13 14:09:33,027 logging              DEBUG                                    >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1123 - module logging)
2020-12-13 14:09:33,029 logging              DEBUG                                        >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1022 - module logging)
2020-12-13 14:09:33,032 logging              DEBUG                                            >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 869 - module logging)
2020-12-13 14:09:33,034 logging              DEBUG                                                >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 606 - module logging)
2020-12-13 14:09:33,037 logging              DEBUG                                                    >>> Entry getMessage (/usr/lib/python3.7/logging/__init__.py - line 371 - module logging)
2020-12-13 14:09:33,040 logging              DEBUG                                                    <<< Exit  getMessage : Return value:         ## Explicit log: D - setter of MyClass
2020-12-13 14:09:33,042 logging              DEBUG                                                    >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 584 - module logging)
2020-12-13 14:09:33,045 logging              DEBUG                                                        >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 429 - module logging)
2020-12-13 14:09:33,048 logging              DEBUG                                                        <<< Exit  usesTime : Return value: True
2020-12-13 14:09:33,050 logging              DEBUG                                                    <<< Exit  usesTime : Return value: True
2020-12-13 14:09:33,053 logging              DEBUG                                                    >>> Entry formatTime (/usr/lib/python3.7/logging/__init__.py - line 539 - module logging)
2020-12-13 14:09:33,056 logging              DEBUG                                                    <<< Exit  formatTime : Return value: 2020-12-13 14:09:32,895
2020-12-13 14:09:33,058 logging              DEBUG                                                    >>> Entry formatMessage (/usr/lib/python3.7/logging/__init__.py - line 590 - module logging)
2020-12-13 14:09:33,061 logging              DEBUG                                                        >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 432 - module logging)
2020-12-13 14:09:33,064 logging              DEBUG                                                        <<< Exit  format : Return value: 2020-12-13 14:09:32,895 logTestMod           DEBUG            ## Explicit log: D - setter of MyClass
2020-12-13 14:09:33,067 logging              DEBUG                                                    <<< Exit  formatMessage : Return value: 2020-12-13 14:09:32,895 logTestMod           DEBUG            ## Explicit log: D - setter of MyClass
2020-12-13 14:09:33,069 logging              DEBUG                                                <<< Exit  format : Return value: 2020-12-13 14:09:32,895 logTestMod           DEBUG            ## Explicit log: D - setter of MyClass
2020-12-13 14:09:33,071 logging              DEBUG                                            <<< Exit  format : Return value: 2020-12-13 14:09:32,895 logTestMod           DEBUG            ## Explicit log: D - setter of MyClass
2020-12-13 14:09:32,895 logTestMod           DEBUG            ## Explicit log: D - setter of MyClass
2020-12-13 14:09:33,074 logging              DEBUG                                            >>> Entry flush (/usr/lib/python3.7/logging/__init__.py - line 1011 - module logging)
2020-12-13 14:09:33,076 logging              DEBUG                                                >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:33,079 logging              DEBUG                                                <<< Exit  acquire : Return value: None
2020-12-13 14:09:33,082 logging              DEBUG                                                >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:33,084 logging              DEBUG                                                <<< Exit  release : Return value: None
2020-12-13 14:09:33,087 logging              DEBUG                                            <<< Exit  flush : Return value: None
2020-12-13 14:09:33,089 logging              DEBUG                                        <<< Exit  emit : Return value: None
2020-12-13 14:09:33,091 logging              DEBUG                                    <<< Exit  emit : Return value: None
2020-12-13 14:09:33,093 logging              DEBUG                                    >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:33,096 logging              DEBUG                                    <<< Exit  release : Return value: None
2020-12-13 14:09:33,098 logging              DEBUG                                <<< Exit  handle : Return value: True
2020-12-13 14:09:33,100 logging              DEBUG                            <<< Exit  callHandlers : Return value: None
2020-12-13 14:09:33,102 logging              DEBUG                        <<< Exit  handle : Return value: None
2020-12-13 14:09:33,103 logging              DEBUG                    <<< Exit  _log : Return value: None
2020-12-13 14:09:33,105 logging              DEBUG                <<< Exit  debug : Return value: None
2020-12-13 14:09:33,106 logging_plus         DEBUG            <<< Exit  debug : Return value: None
2020-12-13 14:09:33,108 logTestMod           DEBUG        <<< Exit  status : Return value: None
2020-12-13 14:09:33,109 logTestMod           DEBUG        >>> Entry doSomething (/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py - line 24 - module logTestMod)
2020-12-13 14:09:33,111 logging_plus         DEBUG            >>> Entry debug (/home/pi/dev/py-logging-plus/logging_plus/__init__.py - line 103 - module logging_plus)
2020-12-13 14:09:33,112 inspect              DEBUG                >>> Entry stack (/usr/lib/python3.7/inspect.py - line 1511 - module inspect)
2020-12-13 14:09:33,114 inspect              DEBUG                    >>> Entry getouterframes (/usr/lib/python3.7/inspect.py - line 1483 - module inspect)
2020-12-13 14:09:33,116 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:33,118 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:33,120 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:33,122 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:33,123 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:33,125 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:33,128 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:33,130 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:33,133 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:33,135 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:33,139 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:33,142 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:33,144 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:33,147 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:33,150 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:33,152 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:33,155 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:33,157 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:33,159 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:33,161 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:33,164 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:33,166 inspect              DEBUG                                <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:33,168 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:33,170 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,172 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:33,175 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,177 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:33,179 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:33,181 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,184 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,186 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,188 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,191 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,193 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,195 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,197 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:33,199 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:33,202 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:33,204 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:33,206 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:33,208 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:33,211 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:33,214 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:33,217 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:33,219 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:33,222 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:33,224 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:33,227 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:33,229 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:33,232 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:33,235 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:33,237 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:33,239 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:33,242 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:33,244 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:33,247 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:33,249 inspect              DEBUG                                    <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:33,251 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:33,253 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,256 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:33,258 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,261 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:33,263 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:33,266 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,268 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,271 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,273 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,276 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,278 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,281 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,284 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:33,286 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:33,288 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:33,291 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:33,293 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:33,295 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:33,297 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:33,299 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:33,301 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:33,303 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module 'logging_plus' from '/home/pi/dev/py-logging-plus/logging_plus/__init__.py'>
2020-12-13 14:09:33,305 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:33,307 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#MIT License\n', '#\n', '#Copyright (c) 2020 signag\n', '#\n', '#Permission is hereby granted, free of charge, to any person obtaining a copy\n', '#of this software and associated documentation files (the "Software"), to deal\n', '#in the Software without restriction, including without limitation the rights\n', '#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '#copies of the Software, and to permit persons to whom the Software is\n', '#furnished to do so, subject to the following conditions:\n', '#\n', '#The above copyright notice and this permission notice shall be included in all\n', '#copies or substantial portions of the Software.\n', '#\n', '#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '#SOFTWARE.\n', '"""\n', '`logging_plus` - Add-on to Python logging\n', '\n', 'This module extends the standard Python logging module for the following aspects:\n', '- Subclassing Logger allows customization of logging messages depending on context\n', '- This is used for automatic indentation depending on call stack level\n', '- The module provides also the capability to generically log function entry and exit\n', '"""\n', 'import logging\n', 'import inspect\n', 'import sys\n', 'import atexit\n', '\n', '#---------------------------------------------------------------------------\n', '#   Miscellaneous module data\n', '#---------------------------------------------------------------------------\n', '#\n', '#This parameter controls whether or not logging inside infrastructure modules is activated.\n', '#The following modules are affected: inspect, logging, logging-plus\n', '#\n', 'noInfrastructureLogging = True\n', '\n', 'class Manager(logging.Manager):\n', '    """\n', '    Subclassing logging.Manager supports instantiating the subclassed Logger\n', '    instead of the standard Logger.\n', '    """\n', '    def __init__(self, rootnode):\n', '        """\n', '        Initialize the manager\n', '        """\n', '        super().__init__(rootnode)\n', '\n', '    def getLogger(self, name):\n', '        """\n', '        Return the subclassed Logger rather than the standard Logger\n', '        """\n', '        rv = None\n', '        if not isinstance(name, str):\n', "            raise TypeError('A logger name must be a string')\n", '        logging._acquireLock()\n', '        try:\n', '            if name in self.loggerDict:\n', '                rv = self.loggerDict[name]\n', '                if isinstance(rv, logging.PlaceHolder):\n', '                    ph = rv\n', '                    rv = (self.loggerClass or _loggerClass)(name)\n', '                    rv.manager = self\n', '                    self.loggerDict[name] = rv\n', '                    self._fixupChildren(ph, rv)\n', '                    self._fixupParents(rv)\n', '            else:\n', '                rv = (self.loggerClass or _loggerClass)(name)\n', '                rv.manager = self\n', '                self.loggerDict[name] = rv\n', '                self._fixupParents(rv)\n', '        finally:\n', '            logging._releaseLock()\n', '        return rv\n', '\n', '    def cleanupLoggers(self):\n', '        """\n', '        Remove registered file handlers from all available loggers\n', '        """\n', '        lgr = root\n', '        for hdl in reversed(lgr.handlers):\n', '            if isinstance(hdl, logging.FileHandler):\n', '                lgr.removeHandler(hdl)\n', '        for lgName in self.loggerDict:\n', '            lgr = self.getLogger(lgName)\n', '            for hdl in lgr.handlers:\n', '                if isinstance(hdl, logging.FileHandler):\n', '                    lgr.removeHandler(hdl)\n', '\n', 'class Logger(logging.Logger):\n', '    def __init__(self, name, level=logging.NOTSET):\n', '        """\n', '        Initialize the subclassed Logger\n', '        """\n', '        super().__init__(name, level)\n', '\n', '    def debug(self, msg, *args, **kwargs):\n', '        """\n', '        Indent DEBUG message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def info(self, msg, *args, **kwargs):\n', '        """\n', '        Indent INFO message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().info(msg, *args, **kwargs)\n', '\n', '    def warning(self, msg, *args, **kwargs):\n', '        """\n', '        Indent WARNING message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().warning(msg, *args, **kwargs)\n', '\n', '    def error(self, msg, *args, **kwargs):\n', '        """\n', '        Indent ERROR message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().error(msg, *args, **kwargs)\n', '\n', '    def logEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def logExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', 'class RootLogger(Logger):\n', '    """\n', '    This is the extended root logger\n', '    """\n', '    def __init__(self, level):\n', '        """\n', '        Initialize the logger with the name "root".\n', '        """\n', '        Logger.__init__(self, "root", level)\n', '\n', '_loggerClass = Logger\n', '\n', '\n', 'root = RootLogger(logging.WARNING)\n', 'Logger.root = root\n', 'Logger.manager = Manager(Logger.root)\n', '\n', 'def getLogger(name=None):\n', '    """\n', '    Return an extended logger with the specified name, creating it if necessary.\n', '\n', '    If no name is specified, return the root logger.\n', '    """\n', '    if not name or isinstance(name, str) and name == root.name:\n', '        return root\n', '    return Logger.manager.getLogger(name)\n', '\n', 'def excludeFromLogging(frame):\n', '    """\n', '    Check whether frame shall be excluded from logging.\n', '\n', '    This is the case if the module of the frame itself or on of its outer frames\n', '    belongs to the inspect or logging infrastructure\n', '    """\n', '    if not frame:\n', '        return False\n', '\n', '    module = inspect.getmodule(frame)\n', '    if not module:\n', '        return False\n', '\n', '    moduleName = module.__name__\n', '\n', '    if (moduleName == "inspect") \\\n', '    or (moduleName == "logging") \\\n', '    or (moduleName == __name__):\n', '        #Do not log inside infrastructure modules\n', '        return True\n', '    else:\n', '        oframe = frame.f_back\n', '        if not oframe:\n', '            return False\n', '        return excludeFromLogging(oframe)\n', '\n', 'def autoLogIgnore(frame, event, arg):\n', '    """\n', '    Function to register as trace function for scopes where logging shall be deactivated.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call'):\n", '        #Only call needs to be sensed       \n', '        return autoLogIgnore\n', '\n', 'def autoLogEntryExit(frame, event, arg):\n', '    """\n', '    Function to register as trace function for the current scope.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call') or (event == 'return'):\n", '        #Only call and return events are sensed\n', '        if not frame:\n', '            return autoLogIgnore\n', '\n', '        code_obj = frame.f_code\n', '        func_name = code_obj.co_name\n', '        file_name = code_obj.co_filename\n', '        file_line = code_obj.co_firstlineno\n', '\n', '        module = inspect.getmodule(frame)\n', '        if not module:\n', '            return autoLogIgnore\n', '\n', '        moduleName = module.__name__\n', '\n', "        if event == 'call':\n", '            #System has been entering a new scope.\n', '            if noInfrastructureLogging:\n', '                if excludeFromLogging(frame):\n', '                    return autoLogIgnore\n', '\n', "            getLogger(moduleName).autoLogEntry('%s (%s - line %s - module %s)', func_name, file_name, file_line, moduleName)\n", '            #The function returns a reference to itself, in order to register itself as trace functuion for the new scope\n', '            return autoLogEntryExit\n', "        elif event == 'return':\n", '            #System is about to exit a scope (function or other code block). arg is the value being returned.\n', "            getLogger(moduleName).autoLogExit ('%s : Return value: %s', func_name, arg)\n", '\n', 'def removeFileHandlers():\n', '    """This function removes file handlers from available loggers in order to avoid a race condition during shutdown\n', '    The Python shutdown sequence is as follows:\n', '    1. Stop main thread\n', '    2. Close open file handlers\n', '    3. Wait for termination of non-daemon threads\n', '    4. Execute registered atexit functions\n', '    5. Garbage collection\n', '    6. Process termination\n', '\n', '    If class __del__ functions include logging with file handlers, and if ojects are destroyed \n', '    during garbage collection (5), file output will lead to an exception \n', '    because open file handlers have already been closed (2).\n', '    \n', '    Note: This applies only to explicit logging within the __del__ functions.\n', '    Automatic logging of entry and exit has already been switched off at this time \n', '    through unregisterAutoLogEntryExit.\n', '    """\n', '    mgr = getLogger().manager\n', '    mgr.cleanupLoggers()\n', '\n', 'def registerAutoLogEntryExit():\n', '    """\n', '    Register autoLogEntryExit as system trace function\n', '\n', '    This will issue logging whenever a function scope is entered or exited\n', '    """\n', '    sys.settrace(autoLogEntryExit)\n', '\n', 'def unregisterAutoLogEntryExit():\n', '    """\n', '    Clear system trace function\n', '\n', '    This will stop logging function entry / exit\n', '    """\n', '    sys.settrace(None)\n', '\n', '#Register unregisterAutoLogEntryExit to avoid logging exceptions during module shutdown\n', 'atexit.register(removeFileHandlers)\n', 'atexit.register(unregisterAutoLogEntryExit)\n']
2020-12-13 14:09:33,311 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:33,313 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:33,315 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:33,317 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:33,319 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:33,321 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:33,324 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:33,326 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:33,328 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:33,330 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:33,332 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:33,334 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:33,336 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:33,338 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:33,340 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:33,342 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:33,344 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:33,346 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:33,348 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#MIT License\n', '#\n', '#Copyright (c) 2020 signag\n', '#\n', '#Permission is hereby granted, free of charge, to any person obtaining a copy\n', '#of this software and associated documentation files (the "Software"), to deal\n', '#in the Software without restriction, including without limitation the rights\n', '#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '#copies of the Software, and to permit persons to whom the Software is\n', '#furnished to do so, subject to the following conditions:\n', '#\n', '#The above copyright notice and this permission notice shall be included in all\n', '#copies or substantial portions of the Software.\n', '#\n', '#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '#SOFTWARE.\n', '"""\n', '`logging_plus` - Add-on to Python logging\n', '\n', 'This module extends the standard Python logging module for the following aspects:\n', '- Subclassing Logger allows customization of logging messages depending on context\n', '- This is used for automatic indentation depending on call stack level\n', '- The module provides also the capability to generically log function entry and exit\n', '"""\n', 'import logging\n', 'import inspect\n', 'import sys\n', 'import atexit\n', '\n', '#---------------------------------------------------------------------------\n', '#   Miscellaneous module data\n', '#---------------------------------------------------------------------------\n', '#\n', '#This parameter controls whether or not logging inside infrastructure modules is activated.\n', '#The following modules are affected: inspect, logging, logging-plus\n', '#\n', 'noInfrastructureLogging = True\n', '\n', 'class Manager(logging.Manager):\n', '    """\n', '    Subclassing logging.Manager supports instantiating the subclassed Logger\n', '    instead of the standard Logger.\n', '    """\n', '    def __init__(self, rootnode):\n', '        """\n', '        Initialize the manager\n', '        """\n', '        super().__init__(rootnode)\n', '\n', '    def getLogger(self, name):\n', '        """\n', '        Return the subclassed Logger rather than the standard Logger\n', '        """\n', '        rv = None\n', '        if not isinstance(name, str):\n', "            raise TypeError('A logger name must be a string')\n", '        logging._acquireLock()\n', '        try:\n', '            if name in self.loggerDict:\n', '                rv = self.loggerDict[name]\n', '                if isinstance(rv, logging.PlaceHolder):\n', '                    ph = rv\n', '                    rv = (self.loggerClass or _loggerClass)(name)\n', '                    rv.manager = self\n', '                    self.loggerDict[name] = rv\n', '                    self._fixupChildren(ph, rv)\n', '                    self._fixupParents(rv)\n', '            else:\n', '                rv = (self.loggerClass or _loggerClass)(name)\n', '                rv.manager = self\n', '                self.loggerDict[name] = rv\n', '                self._fixupParents(rv)\n', '        finally:\n', '            logging._releaseLock()\n', '        return rv\n', '\n', '    def cleanupLoggers(self):\n', '        """\n', '        Remove registered file handlers from all available loggers\n', '        """\n', '        lgr = root\n', '        for hdl in reversed(lgr.handlers):\n', '            if isinstance(hdl, logging.FileHandler):\n', '                lgr.removeHandler(hdl)\n', '        for lgName in self.loggerDict:\n', '            lgr = self.getLogger(lgName)\n', '            for hdl in lgr.handlers:\n', '                if isinstance(hdl, logging.FileHandler):\n', '                    lgr.removeHandler(hdl)\n', '\n', 'class Logger(logging.Logger):\n', '    def __init__(self, name, level=logging.NOTSET):\n', '        """\n', '        Initialize the subclassed Logger\n', '        """\n', '        super().__init__(name, level)\n', '\n', '    def debug(self, msg, *args, **kwargs):\n', '        """\n', '        Indent DEBUG message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def info(self, msg, *args, **kwargs):\n', '        """\n', '        Indent INFO message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().info(msg, *args, **kwargs)\n', '\n', '    def warning(self, msg, *args, **kwargs):\n', '        """\n', '        Indent WARNING message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().warning(msg, *args, **kwargs)\n', '\n', '    def error(self, msg, *args, **kwargs):\n', '        """\n', '        Indent ERROR message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().error(msg, *args, **kwargs)\n', '\n', '    def logEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def logExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', 'class RootLogger(Logger):\n', '    """\n', '    This is the extended root logger\n', '    """\n', '    def __init__(self, level):\n', '        """\n', '        Initialize the logger with the name "root".\n', '        """\n', '        Logger.__init__(self, "root", level)\n', '\n', '_loggerClass = Logger\n', '\n', '\n', 'root = RootLogger(logging.WARNING)\n', 'Logger.root = root\n', 'Logger.manager = Manager(Logger.root)\n', '\n', 'def getLogger(name=None):\n', '    """\n', '    Return an extended logger with the specified name, creating it if necessary.\n', '\n', '    If no name is specified, return the root logger.\n', '    """\n', '    if not name or isinstance(name, str) and name == root.name:\n', '        return root\n', '    return Logger.manager.getLogger(name)\n', '\n', 'def excludeFromLogging(frame):\n', '    """\n', '    Check whether frame shall be excluded from logging.\n', '\n', '    This is the case if the module of the frame itself or on of its outer frames\n', '    belongs to the inspect or logging infrastructure\n', '    """\n', '    if not frame:\n', '        return False\n', '\n', '    module = inspect.getmodule(frame)\n', '    if not module:\n', '        return False\n', '\n', '    moduleName = module.__name__\n', '\n', '    if (moduleName == "inspect") \\\n', '    or (moduleName == "logging") \\\n', '    or (moduleName == __name__):\n', '        #Do not log inside infrastructure modules\n', '        return True\n', '    else:\n', '        oframe = frame.f_back\n', '        if not oframe:\n', '            return False\n', '        return excludeFromLogging(oframe)\n', '\n', 'def autoLogIgnore(frame, event, arg):\n', '    """\n', '    Function to register as trace function for scopes where logging shall be deactivated.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call'):\n", '        #Only call needs to be sensed       \n', '        return autoLogIgnore\n', '\n', 'def autoLogEntryExit(frame, event, arg):\n', '    """\n', '    Function to register as trace function for the current scope.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call') or (event == 'return'):\n", '        #Only call and return events are sensed\n', '        if not frame:\n', '            return autoLogIgnore\n', '\n', '        code_obj = frame.f_code\n', '        func_name = code_obj.co_name\n', '        file_name = code_obj.co_filename\n', '        file_line = code_obj.co_firstlineno\n', '\n', '        module = inspect.getmodule(frame)\n', '        if not module:\n', '            return autoLogIgnore\n', '\n', '        moduleName = module.__name__\n', '\n', "        if event == 'call':\n", '            #System has been entering a new scope.\n', '            if noInfrastructureLogging:\n', '                if excludeFromLogging(frame):\n', '                    return autoLogIgnore\n', '\n', "            getLogger(moduleName).autoLogEntry('%s (%s - line %s - module %s)', func_name, file_name, file_line, moduleName)\n", '            #The function returns a reference to itself, in order to register itself as trace functuion for the new scope\n', '            return autoLogEntryExit\n', "        elif event == 'return':\n", '            #System is about to exit a scope (function or other code block). arg is the value being returned.\n', "            getLogger(moduleName).autoLogExit ('%s : Return value: %s', func_name, arg)\n", '\n', 'def removeFileHandlers():\n', '    """This function removes file handlers from available loggers in order to avoid a race condition during shutdown\n', '    The Python shutdown sequence is as follows:\n', '    1. Stop main thread\n', '    2. Close open file handlers\n', '    3. Wait for termination of non-daemon threads\n', '    4. Execute registered atexit functions\n', '    5. Garbage collection\n', '    6. Process termination\n', '\n', '    If class __del__ functions include logging with file handlers, and if ojects are destroyed \n', '    during garbage collection (5), file output will lead to an exception \n', '    because open file handlers have already been closed (2).\n', '    \n', '    Note: This applies only to explicit logging within the __del__ functions.\n', '    Automatic logging of entry and exit has already been switched off at this time \n', '    through unregisterAutoLogEntryExit.\n', '    """\n', '    mgr = getLogger().manager\n', '    mgr.cleanupLoggers()\n', '\n', 'def registerAutoLogEntryExit():\n', '    """\n', '    Register autoLogEntryExit as system trace function\n', '\n', '    This will issue logging whenever a function scope is entered or exited\n', '    """\n', '    sys.settrace(autoLogEntryExit)\n', '\n', 'def unregisterAutoLogEntryExit():\n', '    """\n', '    Clear system trace function\n', '\n', '    This will stop logging function entry / exit\n', '    """\n', '    sys.settrace(None)\n', '\n', '#Register unregisterAutoLogEntryExit to avoid logging exceptions during module shutdown\n', 'atexit.register(removeFileHandlers)\n', 'atexit.register(unregisterAutoLogEntryExit)\n'], 102)
2020-12-13 14:09:33,352 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0)
2020-12-13 14:09:33,354 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:33,356 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:33,358 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:33,360 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:33,362 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:33,364 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:33,366 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:33,368 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:33,371 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:33,373 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:33,375 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:33,377 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:33,380 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:33,382 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:33,384 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:33,386 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:33,388 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:33,390 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:33,392 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:33,394 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:33,397 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:33,399 inspect              DEBUG                                <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:33,401 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:33,403 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,405 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:33,407 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,409 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:33,411 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:33,413 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,415 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,417 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,420 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,422 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,424 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,426 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,428 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:33,430 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:33,432 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:33,434 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:33,436 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:33,438 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:33,440 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:33,443 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:33,445 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:33,447 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:33,449 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:33,452 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:33,454 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:33,456 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:33,458 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:33,461 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:33,463 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:33,465 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:33,467 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:33,470 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:33,472 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:33,474 inspect              DEBUG                                    <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:33,476 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:33,479 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,481 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:33,483 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,485 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:33,488 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:33,490 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,492 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,494 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,496 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,499 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,501 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,503 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,505 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:33,507 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:33,510 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:33,512 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:33,514 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:33,516 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:33,518 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:33,520 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:33,522 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:33,524 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module 'logTestMod' from '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py'>
2020-12-13 14:09:33,526 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:33,528 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#!/usr/bin/python3\n', '\n', 'from context import logging_plus\n', 'logger = logging_plus.getLogger(__name__)\n', '\n', 'class MyClass:\n', '    def __init__(self):\n', '        self.__status = 1\n', '        logger.debug("## Explicit log: A - Initializing MyClass")\n', '        \n', '    def __del__(self):\n', '        logger.debug("## Explicit log: B - Finalizing MyClass")\n', '\n', '    @property\n', '    def status(self):\n', '        logger.debug("## Explicit log: C - getter of MyClass")\n', '        return self.__status\n', '\n', '    @status.setter\n', '    def status(self, value):\n', '        logger.debug("## Explicit log: D - setter of MyClass")\n', '        self.__status = value\n', '\n', '    def doSomething(self):\n', '        logger.debug("## Explicit log: E - MyClass method call")\n', '\n', 'class MySpecialClass(MyClass):\n', '    def __init__(self):\n', '        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n', '        super().__init__()\n', '\n', '    def __del__(self):\n', '        logger.debug("## Explicit log: G - Finalizing subclass MySpecialClass(MyClass)")\n', '        super().__del__()\n']
2020-12-13 14:09:33,531 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:33,533 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:33,535 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:33,537 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:33,539 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:33,541 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:33,543 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:33,545 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:33,547 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:33,549 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:33,551 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:33,553 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:33,555 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:33,557 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:33,559 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:33,561 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:33,564 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:33,566 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:33,568 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#!/usr/bin/python3\n', '\n', 'from context import logging_plus\n', 'logger = logging_plus.getLogger(__name__)\n', '\n', 'class MyClass:\n', '    def __init__(self):\n', '        self.__status = 1\n', '        logger.debug("## Explicit log: A - Initializing MyClass")\n', '        \n', '    def __del__(self):\n', '        logger.debug("## Explicit log: B - Finalizing MyClass")\n', '\n', '    @property\n', '    def status(self):\n', '        logger.debug("## Explicit log: C - getter of MyClass")\n', '        return self.__status\n', '\n', '    @status.setter\n', '    def status(self, value):\n', '        logger.debug("## Explicit log: D - setter of MyClass")\n', '        self.__status = value\n', '\n', '    def doSomething(self):\n', '        logger.debug("## Explicit log: E - MyClass method call")\n', '\n', 'class MySpecialClass(MyClass):\n', '    def __init__(self):\n', '        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n', '        super().__init__()\n', '\n', '    def __del__(self):\n', '        logger.debug("## Explicit log: G - Finalizing subclass MySpecialClass(MyClass)")\n', '        super().__del__()\n'], 23)
2020-12-13 14:09:33,570 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=25, function='doSomething', code_context=['        logger.debug("## Explicit log: E - MyClass method call")\n'], index=0)
2020-12-13 14:09:33,573 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:33,575 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:33,577 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:33,580 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:33,583 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:33,585 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:33,587 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:33,590 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:33,593 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:33,595 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:33,597 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:33,599 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:33,601 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:33,604 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:33,606 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:33,608 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:33,610 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:33,612 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:33,615 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:33,617 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:33,619 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:33,622 inspect              DEBUG                                <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:33,624 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:33,627 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,629 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:33,631 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,633 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:33,635 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:33,637 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,639 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,642 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,644 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,646 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,648 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,650 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,652 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:33,654 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:33,656 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:33,658 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:33,660 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:33,662 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:33,664 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:33,666 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:33,669 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:33,671 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:33,673 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:33,675 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:33,678 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:33,680 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:33,682 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:33,684 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:33,687 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:33,689 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:33,691 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:33,694 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:33,696 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:33,698 inspect              DEBUG                                    <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:33,700 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:33,702 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,705 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:33,707 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,709 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:33,711 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:33,713 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,716 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,718 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,720 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,722 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,725 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:33,727 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:33,729 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:33,731 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:33,733 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:33,735 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:33,737 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:33,740 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:33,742 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:33,744 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:33,746 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:33,748 inspect              DEBUG                                    >>> Entry getabsfile (/usr/lib/python3.7/inspect.py - line 702 - module inspect)
2020-12-13 14:09:33,751 posixpath            DEBUG                                        >>> Entry abspath (/usr/lib/python3.7/posixpath.py - line 376 - module posixpath)
2020-12-13 14:09:33,753 posixpath            DEBUG                                            >>> Entry isabs (/usr/lib/python3.7/posixpath.py - line 64 - module posixpath)
2020-12-13 14:09:33,756 posixpath            DEBUG                                                >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:33,758 posixpath            DEBUG                                                <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:33,760 posixpath            DEBUG                                            <<< Exit  isabs : Return value: False
2020-12-13 14:09:33,763 posixpath            DEBUG                                            >>> Entry join (/usr/lib/python3.7/posixpath.py - line 75 - module posixpath)
2020-12-13 14:09:33,765 posixpath            DEBUG                                                >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:33,768 posixpath            DEBUG                                                <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:33,770 posixpath            DEBUG                                            <<< Exit  join : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:33,773 posixpath            DEBUG                                            >>> Entry normpath (/usr/lib/python3.7/posixpath.py - line 338 - module posixpath)
2020-12-13 14:09:33,775 posixpath            DEBUG                                            <<< Exit  normpath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:33,777 posixpath            DEBUG                                        <<< Exit  abspath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:33,780 posixpath            DEBUG                                        >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:33,782 posixpath            DEBUG                                        <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:33,784 inspect              DEBUG                                    <<< Exit  getabsfile : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:33,786 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module '__main__' from 'logTest.py'>
2020-12-13 14:09:33,788 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:33,790 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n']
2020-12-13 14:09:33,792 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:33,794 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:33,797 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:33,799 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:33,801 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:33,803 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:33,805 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:33,807 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:33,809 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:33,811 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:33,813 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:33,815 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:33,817 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:33,819 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:33,821 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:33,823 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:33,825 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:33,827 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:33,829 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n'], 0)
2020-12-13 14:09:33,832 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='logTest.py', lineno=44, function='<module>', code_context=['x.doSomething()\n'], index=0)
2020-12-13 14:09:33,834 inspect              DEBUG                    <<< Exit  getouterframes : Return value: [FrameInfo(frame=<frame at 0x7fb12c43e8, file '/home/pi/dev/py-logging-plus/logging_plus/__init__.py', line 107, code debug>, filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0), FrameInfo(frame=<frame at 0x7fb12a6048, file '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', line 25, code doSomething>, filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=25, function='doSomething', code_context=['        logger.debug("## Explicit log: E - MyClass method call")\n'], index=0), FrameInfo(frame=<frame at 0x7fb15c19f8, file 'logTest.py', line 44, code <module>>, filename='logTest.py', lineno=44, function='<module>', code_context=['x.doSomething()\n'], index=0)]
2020-12-13 14:09:33,836 inspect              DEBUG                <<< Exit  stack : Return value: [FrameInfo(frame=<frame at 0x7fb12c43e8, file '/home/pi/dev/py-logging-plus/logging_plus/__init__.py', line 107, code debug>, filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0), FrameInfo(frame=<frame at 0x7fb12a6048, file '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', line 25, code doSomething>, filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=25, function='doSomething', code_context=['        logger.debug("## Explicit log: E - MyClass method call")\n'], index=0), FrameInfo(frame=<frame at 0x7fb15c19f8, file 'logTest.py', line 44, code <module>>, filename='logTest.py', lineno=44, function='<module>', code_context=['x.doSomething()\n'], index=0)]
2020-12-13 14:09:33,838 logging              DEBUG                >>> Entry debug (/usr/lib/python3.7/logging/__init__.py - line 1361 - module logging)
2020-12-13 14:09:33,840 logging              DEBUG                    >>> Entry isEnabledFor (/usr/lib/python3.7/logging/__init__.py - line 1619 - module logging)
2020-12-13 14:09:33,841 logging              DEBUG                    <<< Exit  isEnabledFor : Return value: True
2020-12-13 14:09:33,843 logging              DEBUG                    >>> Entry _log (/usr/lib/python3.7/logging/__init__.py - line 1496 - module logging)
2020-12-13 14:09:33,845 logging              DEBUG                        >>> Entry findCaller (/usr/lib/python3.7/logging/__init__.py - line 1451 - module logging)
2020-12-13 14:09:33,847 logging              DEBUG                            >>> Entry <lambda> (/usr/lib/python3.7/logging/__init__.py - line 154 - module logging)
2020-12-13 14:09:33,849 logging              DEBUG                            <<< Exit  <lambda> : Return value: <frame at 0x14bde08, file '/usr/lib/python3.7/logging/__init__.py', line 1371, code debug>
2020-12-13 14:09:33,851 posixpath            DEBUG                            >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:33,853 posixpath            DEBUG                            <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:33,855 logging              DEBUG                        <<< Exit  findCaller : Return value: ('/home/pi/dev/py-logging-plus/logging_plus/__init__.py', 109, 'debug', None)
2020-12-13 14:09:33,857 logging              DEBUG                        >>> Entry makeRecord (/usr/lib/python3.7/logging/__init__.py - line 1481 - module logging)
2020-12-13 14:09:33,859 logging              DEBUG                            >>> Entry __init__ (/usr/lib/python3.7/logging/__init__.py - line 293 - module logging)
2020-12-13 14:09:33,861 logging              DEBUG                                >>> Entry getLevelName (/usr/lib/python3.7/logging/__init__.py - line 117 - module logging)
2020-12-13 14:09:33,863 logging              DEBUG                                <<< Exit  getLevelName : Return value: DEBUG
2020-12-13 14:09:33,865 posixpath            DEBUG                                >>> Entry basename (/usr/lib/python3.7/posixpath.py - line 144 - module posixpath)
2020-12-13 14:09:33,867 posixpath            DEBUG                                    >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:33,869 posixpath            DEBUG                                    <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:33,871 posixpath            DEBUG                                <<< Exit  basename : Return value: __init__.py
2020-12-13 14:09:33,873 posixpath            DEBUG                                >>> Entry splitext (/usr/lib/python3.7/posixpath.py - line 121 - module posixpath)
2020-12-13 14:09:33,875 genericpath          DEBUG                                    >>> Entry _splitext (/usr/lib/python3.7/genericpath.py - line 117 - module genericpath)
2020-12-13 14:09:33,878 genericpath          DEBUG                                    <<< Exit  _splitext : Return value: ('__init__', '.py')
2020-12-13 14:09:33,880 posixpath            DEBUG                                <<< Exit  splitext : Return value: ('__init__', '.py')
2020-12-13 14:09:33,882 threading            DEBUG                                >>> Entry current_thread (/usr/lib/python3.7/threading.py - line 1214 - module threading)
2020-12-13 14:09:33,884 threading            DEBUG                                <<< Exit  current_thread : Return value: <_MainThread(MainThread, started 548443516944)>
2020-12-13 14:09:33,886 threading            DEBUG                                >>> Entry name (/usr/lib/python3.7/threading.py - line 1052 - module threading)
2020-12-13 14:09:33,888 threading            DEBUG                                <<< Exit  name : Return value: MainThread
2020-12-13 14:09:33,890 logging              DEBUG                            <<< Exit  __init__ : Return value: None
2020-12-13 14:09:33,892 logging              DEBUG                        <<< Exit  makeRecord : Return value: <LogRecord: logTestMod, 10, /home/pi/dev/py-logging-plus/logging_plus/__init__.py, 109, "        ## Explicit log: E - MyClass method call">
2020-12-13 14:09:33,893 logging              DEBUG                        >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 1521 - module logging)
2020-12-13 14:09:33,895 logging              DEBUG                            >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:33,897 logging              DEBUG                            <<< Exit  filter : Return value: True
2020-12-13 14:09:33,899 logging              DEBUG                            >>> Entry callHandlers (/usr/lib/python3.7/logging/__init__.py - line 1575 - module logging)
2020-12-13 14:09:33,901 logging              DEBUG                                >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 892 - module logging)
2020-12-13 14:09:33,904 logging              DEBUG                                    >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:33,906 logging              DEBUG                                    <<< Exit  filter : Return value: True
2020-12-13 14:09:33,908 logging              DEBUG                                    >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:33,910 logging              DEBUG                                    <<< Exit  acquire : Return value: None
2020-12-13 14:09:33,912 logging              DEBUG                                    >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1022 - module logging)
2020-12-13 14:09:33,915 logging              DEBUG                                        >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 869 - module logging)
2020-12-13 14:09:33,917 logging              DEBUG                                            >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 606 - module logging)
2020-12-13 14:09:33,919 logging              DEBUG                                                >>> Entry getMessage (/usr/lib/python3.7/logging/__init__.py - line 371 - module logging)
2020-12-13 14:09:33,922 logging              DEBUG                                                <<< Exit  getMessage : Return value:         ## Explicit log: E - MyClass method call
2020-12-13 14:09:33,924 logging              DEBUG                                                >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 584 - module logging)
2020-12-13 14:09:33,927 logging              DEBUG                                                    >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 429 - module logging)
2020-12-13 14:09:33,930 logging              DEBUG                                                    <<< Exit  usesTime : Return value: True
2020-12-13 14:09:33,932 logging              DEBUG                                                <<< Exit  usesTime : Return value: True
2020-12-13 14:09:33,935 logging              DEBUG                                                >>> Entry formatTime (/usr/lib/python3.7/logging/__init__.py - line 539 - module logging)
2020-12-13 14:09:33,937 logging              DEBUG                                                <<< Exit  formatTime : Return value: 2020-12-13 14:09:33,859
2020-12-13 14:09:33,940 logging              DEBUG                                                >>> Entry formatMessage (/usr/lib/python3.7/logging/__init__.py - line 590 - module logging)
2020-12-13 14:09:33,942 logging              DEBUG                                                    >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 432 - module logging)
2020-12-13 14:09:33,945 logging              DEBUG                                                    <<< Exit  format : Return value: 2020-12-13 14:09:33,859 logTestMod           DEBUG            ## Explicit log: E - MyClass method call
2020-12-13 14:09:33,947 logging              DEBUG                                                <<< Exit  formatMessage : Return value: 2020-12-13 14:09:33,859 logTestMod           DEBUG            ## Explicit log: E - MyClass method call
2020-12-13 14:09:33,950 logging              DEBUG                                            <<< Exit  format : Return value: 2020-12-13 14:09:33,859 logTestMod           DEBUG            ## Explicit log: E - MyClass method call
2020-12-13 14:09:33,952 logging              DEBUG                                        <<< Exit  format : Return value: 2020-12-13 14:09:33,859 logTestMod           DEBUG            ## Explicit log: E - MyClass method call
2020-12-13 14:09:33,955 logging              DEBUG                                        >>> Entry flush (/usr/lib/python3.7/logging/__init__.py - line 1011 - module logging)
2020-12-13 14:09:33,957 logging              DEBUG                                            >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:33,959 logging              DEBUG                                            <<< Exit  acquire : Return value: None
2020-12-13 14:09:33,962 logging              DEBUG                                            >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:33,964 logging              DEBUG                                            <<< Exit  release : Return value: None
2020-12-13 14:09:33,967 logging              DEBUG                                        <<< Exit  flush : Return value: None
2020-12-13 14:09:33,969 logging              DEBUG                                    <<< Exit  emit : Return value: None
2020-12-13 14:09:33,971 logging              DEBUG                                    >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:33,973 logging              DEBUG                                    <<< Exit  release : Return value: None
2020-12-13 14:09:33,975 logging              DEBUG                                <<< Exit  handle : Return value: True
2020-12-13 14:09:33,977 logging              DEBUG                                >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 892 - module logging)
2020-12-13 14:09:33,979 logging              DEBUG                                    >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:33,981 logging              DEBUG                                    <<< Exit  filter : Return value: True
2020-12-13 14:09:33,983 logging              DEBUG                                    >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:33,986 logging              DEBUG                                    <<< Exit  acquire : Return value: None
2020-12-13 14:09:33,988 logging              DEBUG                                    >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1123 - module logging)
2020-12-13 14:09:33,990 logging              DEBUG                                        >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1022 - module logging)
2020-12-13 14:09:33,992 logging              DEBUG                                            >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 869 - module logging)
2020-12-13 14:09:33,995 logging              DEBUG                                                >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 606 - module logging)
2020-12-13 14:09:33,998 logging              DEBUG                                                    >>> Entry getMessage (/usr/lib/python3.7/logging/__init__.py - line 371 - module logging)
2020-12-13 14:09:34,000 logging              DEBUG                                                    <<< Exit  getMessage : Return value:         ## Explicit log: E - MyClass method call
2020-12-13 14:09:34,003 logging              DEBUG                                                    >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 584 - module logging)
2020-12-13 14:09:34,006 logging              DEBUG                                                        >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 429 - module logging)
2020-12-13 14:09:34,009 logging              DEBUG                                                        <<< Exit  usesTime : Return value: True
2020-12-13 14:09:34,011 logging              DEBUG                                                    <<< Exit  usesTime : Return value: True
2020-12-13 14:09:34,014 logging              DEBUG                                                    >>> Entry formatTime (/usr/lib/python3.7/logging/__init__.py - line 539 - module logging)
2020-12-13 14:09:34,017 logging              DEBUG                                                    <<< Exit  formatTime : Return value: 2020-12-13 14:09:33,859
2020-12-13 14:09:34,019 logging              DEBUG                                                    >>> Entry formatMessage (/usr/lib/python3.7/logging/__init__.py - line 590 - module logging)
2020-12-13 14:09:34,022 logging              DEBUG                                                        >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 432 - module logging)
2020-12-13 14:09:34,025 logging              DEBUG                                                        <<< Exit  format : Return value: 2020-12-13 14:09:33,859 logTestMod           DEBUG            ## Explicit log: E - MyClass method call
2020-12-13 14:09:34,027 logging              DEBUG                                                    <<< Exit  formatMessage : Return value: 2020-12-13 14:09:33,859 logTestMod           DEBUG            ## Explicit log: E - MyClass method call
2020-12-13 14:09:34,030 logging              DEBUG                                                <<< Exit  format : Return value: 2020-12-13 14:09:33,859 logTestMod           DEBUG            ## Explicit log: E - MyClass method call
2020-12-13 14:09:34,032 logging              DEBUG                                            <<< Exit  format : Return value: 2020-12-13 14:09:33,859 logTestMod           DEBUG            ## Explicit log: E - MyClass method call
2020-12-13 14:09:33,859 logTestMod           DEBUG            ## Explicit log: E - MyClass method call
2020-12-13 14:09:34,035 logging              DEBUG                                            >>> Entry flush (/usr/lib/python3.7/logging/__init__.py - line 1011 - module logging)
2020-12-13 14:09:34,037 logging              DEBUG                                                >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:34,039 logging              DEBUG                                                <<< Exit  acquire : Return value: None
2020-12-13 14:09:34,042 logging              DEBUG                                                >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:34,045 logging              DEBUG                                                <<< Exit  release : Return value: None
2020-12-13 14:09:34,047 logging              DEBUG                                            <<< Exit  flush : Return value: None
2020-12-13 14:09:34,049 logging              DEBUG                                        <<< Exit  emit : Return value: None
2020-12-13 14:09:34,051 logging              DEBUG                                    <<< Exit  emit : Return value: None
2020-12-13 14:09:34,053 logging              DEBUG                                    >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:34,056 logging              DEBUG                                    <<< Exit  release : Return value: None
2020-12-13 14:09:34,058 logging              DEBUG                                <<< Exit  handle : Return value: True
2020-12-13 14:09:34,060 logging              DEBUG                            <<< Exit  callHandlers : Return value: None
2020-12-13 14:09:34,062 logging              DEBUG                        <<< Exit  handle : Return value: None
2020-12-13 14:09:34,063 logging              DEBUG                    <<< Exit  _log : Return value: None
2020-12-13 14:09:34,065 logging              DEBUG                <<< Exit  debug : Return value: None
2020-12-13 14:09:34,066 logging_plus         DEBUG            <<< Exit  debug : Return value: None
2020-12-13 14:09:34,068 logTestMod           DEBUG        <<< Exit  doSomething : Return value: None
2020-12-13 14:09:34,069 __main__             DEBUG        >>> Entry func (logTest.py - line 34 - module __main__)
2020-12-13 14:09:34,071 logging_plus         DEBUG            >>> Entry debug (/home/pi/dev/py-logging-plus/logging_plus/__init__.py - line 103 - module logging_plus)
2020-12-13 14:09:34,072 inspect              DEBUG                >>> Entry stack (/usr/lib/python3.7/inspect.py - line 1511 - module inspect)
2020-12-13 14:09:34,074 inspect              DEBUG                    >>> Entry getouterframes (/usr/lib/python3.7/inspect.py - line 1483 - module inspect)
2020-12-13 14:09:34,076 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:34,078 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:34,080 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:34,082 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:34,084 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:34,085 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:34,087 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:34,090 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:34,092 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:34,094 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:34,096 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:34,098 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:34,100 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:34,103 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:34,105 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:34,107 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:34,110 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:34,112 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:34,114 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:34,116 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:34,119 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:34,121 inspect              DEBUG                                <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:34,123 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:34,125 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,127 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:34,129 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,131 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:34,133 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:34,136 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,138 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,140 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,142 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,144 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,146 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,148 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,150 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:34,153 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:34,155 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:34,157 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:34,158 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:34,161 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:34,163 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:34,165 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:34,168 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:34,170 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:34,172 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:34,175 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:34,177 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:34,179 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:34,181 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:34,184 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:34,186 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:34,188 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:34,190 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:34,193 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:34,195 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:34,197 inspect              DEBUG                                    <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:34,199 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:34,202 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,204 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:34,207 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,210 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:34,213 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:34,217 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,221 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,224 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,226 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,229 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,231 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,234 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,237 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:34,239 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:34,241 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:34,243 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:34,245 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:34,248 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:34,250 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:34,252 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:34,255 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:34,257 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module 'logging_plus' from '/home/pi/dev/py-logging-plus/logging_plus/__init__.py'>
2020-12-13 14:09:34,260 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:34,262 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#MIT License\n', '#\n', '#Copyright (c) 2020 signag\n', '#\n', '#Permission is hereby granted, free of charge, to any person obtaining a copy\n', '#of this software and associated documentation files (the "Software"), to deal\n', '#in the Software without restriction, including without limitation the rights\n', '#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '#copies of the Software, and to permit persons to whom the Software is\n', '#furnished to do so, subject to the following conditions:\n', '#\n', '#The above copyright notice and this permission notice shall be included in all\n', '#copies or substantial portions of the Software.\n', '#\n', '#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '#SOFTWARE.\n', '"""\n', '`logging_plus` - Add-on to Python logging\n', '\n', 'This module extends the standard Python logging module for the following aspects:\n', '- Subclassing Logger allows customization of logging messages depending on context\n', '- This is used for automatic indentation depending on call stack level\n', '- The module provides also the capability to generically log function entry and exit\n', '"""\n', 'import logging\n', 'import inspect\n', 'import sys\n', 'import atexit\n', '\n', '#---------------------------------------------------------------------------\n', '#   Miscellaneous module data\n', '#---------------------------------------------------------------------------\n', '#\n', '#This parameter controls whether or not logging inside infrastructure modules is activated.\n', '#The following modules are affected: inspect, logging, logging-plus\n', '#\n', 'noInfrastructureLogging = True\n', '\n', 'class Manager(logging.Manager):\n', '    """\n', '    Subclassing logging.Manager supports instantiating the subclassed Logger\n', '    instead of the standard Logger.\n', '    """\n', '    def __init__(self, rootnode):\n', '        """\n', '        Initialize the manager\n', '        """\n', '        super().__init__(rootnode)\n', '\n', '    def getLogger(self, name):\n', '        """\n', '        Return the subclassed Logger rather than the standard Logger\n', '        """\n', '        rv = None\n', '        if not isinstance(name, str):\n', "            raise TypeError('A logger name must be a string')\n", '        logging._acquireLock()\n', '        try:\n', '            if name in self.loggerDict:\n', '                rv = self.loggerDict[name]\n', '                if isinstance(rv, logging.PlaceHolder):\n', '                    ph = rv\n', '                    rv = (self.loggerClass or _loggerClass)(name)\n', '                    rv.manager = self\n', '                    self.loggerDict[name] = rv\n', '                    self._fixupChildren(ph, rv)\n', '                    self._fixupParents(rv)\n', '            else:\n', '                rv = (self.loggerClass or _loggerClass)(name)\n', '                rv.manager = self\n', '                self.loggerDict[name] = rv\n', '                self._fixupParents(rv)\n', '        finally:\n', '            logging._releaseLock()\n', '        return rv\n', '\n', '    def cleanupLoggers(self):\n', '        """\n', '        Remove registered file handlers from all available loggers\n', '        """\n', '        lgr = root\n', '        for hdl in reversed(lgr.handlers):\n', '            if isinstance(hdl, logging.FileHandler):\n', '                lgr.removeHandler(hdl)\n', '        for lgName in self.loggerDict:\n', '            lgr = self.getLogger(lgName)\n', '            for hdl in lgr.handlers:\n', '                if isinstance(hdl, logging.FileHandler):\n', '                    lgr.removeHandler(hdl)\n', '\n', 'class Logger(logging.Logger):\n', '    def __init__(self, name, level=logging.NOTSET):\n', '        """\n', '        Initialize the subclassed Logger\n', '        """\n', '        super().__init__(name, level)\n', '\n', '    def debug(self, msg, *args, **kwargs):\n', '        """\n', '        Indent DEBUG message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def info(self, msg, *args, **kwargs):\n', '        """\n', '        Indent INFO message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().info(msg, *args, **kwargs)\n', '\n', '    def warning(self, msg, *args, **kwargs):\n', '        """\n', '        Indent WARNING message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().warning(msg, *args, **kwargs)\n', '\n', '    def error(self, msg, *args, **kwargs):\n', '        """\n', '        Indent ERROR message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().error(msg, *args, **kwargs)\n', '\n', '    def logEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def logExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', 'class RootLogger(Logger):\n', '    """\n', '    This is the extended root logger\n', '    """\n', '    def __init__(self, level):\n', '        """\n', '        Initialize the logger with the name "root".\n', '        """\n', '        Logger.__init__(self, "root", level)\n', '\n', '_loggerClass = Logger\n', '\n', '\n', 'root = RootLogger(logging.WARNING)\n', 'Logger.root = root\n', 'Logger.manager = Manager(Logger.root)\n', '\n', 'def getLogger(name=None):\n', '    """\n', '    Return an extended logger with the specified name, creating it if necessary.\n', '\n', '    If no name is specified, return the root logger.\n', '    """\n', '    if not name or isinstance(name, str) and name == root.name:\n', '        return root\n', '    return Logger.manager.getLogger(name)\n', '\n', 'def excludeFromLogging(frame):\n', '    """\n', '    Check whether frame shall be excluded from logging.\n', '\n', '    This is the case if the module of the frame itself or on of its outer frames\n', '    belongs to the inspect or logging infrastructure\n', '    """\n', '    if not frame:\n', '        return False\n', '\n', '    module = inspect.getmodule(frame)\n', '    if not module:\n', '        return False\n', '\n', '    moduleName = module.__name__\n', '\n', '    if (moduleName == "inspect") \\\n', '    or (moduleName == "logging") \\\n', '    or (moduleName == __name__):\n', '        #Do not log inside infrastructure modules\n', '        return True\n', '    else:\n', '        oframe = frame.f_back\n', '        if not oframe:\n', '            return False\n', '        return excludeFromLogging(oframe)\n', '\n', 'def autoLogIgnore(frame, event, arg):\n', '    """\n', '    Function to register as trace function for scopes where logging shall be deactivated.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call'):\n", '        #Only call needs to be sensed       \n', '        return autoLogIgnore\n', '\n', 'def autoLogEntryExit(frame, event, arg):\n', '    """\n', '    Function to register as trace function for the current scope.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call') or (event == 'return'):\n", '        #Only call and return events are sensed\n', '        if not frame:\n', '            return autoLogIgnore\n', '\n', '        code_obj = frame.f_code\n', '        func_name = code_obj.co_name\n', '        file_name = code_obj.co_filename\n', '        file_line = code_obj.co_firstlineno\n', '\n', '        module = inspect.getmodule(frame)\n', '        if not module:\n', '            return autoLogIgnore\n', '\n', '        moduleName = module.__name__\n', '\n', "        if event == 'call':\n", '            #System has been entering a new scope.\n', '            if noInfrastructureLogging:\n', '                if excludeFromLogging(frame):\n', '                    return autoLogIgnore\n', '\n', "            getLogger(moduleName).autoLogEntry('%s (%s - line %s - module %s)', func_name, file_name, file_line, moduleName)\n", '            #The function returns a reference to itself, in order to register itself as trace functuion for the new scope\n', '            return autoLogEntryExit\n', "        elif event == 'return':\n", '            #System is about to exit a scope (function or other code block). arg is the value being returned.\n', "            getLogger(moduleName).autoLogExit ('%s : Return value: %s', func_name, arg)\n", '\n', 'def removeFileHandlers():\n', '    """This function removes file handlers from available loggers in order to avoid a race condition during shutdown\n', '    The Python shutdown sequence is as follows:\n', '    1. Stop main thread\n', '    2. Close open file handlers\n', '    3. Wait for termination of non-daemon threads\n', '    4. Execute registered atexit functions\n', '    5. Garbage collection\n', '    6. Process termination\n', '\n', '    If class __del__ functions include logging with file handlers, and if ojects are destroyed \n', '    during garbage collection (5), file output will lead to an exception \n', '    because open file handlers have already been closed (2).\n', '    \n', '    Note: This applies only to explicit logging within the __del__ functions.\n', '    Automatic logging of entry and exit has already been switched off at this time \n', '    through unregisterAutoLogEntryExit.\n', '    """\n', '    mgr = getLogger().manager\n', '    mgr.cleanupLoggers()\n', '\n', 'def registerAutoLogEntryExit():\n', '    """\n', '    Register autoLogEntryExit as system trace function\n', '\n', '    This will issue logging whenever a function scope is entered or exited\n', '    """\n', '    sys.settrace(autoLogEntryExit)\n', '\n', 'def unregisterAutoLogEntryExit():\n', '    """\n', '    Clear system trace function\n', '\n', '    This will stop logging function entry / exit\n', '    """\n', '    sys.settrace(None)\n', '\n', '#Register unregisterAutoLogEntryExit to avoid logging exceptions during module shutdown\n', 'atexit.register(removeFileHandlers)\n', 'atexit.register(unregisterAutoLogEntryExit)\n']
2020-12-13 14:09:34,266 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:34,269 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:34,271 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:34,274 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:34,276 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:34,278 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:34,281 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:34,283 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:34,285 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:34,288 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:34,290 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:34,293 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:34,295 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:34,297 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:34,300 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:34,302 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:34,305 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:34,308 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:34,310 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#MIT License\n', '#\n', '#Copyright (c) 2020 signag\n', '#\n', '#Permission is hereby granted, free of charge, to any person obtaining a copy\n', '#of this software and associated documentation files (the "Software"), to deal\n', '#in the Software without restriction, including without limitation the rights\n', '#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '#copies of the Software, and to permit persons to whom the Software is\n', '#furnished to do so, subject to the following conditions:\n', '#\n', '#The above copyright notice and this permission notice shall be included in all\n', '#copies or substantial portions of the Software.\n', '#\n', '#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '#SOFTWARE.\n', '"""\n', '`logging_plus` - Add-on to Python logging\n', '\n', 'This module extends the standard Python logging module for the following aspects:\n', '- Subclassing Logger allows customization of logging messages depending on context\n', '- This is used for automatic indentation depending on call stack level\n', '- The module provides also the capability to generically log function entry and exit\n', '"""\n', 'import logging\n', 'import inspect\n', 'import sys\n', 'import atexit\n', '\n', '#---------------------------------------------------------------------------\n', '#   Miscellaneous module data\n', '#---------------------------------------------------------------------------\n', '#\n', '#This parameter controls whether or not logging inside infrastructure modules is activated.\n', '#The following modules are affected: inspect, logging, logging-plus\n', '#\n', 'noInfrastructureLogging = True\n', '\n', 'class Manager(logging.Manager):\n', '    """\n', '    Subclassing logging.Manager supports instantiating the subclassed Logger\n', '    instead of the standard Logger.\n', '    """\n', '    def __init__(self, rootnode):\n', '        """\n', '        Initialize the manager\n', '        """\n', '        super().__init__(rootnode)\n', '\n', '    def getLogger(self, name):\n', '        """\n', '        Return the subclassed Logger rather than the standard Logger\n', '        """\n', '        rv = None\n', '        if not isinstance(name, str):\n', "            raise TypeError('A logger name must be a string')\n", '        logging._acquireLock()\n', '        try:\n', '            if name in self.loggerDict:\n', '                rv = self.loggerDict[name]\n', '                if isinstance(rv, logging.PlaceHolder):\n', '                    ph = rv\n', '                    rv = (self.loggerClass or _loggerClass)(name)\n', '                    rv.manager = self\n', '                    self.loggerDict[name] = rv\n', '                    self._fixupChildren(ph, rv)\n', '                    self._fixupParents(rv)\n', '            else:\n', '                rv = (self.loggerClass or _loggerClass)(name)\n', '                rv.manager = self\n', '                self.loggerDict[name] = rv\n', '                self._fixupParents(rv)\n', '        finally:\n', '            logging._releaseLock()\n', '        return rv\n', '\n', '    def cleanupLoggers(self):\n', '        """\n', '        Remove registered file handlers from all available loggers\n', '        """\n', '        lgr = root\n', '        for hdl in reversed(lgr.handlers):\n', '            if isinstance(hdl, logging.FileHandler):\n', '                lgr.removeHandler(hdl)\n', '        for lgName in self.loggerDict:\n', '            lgr = self.getLogger(lgName)\n', '            for hdl in lgr.handlers:\n', '                if isinstance(hdl, logging.FileHandler):\n', '                    lgr.removeHandler(hdl)\n', '\n', 'class Logger(logging.Logger):\n', '    def __init__(self, name, level=logging.NOTSET):\n', '        """\n', '        Initialize the subclassed Logger\n', '        """\n', '        super().__init__(name, level)\n', '\n', '    def debug(self, msg, *args, **kwargs):\n', '        """\n', '        Indent DEBUG message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def info(self, msg, *args, **kwargs):\n', '        """\n', '        Indent INFO message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().info(msg, *args, **kwargs)\n', '\n', '    def warning(self, msg, *args, **kwargs):\n', '        """\n', '        Indent WARNING message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().warning(msg, *args, **kwargs)\n', '\n', '    def error(self, msg, *args, **kwargs):\n', '        """\n', '        Indent ERROR message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().error(msg, *args, **kwargs)\n', '\n', '    def logEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def logExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', 'class RootLogger(Logger):\n', '    """\n', '    This is the extended root logger\n', '    """\n', '    def __init__(self, level):\n', '        """\n', '        Initialize the logger with the name "root".\n', '        """\n', '        Logger.__init__(self, "root", level)\n', '\n', '_loggerClass = Logger\n', '\n', '\n', 'root = RootLogger(logging.WARNING)\n', 'Logger.root = root\n', 'Logger.manager = Manager(Logger.root)\n', '\n', 'def getLogger(name=None):\n', '    """\n', '    Return an extended logger with the specified name, creating it if necessary.\n', '\n', '    If no name is specified, return the root logger.\n', '    """\n', '    if not name or isinstance(name, str) and name == root.name:\n', '        return root\n', '    return Logger.manager.getLogger(name)\n', '\n', 'def excludeFromLogging(frame):\n', '    """\n', '    Check whether frame shall be excluded from logging.\n', '\n', '    This is the case if the module of the frame itself or on of its outer frames\n', '    belongs to the inspect or logging infrastructure\n', '    """\n', '    if not frame:\n', '        return False\n', '\n', '    module = inspect.getmodule(frame)\n', '    if not module:\n', '        return False\n', '\n', '    moduleName = module.__name__\n', '\n', '    if (moduleName == "inspect") \\\n', '    or (moduleName == "logging") \\\n', '    or (moduleName == __name__):\n', '        #Do not log inside infrastructure modules\n', '        return True\n', '    else:\n', '        oframe = frame.f_back\n', '        if not oframe:\n', '            return False\n', '        return excludeFromLogging(oframe)\n', '\n', 'def autoLogIgnore(frame, event, arg):\n', '    """\n', '    Function to register as trace function for scopes where logging shall be deactivated.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call'):\n", '        #Only call needs to be sensed       \n', '        return autoLogIgnore\n', '\n', 'def autoLogEntryExit(frame, event, arg):\n', '    """\n', '    Function to register as trace function for the current scope.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call') or (event == 'return'):\n", '        #Only call and return events are sensed\n', '        if not frame:\n', '            return autoLogIgnore\n', '\n', '        code_obj = frame.f_code\n', '        func_name = code_obj.co_name\n', '        file_name = code_obj.co_filename\n', '        file_line = code_obj.co_firstlineno\n', '\n', '        module = inspect.getmodule(frame)\n', '        if not module:\n', '            return autoLogIgnore\n', '\n', '        moduleName = module.__name__\n', '\n', "        if event == 'call':\n", '            #System has been entering a new scope.\n', '            if noInfrastructureLogging:\n', '                if excludeFromLogging(frame):\n', '                    return autoLogIgnore\n', '\n', "            getLogger(moduleName).autoLogEntry('%s (%s - line %s - module %s)', func_name, file_name, file_line, moduleName)\n", '            #The function returns a reference to itself, in order to register itself as trace functuion for the new scope\n', '            return autoLogEntryExit\n', "        elif event == 'return':\n", '            #System is about to exit a scope (function or other code block). arg is the value being returned.\n', "            getLogger(moduleName).autoLogExit ('%s : Return value: %s', func_name, arg)\n", '\n', 'def removeFileHandlers():\n', '    """This function removes file handlers from available loggers in order to avoid a race condition during shutdown\n', '    The Python shutdown sequence is as follows:\n', '    1. Stop main thread\n', '    2. Close open file handlers\n', '    3. Wait for termination of non-daemon threads\n', '    4. Execute registered atexit functions\n', '    5. Garbage collection\n', '    6. Process termination\n', '\n', '    If class __del__ functions include logging with file handlers, and if ojects are destroyed \n', '    during garbage collection (5), file output will lead to an exception \n', '    because open file handlers have already been closed (2).\n', '    \n', '    Note: This applies only to explicit logging within the __del__ functions.\n', '    Automatic logging of entry and exit has already been switched off at this time \n', '    through unregisterAutoLogEntryExit.\n', '    """\n', '    mgr = getLogger().manager\n', '    mgr.cleanupLoggers()\n', '\n', 'def registerAutoLogEntryExit():\n', '    """\n', '    Register autoLogEntryExit as system trace function\n', '\n', '    This will issue logging whenever a function scope is entered or exited\n', '    """\n', '    sys.settrace(autoLogEntryExit)\n', '\n', 'def unregisterAutoLogEntryExit():\n', '    """\n', '    Clear system trace function\n', '\n', '    This will stop logging function entry / exit\n', '    """\n', '    sys.settrace(None)\n', '\n', '#Register unregisterAutoLogEntryExit to avoid logging exceptions during module shutdown\n', 'atexit.register(removeFileHandlers)\n', 'atexit.register(unregisterAutoLogEntryExit)\n'], 102)
2020-12-13 14:09:34,315 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0)
2020-12-13 14:09:34,317 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:34,319 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:34,321 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:34,323 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:34,325 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:34,327 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:34,329 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:34,332 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:34,334 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:34,336 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:34,338 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:34,340 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:34,342 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:34,344 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:34,347 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:34,349 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:34,351 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:34,353 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:34,355 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:34,357 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:34,360 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:34,362 inspect              DEBUG                                <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:34,364 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:34,366 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,368 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:34,371 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,373 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:34,375 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:34,377 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,379 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,382 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,384 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,386 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,388 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,390 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,393 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:34,395 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:34,397 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:34,399 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:34,401 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:34,403 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:34,405 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:34,407 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:34,409 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:34,412 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:34,414 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:34,416 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:34,419 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:34,421 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:34,424 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:34,426 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:34,429 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:34,431 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:34,433 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:34,436 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:34,438 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:34,440 inspect              DEBUG                                    <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:34,443 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:34,445 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,447 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:34,449 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,452 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:34,454 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:34,456 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,458 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,461 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,463 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,465 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,467 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,470 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,472 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:34,474 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:34,476 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:34,478 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:34,480 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:34,483 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:34,485 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:34,487 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:34,489 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:34,492 inspect              DEBUG                                    >>> Entry getabsfile (/usr/lib/python3.7/inspect.py - line 702 - module inspect)
2020-12-13 14:09:34,494 posixpath            DEBUG                                        >>> Entry abspath (/usr/lib/python3.7/posixpath.py - line 376 - module posixpath)
2020-12-13 14:09:34,497 posixpath            DEBUG                                            >>> Entry isabs (/usr/lib/python3.7/posixpath.py - line 64 - module posixpath)
2020-12-13 14:09:34,499 posixpath            DEBUG                                                >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:34,502 posixpath            DEBUG                                                <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:34,504 posixpath            DEBUG                                            <<< Exit  isabs : Return value: False
2020-12-13 14:09:34,506 posixpath            DEBUG                                            >>> Entry join (/usr/lib/python3.7/posixpath.py - line 75 - module posixpath)
2020-12-13 14:09:34,509 posixpath            DEBUG                                                >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:34,512 posixpath            DEBUG                                                <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:34,514 posixpath            DEBUG                                            <<< Exit  join : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:34,516 posixpath            DEBUG                                            >>> Entry normpath (/usr/lib/python3.7/posixpath.py - line 338 - module posixpath)
2020-12-13 14:09:34,519 posixpath            DEBUG                                            <<< Exit  normpath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:34,521 posixpath            DEBUG                                        <<< Exit  abspath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:34,524 posixpath            DEBUG                                        >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:34,526 posixpath            DEBUG                                        <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:34,528 inspect              DEBUG                                    <<< Exit  getabsfile : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:34,530 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module '__main__' from 'logTest.py'>
2020-12-13 14:09:34,532 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:34,534 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n']
2020-12-13 14:09:34,537 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:34,539 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:34,541 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:34,543 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:34,545 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:34,547 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:34,550 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:34,552 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:34,554 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:34,556 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:34,558 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:34,560 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:34,562 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:34,564 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:34,566 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:34,568 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:34,570 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:34,573 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:34,574 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n'], 33)
2020-12-13 14:09:34,577 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='logTest.py', lineno=36, function='func', code_context=['    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n'], index=0)
2020-12-13 14:09:34,580 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:34,582 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:34,584 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:34,586 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:34,588 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:34,590 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:34,592 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:34,594 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:34,597 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:34,599 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:34,602 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:34,604 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:34,607 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:34,609 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:34,611 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:34,613 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:34,616 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:34,618 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:34,620 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:34,622 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:34,624 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:34,626 inspect              DEBUG                                <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:34,629 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:34,631 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,634 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:34,637 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,639 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:34,642 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:34,645 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,648 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,650 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,653 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,656 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,658 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,661 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,664 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:34,666 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:34,669 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:34,671 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:34,673 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:34,675 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:34,678 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:34,680 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:34,683 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:34,685 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:34,687 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:34,690 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:34,692 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:34,695 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:34,698 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:34,701 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:34,703 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:34,706 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:34,708 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:34,711 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:34,713 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:34,716 inspect              DEBUG                                    <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:34,718 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:34,721 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,723 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:34,726 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,729 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:34,731 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:34,734 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,736 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,739 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,741 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,744 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,747 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:34,749 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:34,752 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:34,754 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:34,757 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:34,759 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:34,762 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:34,764 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:34,766 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:34,768 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:34,771 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:34,773 inspect              DEBUG                                    >>> Entry getabsfile (/usr/lib/python3.7/inspect.py - line 702 - module inspect)
2020-12-13 14:09:34,775 posixpath            DEBUG                                        >>> Entry abspath (/usr/lib/python3.7/posixpath.py - line 376 - module posixpath)
2020-12-13 14:09:34,777 posixpath            DEBUG                                            >>> Entry isabs (/usr/lib/python3.7/posixpath.py - line 64 - module posixpath)
2020-12-13 14:09:34,780 posixpath            DEBUG                                                >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:34,783 posixpath            DEBUG                                                <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:34,785 posixpath            DEBUG                                            <<< Exit  isabs : Return value: False
2020-12-13 14:09:34,787 posixpath            DEBUG                                            >>> Entry join (/usr/lib/python3.7/posixpath.py - line 75 - module posixpath)
2020-12-13 14:09:34,790 posixpath            DEBUG                                                >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:34,793 posixpath            DEBUG                                                <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:34,795 posixpath            DEBUG                                            <<< Exit  join : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:34,797 posixpath            DEBUG                                            >>> Entry normpath (/usr/lib/python3.7/posixpath.py - line 338 - module posixpath)
2020-12-13 14:09:34,800 posixpath            DEBUG                                            <<< Exit  normpath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:34,802 posixpath            DEBUG                                        <<< Exit  abspath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:34,805 posixpath            DEBUG                                        >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:34,807 posixpath            DEBUG                                        <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:34,809 inspect              DEBUG                                    <<< Exit  getabsfile : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:34,811 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module '__main__' from 'logTest.py'>
2020-12-13 14:09:34,814 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:34,816 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n']
2020-12-13 14:09:34,818 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:34,820 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:34,822 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:34,825 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:34,827 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:34,829 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:34,831 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:34,833 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:34,835 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:34,837 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:34,839 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:34,841 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:34,844 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:34,846 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:34,848 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:34,850 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:34,852 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:34,854 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:34,856 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n'], 0)
2020-12-13 14:09:34,859 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='logTest.py', lineno=45, function='<module>', code_context=['func(5)\n'], index=0)
2020-12-13 14:09:34,862 inspect              DEBUG                    <<< Exit  getouterframes : Return value: [FrameInfo(frame=<frame at 0x7fb12c43e8, file '/home/pi/dev/py-logging-plus/logging_plus/__init__.py', line 107, code debug>, filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0), FrameInfo(frame=<frame at 0x14bde08, file 'logTest.py', line 36, code func>, filename='logTest.py', lineno=36, function='func', code_context=['    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n'], index=0), FrameInfo(frame=<frame at 0x7fb15c19f8, file 'logTest.py', line 45, code <module>>, filename='logTest.py', lineno=45, function='<module>', code_context=['func(5)\n'], index=0)]
2020-12-13 14:09:34,863 inspect              DEBUG                <<< Exit  stack : Return value: [FrameInfo(frame=<frame at 0x7fb12c43e8, file '/home/pi/dev/py-logging-plus/logging_plus/__init__.py', line 107, code debug>, filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0), FrameInfo(frame=<frame at 0x14bde08, file 'logTest.py', line 36, code func>, filename='logTest.py', lineno=36, function='func', code_context=['    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n'], index=0), FrameInfo(frame=<frame at 0x7fb15c19f8, file 'logTest.py', line 45, code <module>>, filename='logTest.py', lineno=45, function='<module>', code_context=['func(5)\n'], index=0)]
2020-12-13 14:09:34,865 logging              DEBUG                >>> Entry debug (/usr/lib/python3.7/logging/__init__.py - line 1361 - module logging)
2020-12-13 14:09:34,867 logging              DEBUG                    >>> Entry isEnabledFor (/usr/lib/python3.7/logging/__init__.py - line 1619 - module logging)
2020-12-13 14:09:34,869 logging              DEBUG                    <<< Exit  isEnabledFor : Return value: True
2020-12-13 14:09:34,871 logging              DEBUG                    >>> Entry _log (/usr/lib/python3.7/logging/__init__.py - line 1496 - module logging)
2020-12-13 14:09:34,873 logging              DEBUG                        >>> Entry findCaller (/usr/lib/python3.7/logging/__init__.py - line 1451 - module logging)
2020-12-13 14:09:34,875 logging              DEBUG                            >>> Entry <lambda> (/usr/lib/python3.7/logging/__init__.py - line 154 - module logging)
2020-12-13 14:09:34,877 logging              DEBUG                            <<< Exit  <lambda> : Return value: <frame at 0x14b9548, file '/usr/lib/python3.7/logging/__init__.py', line 1371, code debug>
2020-12-13 14:09:34,879 posixpath            DEBUG                            >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:34,881 posixpath            DEBUG                            <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:34,883 logging              DEBUG                        <<< Exit  findCaller : Return value: ('/home/pi/dev/py-logging-plus/logging_plus/__init__.py', 109, 'debug', None)
2020-12-13 14:09:34,885 logging              DEBUG                        >>> Entry makeRecord (/usr/lib/python3.7/logging/__init__.py - line 1481 - module logging)
2020-12-13 14:09:34,888 logging              DEBUG                            >>> Entry __init__ (/usr/lib/python3.7/logging/__init__.py - line 293 - module logging)
2020-12-13 14:09:34,890 logging              DEBUG                                >>> Entry getLevelName (/usr/lib/python3.7/logging/__init__.py - line 117 - module logging)
2020-12-13 14:09:34,893 logging              DEBUG                                <<< Exit  getLevelName : Return value: DEBUG
2020-12-13 14:09:34,896 posixpath            DEBUG                                >>> Entry basename (/usr/lib/python3.7/posixpath.py - line 144 - module posixpath)
2020-12-13 14:09:34,899 posixpath            DEBUG                                    >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:34,901 posixpath            DEBUG                                    <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:34,903 posixpath            DEBUG                                <<< Exit  basename : Return value: __init__.py
2020-12-13 14:09:34,906 posixpath            DEBUG                                >>> Entry splitext (/usr/lib/python3.7/posixpath.py - line 121 - module posixpath)
2020-12-13 14:09:34,908 genericpath          DEBUG                                    >>> Entry _splitext (/usr/lib/python3.7/genericpath.py - line 117 - module genericpath)
2020-12-13 14:09:34,910 genericpath          DEBUG                                    <<< Exit  _splitext : Return value: ('__init__', '.py')
2020-12-13 14:09:34,912 posixpath            DEBUG                                <<< Exit  splitext : Return value: ('__init__', '.py')
2020-12-13 14:09:34,914 threading            DEBUG                                >>> Entry current_thread (/usr/lib/python3.7/threading.py - line 1214 - module threading)
2020-12-13 14:09:34,917 threading            DEBUG                                <<< Exit  current_thread : Return value: <_MainThread(MainThread, started 548443516944)>
2020-12-13 14:09:34,919 threading            DEBUG                                >>> Entry name (/usr/lib/python3.7/threading.py - line 1052 - module threading)
2020-12-13 14:09:34,921 threading            DEBUG                                <<< Exit  name : Return value: MainThread
2020-12-13 14:09:34,923 logging              DEBUG                            <<< Exit  __init__ : Return value: None
2020-12-13 14:09:34,925 logging              DEBUG                        <<< Exit  makeRecord : Return value: <LogRecord: root, 10, /home/pi/dev/py-logging-plus/logging_plus/__init__.py, 109, "        ## Explicit log: %s ** 2 = %s">
2020-12-13 14:09:34,927 logging              DEBUG                        >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 1521 - module logging)
2020-12-13 14:09:34,929 logging              DEBUG                            >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:34,931 logging              DEBUG                            <<< Exit  filter : Return value: True
2020-12-13 14:09:34,933 logging              DEBUG                            >>> Entry callHandlers (/usr/lib/python3.7/logging/__init__.py - line 1575 - module logging)
2020-12-13 14:09:34,935 logging              DEBUG                                >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 892 - module logging)
2020-12-13 14:09:34,937 logging              DEBUG                                    >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:34,939 logging              DEBUG                                    <<< Exit  filter : Return value: True
2020-12-13 14:09:34,941 logging              DEBUG                                    >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:34,944 logging              DEBUG                                    <<< Exit  acquire : Return value: None
2020-12-13 14:09:34,946 logging              DEBUG                                    >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1022 - module logging)
2020-12-13 14:09:34,948 logging              DEBUG                                        >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 869 - module logging)
2020-12-13 14:09:34,951 logging              DEBUG                                            >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 606 - module logging)
2020-12-13 14:09:34,953 logging              DEBUG                                                >>> Entry getMessage (/usr/lib/python3.7/logging/__init__.py - line 371 - module logging)
2020-12-13 14:09:34,956 logging              DEBUG                                                <<< Exit  getMessage : Return value:         ## Explicit log: 5 ** 2 = 25
2020-12-13 14:09:34,958 logging              DEBUG                                                >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 584 - module logging)
2020-12-13 14:09:34,961 logging              DEBUG                                                    >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 429 - module logging)
2020-12-13 14:09:34,964 logging              DEBUG                                                    <<< Exit  usesTime : Return value: True
2020-12-13 14:09:34,966 logging              DEBUG                                                <<< Exit  usesTime : Return value: True
2020-12-13 14:09:34,969 logging              DEBUG                                                >>> Entry formatTime (/usr/lib/python3.7/logging/__init__.py - line 539 - module logging)
2020-12-13 14:09:34,972 logging              DEBUG                                                <<< Exit  formatTime : Return value: 2020-12-13 14:09:34,888
2020-12-13 14:09:34,974 logging              DEBUG                                                >>> Entry formatMessage (/usr/lib/python3.7/logging/__init__.py - line 590 - module logging)
2020-12-13 14:09:34,977 logging              DEBUG                                                    >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 432 - module logging)
2020-12-13 14:09:34,980 logging              DEBUG                                                    <<< Exit  format : Return value: 2020-12-13 14:09:34,888 root                 DEBUG            ## Explicit log: 5 ** 2 = 25
2020-12-13 14:09:34,982 logging              DEBUG                                                <<< Exit  formatMessage : Return value: 2020-12-13 14:09:34,888 root                 DEBUG            ## Explicit log: 5 ** 2 = 25
2020-12-13 14:09:34,985 logging              DEBUG                                            <<< Exit  format : Return value: 2020-12-13 14:09:34,888 root                 DEBUG            ## Explicit log: 5 ** 2 = 25
2020-12-13 14:09:34,987 logging              DEBUG                                        <<< Exit  format : Return value: 2020-12-13 14:09:34,888 root                 DEBUG            ## Explicit log: 5 ** 2 = 25
2020-12-13 14:09:34,989 logging              DEBUG                                        >>> Entry flush (/usr/lib/python3.7/logging/__init__.py - line 1011 - module logging)
2020-12-13 14:09:34,992 logging              DEBUG                                            >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:34,994 logging              DEBUG                                            <<< Exit  acquire : Return value: None
2020-12-13 14:09:34,997 logging              DEBUG                                            >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:34,999 logging              DEBUG                                            <<< Exit  release : Return value: None
2020-12-13 14:09:35,002 logging              DEBUG                                        <<< Exit  flush : Return value: None
2020-12-13 14:09:35,004 logging              DEBUG                                    <<< Exit  emit : Return value: None
2020-12-13 14:09:35,006 logging              DEBUG                                    >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:35,008 logging              DEBUG                                    <<< Exit  release : Return value: None
2020-12-13 14:09:35,010 logging              DEBUG                                <<< Exit  handle : Return value: True
2020-12-13 14:09:35,012 logging              DEBUG                                >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 892 - module logging)
2020-12-13 14:09:35,014 logging              DEBUG                                    >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:35,017 logging              DEBUG                                    <<< Exit  filter : Return value: True
2020-12-13 14:09:35,019 logging              DEBUG                                    >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:35,021 logging              DEBUG                                    <<< Exit  acquire : Return value: None
2020-12-13 14:09:35,024 logging              DEBUG                                    >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1123 - module logging)
2020-12-13 14:09:35,026 logging              DEBUG                                        >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1022 - module logging)
2020-12-13 14:09:35,029 logging              DEBUG                                            >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 869 - module logging)
2020-12-13 14:09:35,031 logging              DEBUG                                                >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 606 - module logging)
2020-12-13 14:09:35,034 logging              DEBUG                                                    >>> Entry getMessage (/usr/lib/python3.7/logging/__init__.py - line 371 - module logging)
2020-12-13 14:09:35,036 logging              DEBUG                                                    <<< Exit  getMessage : Return value:         ## Explicit log: 5 ** 2 = 25
2020-12-13 14:09:35,039 logging              DEBUG                                                    >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 584 - module logging)
2020-12-13 14:09:35,042 logging              DEBUG                                                        >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 429 - module logging)
2020-12-13 14:09:35,045 logging              DEBUG                                                        <<< Exit  usesTime : Return value: True
2020-12-13 14:09:35,047 logging              DEBUG                                                    <<< Exit  usesTime : Return value: True
2020-12-13 14:09:35,050 logging              DEBUG                                                    >>> Entry formatTime (/usr/lib/python3.7/logging/__init__.py - line 539 - module logging)
2020-12-13 14:09:35,053 logging              DEBUG                                                    <<< Exit  formatTime : Return value: 2020-12-13 14:09:34,888
2020-12-13 14:09:35,056 logging              DEBUG                                                    >>> Entry formatMessage (/usr/lib/python3.7/logging/__init__.py - line 590 - module logging)
2020-12-13 14:09:35,058 logging              DEBUG                                                        >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 432 - module logging)
2020-12-13 14:09:35,061 logging              DEBUG                                                        <<< Exit  format : Return value: 2020-12-13 14:09:34,888 root                 DEBUG            ## Explicit log: 5 ** 2 = 25
2020-12-13 14:09:35,064 logging              DEBUG                                                    <<< Exit  formatMessage : Return value: 2020-12-13 14:09:34,888 root                 DEBUG            ## Explicit log: 5 ** 2 = 25
2020-12-13 14:09:35,066 logging              DEBUG                                                <<< Exit  format : Return value: 2020-12-13 14:09:34,888 root                 DEBUG            ## Explicit log: 5 ** 2 = 25
2020-12-13 14:09:35,069 logging              DEBUG                                            <<< Exit  format : Return value: 2020-12-13 14:09:34,888 root                 DEBUG            ## Explicit log: 5 ** 2 = 25
2020-12-13 14:09:34,888 root                 DEBUG            ## Explicit log: 5 ** 2 = 25
2020-12-13 14:09:35,071 logging              DEBUG                                            >>> Entry flush (/usr/lib/python3.7/logging/__init__.py - line 1011 - module logging)
2020-12-13 14:09:35,074 logging              DEBUG                                                >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:35,077 logging              DEBUG                                                <<< Exit  acquire : Return value: None
2020-12-13 14:09:35,079 logging              DEBUG                                                >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:35,082 logging              DEBUG                                                <<< Exit  release : Return value: None
2020-12-13 14:09:35,084 logging              DEBUG                                            <<< Exit  flush : Return value: None
2020-12-13 14:09:35,087 logging              DEBUG                                        <<< Exit  emit : Return value: None
2020-12-13 14:09:35,089 logging              DEBUG                                    <<< Exit  emit : Return value: None
2020-12-13 14:09:35,091 logging              DEBUG                                    >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:35,094 logging              DEBUG                                    <<< Exit  release : Return value: None
2020-12-13 14:09:35,096 logging              DEBUG                                <<< Exit  handle : Return value: True
2020-12-13 14:09:35,098 logging              DEBUG                            <<< Exit  callHandlers : Return value: None
2020-12-13 14:09:35,100 logging              DEBUG                        <<< Exit  handle : Return value: None
2020-12-13 14:09:35,102 logging              DEBUG                    <<< Exit  _log : Return value: None
2020-12-13 14:09:35,104 logging              DEBUG                <<< Exit  debug : Return value: None
2020-12-13 14:09:35,105 logging_plus         DEBUG            <<< Exit  debug : Return value: None
2020-12-13 14:09:35,106 __main__             DEBUG        <<< Exit  func : Return value: 25
2020-12-13 14:09:35,108 logTestMod           DEBUG        >>> Entry __del__ (/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py - line 11 - module logTestMod)
2020-12-13 14:09:35,109 logging_plus         DEBUG            >>> Entry debug (/home/pi/dev/py-logging-plus/logging_plus/__init__.py - line 103 - module logging_plus)
2020-12-13 14:09:35,111 inspect              DEBUG                >>> Entry stack (/usr/lib/python3.7/inspect.py - line 1511 - module inspect)
2020-12-13 14:09:35,112 inspect              DEBUG                    >>> Entry getouterframes (/usr/lib/python3.7/inspect.py - line 1483 - module inspect)
2020-12-13 14:09:35,114 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:35,116 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:35,118 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:35,120 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:35,122 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:35,124 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:35,126 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:35,128 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:35,131 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:35,133 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:35,137 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:35,139 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:35,142 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:35,146 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:35,149 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:35,151 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:35,154 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:35,156 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:35,159 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:35,161 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:35,163 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:35,165 inspect              DEBUG                                <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:35,167 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:35,170 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,172 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:35,174 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,176 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:35,178 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:35,180 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,183 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,185 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,188 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,190 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,193 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,195 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,198 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:35,200 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:35,202 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:35,205 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:35,207 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:35,209 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:35,212 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:35,214 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:35,217 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:35,220 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:35,222 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:35,225 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:35,227 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:35,230 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:35,232 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:35,235 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:35,237 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:35,240 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:35,243 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:35,245 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:35,247 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:35,250 inspect              DEBUG                                    <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:35,252 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:35,254 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,256 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:35,259 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,261 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:35,263 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:35,265 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,267 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,270 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,272 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,274 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,276 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,279 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,281 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:35,283 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:35,285 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:35,287 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:35,289 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:35,291 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:35,293 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:35,295 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:35,298 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:35,300 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module 'logging_plus' from '/home/pi/dev/py-logging-plus/logging_plus/__init__.py'>
2020-12-13 14:09:35,302 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:35,304 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#MIT License\n', '#\n', '#Copyright (c) 2020 signag\n', '#\n', '#Permission is hereby granted, free of charge, to any person obtaining a copy\n', '#of this software and associated documentation files (the "Software"), to deal\n', '#in the Software without restriction, including without limitation the rights\n', '#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '#copies of the Software, and to permit persons to whom the Software is\n', '#furnished to do so, subject to the following conditions:\n', '#\n', '#The above copyright notice and this permission notice shall be included in all\n', '#copies or substantial portions of the Software.\n', '#\n', '#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '#SOFTWARE.\n', '"""\n', '`logging_plus` - Add-on to Python logging\n', '\n', 'This module extends the standard Python logging module for the following aspects:\n', '- Subclassing Logger allows customization of logging messages depending on context\n', '- This is used for automatic indentation depending on call stack level\n', '- The module provides also the capability to generically log function entry and exit\n', '"""\n', 'import logging\n', 'import inspect\n', 'import sys\n', 'import atexit\n', '\n', '#---------------------------------------------------------------------------\n', '#   Miscellaneous module data\n', '#---------------------------------------------------------------------------\n', '#\n', '#This parameter controls whether or not logging inside infrastructure modules is activated.\n', '#The following modules are affected: inspect, logging, logging-plus\n', '#\n', 'noInfrastructureLogging = True\n', '\n', 'class Manager(logging.Manager):\n', '    """\n', '    Subclassing logging.Manager supports instantiating the subclassed Logger\n', '    instead of the standard Logger.\n', '    """\n', '    def __init__(self, rootnode):\n', '        """\n', '        Initialize the manager\n', '        """\n', '        super().__init__(rootnode)\n', '\n', '    def getLogger(self, name):\n', '        """\n', '        Return the subclassed Logger rather than the standard Logger\n', '        """\n', '        rv = None\n', '        if not isinstance(name, str):\n', "            raise TypeError('A logger name must be a string')\n", '        logging._acquireLock()\n', '        try:\n', '            if name in self.loggerDict:\n', '                rv = self.loggerDict[name]\n', '                if isinstance(rv, logging.PlaceHolder):\n', '                    ph = rv\n', '                    rv = (self.loggerClass or _loggerClass)(name)\n', '                    rv.manager = self\n', '                    self.loggerDict[name] = rv\n', '                    self._fixupChildren(ph, rv)\n', '                    self._fixupParents(rv)\n', '            else:\n', '                rv = (self.loggerClass or _loggerClass)(name)\n', '                rv.manager = self\n', '                self.loggerDict[name] = rv\n', '                self._fixupParents(rv)\n', '        finally:\n', '            logging._releaseLock()\n', '        return rv\n', '\n', '    def cleanupLoggers(self):\n', '        """\n', '        Remove registered file handlers from all available loggers\n', '        """\n', '        lgr = root\n', '        for hdl in reversed(lgr.handlers):\n', '            if isinstance(hdl, logging.FileHandler):\n', '                lgr.removeHandler(hdl)\n', '        for lgName in self.loggerDict:\n', '            lgr = self.getLogger(lgName)\n', '            for hdl in lgr.handlers:\n', '                if isinstance(hdl, logging.FileHandler):\n', '                    lgr.removeHandler(hdl)\n', '\n', 'class Logger(logging.Logger):\n', '    def __init__(self, name, level=logging.NOTSET):\n', '        """\n', '        Initialize the subclassed Logger\n', '        """\n', '        super().__init__(name, level)\n', '\n', '    def debug(self, msg, *args, **kwargs):\n', '        """\n', '        Indent DEBUG message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def info(self, msg, *args, **kwargs):\n', '        """\n', '        Indent INFO message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().info(msg, *args, **kwargs)\n', '\n', '    def warning(self, msg, *args, **kwargs):\n', '        """\n', '        Indent WARNING message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().warning(msg, *args, **kwargs)\n', '\n', '    def error(self, msg, *args, **kwargs):\n', '        """\n', '        Indent ERROR message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().error(msg, *args, **kwargs)\n', '\n', '    def logEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def logExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', 'class RootLogger(Logger):\n', '    """\n', '    This is the extended root logger\n', '    """\n', '    def __init__(self, level):\n', '        """\n', '        Initialize the logger with the name "root".\n', '        """\n', '        Logger.__init__(self, "root", level)\n', '\n', '_loggerClass = Logger\n', '\n', '\n', 'root = RootLogger(logging.WARNING)\n', 'Logger.root = root\n', 'Logger.manager = Manager(Logger.root)\n', '\n', 'def getLogger(name=None):\n', '    """\n', '    Return an extended logger with the specified name, creating it if necessary.\n', '\n', '    If no name is specified, return the root logger.\n', '    """\n', '    if not name or isinstance(name, str) and name == root.name:\n', '        return root\n', '    return Logger.manager.getLogger(name)\n', '\n', 'def excludeFromLogging(frame):\n', '    """\n', '    Check whether frame shall be excluded from logging.\n', '\n', '    This is the case if the module of the frame itself or on of its outer frames\n', '    belongs to the inspect or logging infrastructure\n', '    """\n', '    if not frame:\n', '        return False\n', '\n', '    module = inspect.getmodule(frame)\n', '    if not module:\n', '        return False\n', '\n', '    moduleName = module.__name__\n', '\n', '    if (moduleName == "inspect") \\\n', '    or (moduleName == "logging") \\\n', '    or (moduleName == __name__):\n', '        #Do not log inside infrastructure modules\n', '        return True\n', '    else:\n', '        oframe = frame.f_back\n', '        if not oframe:\n', '            return False\n', '        return excludeFromLogging(oframe)\n', '\n', 'def autoLogIgnore(frame, event, arg):\n', '    """\n', '    Function to register as trace function for scopes where logging shall be deactivated.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call'):\n", '        #Only call needs to be sensed       \n', '        return autoLogIgnore\n', '\n', 'def autoLogEntryExit(frame, event, arg):\n', '    """\n', '    Function to register as trace function for the current scope.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call') or (event == 'return'):\n", '        #Only call and return events are sensed\n', '        if not frame:\n', '            return autoLogIgnore\n', '\n', '        code_obj = frame.f_code\n', '        func_name = code_obj.co_name\n', '        file_name = code_obj.co_filename\n', '        file_line = code_obj.co_firstlineno\n', '\n', '        module = inspect.getmodule(frame)\n', '        if not module:\n', '            return autoLogIgnore\n', '\n', '        moduleName = module.__name__\n', '\n', "        if event == 'call':\n", '            #System has been entering a new scope.\n', '            if noInfrastructureLogging:\n', '                if excludeFromLogging(frame):\n', '                    return autoLogIgnore\n', '\n', "            getLogger(moduleName).autoLogEntry('%s (%s - line %s - module %s)', func_name, file_name, file_line, moduleName)\n", '            #The function returns a reference to itself, in order to register itself as trace functuion for the new scope\n', '            return autoLogEntryExit\n', "        elif event == 'return':\n", '            #System is about to exit a scope (function or other code block). arg is the value being returned.\n', "            getLogger(moduleName).autoLogExit ('%s : Return value: %s', func_name, arg)\n", '\n', 'def removeFileHandlers():\n', '    """This function removes file handlers from available loggers in order to avoid a race condition during shutdown\n', '    The Python shutdown sequence is as follows:\n', '    1. Stop main thread\n', '    2. Close open file handlers\n', '    3. Wait for termination of non-daemon threads\n', '    4. Execute registered atexit functions\n', '    5. Garbage collection\n', '    6. Process termination\n', '\n', '    If class __del__ functions include logging with file handlers, and if ojects are destroyed \n', '    during garbage collection (5), file output will lead to an exception \n', '    because open file handlers have already been closed (2).\n', '    \n', '    Note: This applies only to explicit logging within the __del__ functions.\n', '    Automatic logging of entry and exit has already been switched off at this time \n', '    through unregisterAutoLogEntryExit.\n', '    """\n', '    mgr = getLogger().manager\n', '    mgr.cleanupLoggers()\n', '\n', 'def registerAutoLogEntryExit():\n', '    """\n', '    Register autoLogEntryExit as system trace function\n', '\n', '    This will issue logging whenever a function scope is entered or exited\n', '    """\n', '    sys.settrace(autoLogEntryExit)\n', '\n', 'def unregisterAutoLogEntryExit():\n', '    """\n', '    Clear system trace function\n', '\n', '    This will stop logging function entry / exit\n', '    """\n', '    sys.settrace(None)\n', '\n', '#Register unregisterAutoLogEntryExit to avoid logging exceptions during module shutdown\n', 'atexit.register(removeFileHandlers)\n', 'atexit.register(unregisterAutoLogEntryExit)\n']
2020-12-13 14:09:35,307 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:35,309 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:35,311 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:35,313 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:35,315 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:35,317 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:35,319 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:35,322 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:35,324 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:35,326 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:35,328 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:35,330 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:35,332 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:35,334 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:35,336 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:35,338 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:35,340 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:35,342 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:35,344 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#MIT License\n', '#\n', '#Copyright (c) 2020 signag\n', '#\n', '#Permission is hereby granted, free of charge, to any person obtaining a copy\n', '#of this software and associated documentation files (the "Software"), to deal\n', '#in the Software without restriction, including without limitation the rights\n', '#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '#copies of the Software, and to permit persons to whom the Software is\n', '#furnished to do so, subject to the following conditions:\n', '#\n', '#The above copyright notice and this permission notice shall be included in all\n', '#copies or substantial portions of the Software.\n', '#\n', '#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '#SOFTWARE.\n', '"""\n', '`logging_plus` - Add-on to Python logging\n', '\n', 'This module extends the standard Python logging module for the following aspects:\n', '- Subclassing Logger allows customization of logging messages depending on context\n', '- This is used for automatic indentation depending on call stack level\n', '- The module provides also the capability to generically log function entry and exit\n', '"""\n', 'import logging\n', 'import inspect\n', 'import sys\n', 'import atexit\n', '\n', '#---------------------------------------------------------------------------\n', '#   Miscellaneous module data\n', '#---------------------------------------------------------------------------\n', '#\n', '#This parameter controls whether or not logging inside infrastructure modules is activated.\n', '#The following modules are affected: inspect, logging, logging-plus\n', '#\n', 'noInfrastructureLogging = True\n', '\n', 'class Manager(logging.Manager):\n', '    """\n', '    Subclassing logging.Manager supports instantiating the subclassed Logger\n', '    instead of the standard Logger.\n', '    """\n', '    def __init__(self, rootnode):\n', '        """\n', '        Initialize the manager\n', '        """\n', '        super().__init__(rootnode)\n', '\n', '    def getLogger(self, name):\n', '        """\n', '        Return the subclassed Logger rather than the standard Logger\n', '        """\n', '        rv = None\n', '        if not isinstance(name, str):\n', "            raise TypeError('A logger name must be a string')\n", '        logging._acquireLock()\n', '        try:\n', '            if name in self.loggerDict:\n', '                rv = self.loggerDict[name]\n', '                if isinstance(rv, logging.PlaceHolder):\n', '                    ph = rv\n', '                    rv = (self.loggerClass or _loggerClass)(name)\n', '                    rv.manager = self\n', '                    self.loggerDict[name] = rv\n', '                    self._fixupChildren(ph, rv)\n', '                    self._fixupParents(rv)\n', '            else:\n', '                rv = (self.loggerClass or _loggerClass)(name)\n', '                rv.manager = self\n', '                self.loggerDict[name] = rv\n', '                self._fixupParents(rv)\n', '        finally:\n', '            logging._releaseLock()\n', '        return rv\n', '\n', '    def cleanupLoggers(self):\n', '        """\n', '        Remove registered file handlers from all available loggers\n', '        """\n', '        lgr = root\n', '        for hdl in reversed(lgr.handlers):\n', '            if isinstance(hdl, logging.FileHandler):\n', '                lgr.removeHandler(hdl)\n', '        for lgName in self.loggerDict:\n', '            lgr = self.getLogger(lgName)\n', '            for hdl in lgr.handlers:\n', '                if isinstance(hdl, logging.FileHandler):\n', '                    lgr.removeHandler(hdl)\n', '\n', 'class Logger(logging.Logger):\n', '    def __init__(self, name, level=logging.NOTSET):\n', '        """\n', '        Initialize the subclassed Logger\n', '        """\n', '        super().__init__(name, level)\n', '\n', '    def debug(self, msg, *args, **kwargs):\n', '        """\n', '        Indent DEBUG message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def info(self, msg, *args, **kwargs):\n', '        """\n', '        Indent INFO message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().info(msg, *args, **kwargs)\n', '\n', '    def warning(self, msg, *args, **kwargs):\n', '        """\n', '        Indent WARNING message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().warning(msg, *args, **kwargs)\n', '\n', '    def error(self, msg, *args, **kwargs):\n', '        """\n', '        Indent ERROR message according to call stack level before logging\n', '        """\n', '        indent = len(inspect.stack()) - 1\n', '        msg = "    " * indent + msg\n', '        super().error(msg, *args, **kwargs)\n', '\n', '    def logEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogEntry(self, msg, *args, **kwargs):\n', '        """\n', '        Log function entry with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + ">>> Entry " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def logExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity\n', '        """\n', '        indent = len(inspect.stack()) - 2\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', '    def autoLogExit(self, msg, *args, **kwargs):\n', '        """\n', '        Log function exit with DEBUG sverity in case of automatic logging\n', '        """\n', '        indent = len(inspect.stack()) - 3\n', '        if indent < 0:\n', '            indent = 0\n', '        msg =  "    " * indent + "<<< Exit  " + msg\n', '        super().debug(msg, *args, **kwargs)\n', '\n', 'class RootLogger(Logger):\n', '    """\n', '    This is the extended root logger\n', '    """\n', '    def __init__(self, level):\n', '        """\n', '        Initialize the logger with the name "root".\n', '        """\n', '        Logger.__init__(self, "root", level)\n', '\n', '_loggerClass = Logger\n', '\n', '\n', 'root = RootLogger(logging.WARNING)\n', 'Logger.root = root\n', 'Logger.manager = Manager(Logger.root)\n', '\n', 'def getLogger(name=None):\n', '    """\n', '    Return an extended logger with the specified name, creating it if necessary.\n', '\n', '    If no name is specified, return the root logger.\n', '    """\n', '    if not name or isinstance(name, str) and name == root.name:\n', '        return root\n', '    return Logger.manager.getLogger(name)\n', '\n', 'def excludeFromLogging(frame):\n', '    """\n', '    Check whether frame shall be excluded from logging.\n', '\n', '    This is the case if the module of the frame itself or on of its outer frames\n', '    belongs to the inspect or logging infrastructure\n', '    """\n', '    if not frame:\n', '        return False\n', '\n', '    module = inspect.getmodule(frame)\n', '    if not module:\n', '        return False\n', '\n', '    moduleName = module.__name__\n', '\n', '    if (moduleName == "inspect") \\\n', '    or (moduleName == "logging") \\\n', '    or (moduleName == __name__):\n', '        #Do not log inside infrastructure modules\n', '        return True\n', '    else:\n', '        oframe = frame.f_back\n', '        if not oframe:\n', '            return False\n', '        return excludeFromLogging(oframe)\n', '\n', 'def autoLogIgnore(frame, event, arg):\n', '    """\n', '    Function to register as trace function for scopes where logging shall be deactivated.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call'):\n", '        #Only call needs to be sensed       \n', '        return autoLogIgnore\n', '\n', 'def autoLogEntryExit(frame, event, arg):\n', '    """\n', '    Function to register as trace function for the current scope.\n', '\n', "    The function is used to log entry to a new scope ('call') or exit from a scope ('return').\n", '    """\n', '\n', "    if (event == 'call') or (event == 'return'):\n", '        #Only call and return events are sensed\n', '        if not frame:\n', '            return autoLogIgnore\n', '\n', '        code_obj = frame.f_code\n', '        func_name = code_obj.co_name\n', '        file_name = code_obj.co_filename\n', '        file_line = code_obj.co_firstlineno\n', '\n', '        module = inspect.getmodule(frame)\n', '        if not module:\n', '            return autoLogIgnore\n', '\n', '        moduleName = module.__name__\n', '\n', "        if event == 'call':\n", '            #System has been entering a new scope.\n', '            if noInfrastructureLogging:\n', '                if excludeFromLogging(frame):\n', '                    return autoLogIgnore\n', '\n', "            getLogger(moduleName).autoLogEntry('%s (%s - line %s - module %s)', func_name, file_name, file_line, moduleName)\n", '            #The function returns a reference to itself, in order to register itself as trace functuion for the new scope\n', '            return autoLogEntryExit\n', "        elif event == 'return':\n", '            #System is about to exit a scope (function or other code block). arg is the value being returned.\n', "            getLogger(moduleName).autoLogExit ('%s : Return value: %s', func_name, arg)\n", '\n', 'def removeFileHandlers():\n', '    """This function removes file handlers from available loggers in order to avoid a race condition during shutdown\n', '    The Python shutdown sequence is as follows:\n', '    1. Stop main thread\n', '    2. Close open file handlers\n', '    3. Wait for termination of non-daemon threads\n', '    4. Execute registered atexit functions\n', '    5. Garbage collection\n', '    6. Process termination\n', '\n', '    If class __del__ functions include logging with file handlers, and if ojects are destroyed \n', '    during garbage collection (5), file output will lead to an exception \n', '    because open file handlers have already been closed (2).\n', '    \n', '    Note: This applies only to explicit logging within the __del__ functions.\n', '    Automatic logging of entry and exit has already been switched off at this time \n', '    through unregisterAutoLogEntryExit.\n', '    """\n', '    mgr = getLogger().manager\n', '    mgr.cleanupLoggers()\n', '\n', 'def registerAutoLogEntryExit():\n', '    """\n', '    Register autoLogEntryExit as system trace function\n', '\n', '    This will issue logging whenever a function scope is entered or exited\n', '    """\n', '    sys.settrace(autoLogEntryExit)\n', '\n', 'def unregisterAutoLogEntryExit():\n', '    """\n', '    Clear system trace function\n', '\n', '    This will stop logging function entry / exit\n', '    """\n', '    sys.settrace(None)\n', '\n', '#Register unregisterAutoLogEntryExit to avoid logging exceptions during module shutdown\n', 'atexit.register(removeFileHandlers)\n', 'atexit.register(unregisterAutoLogEntryExit)\n'], 102)
2020-12-13 14:09:35,348 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0)
2020-12-13 14:09:35,350 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:35,352 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:35,354 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:35,356 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:35,358 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:35,360 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:35,362 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:35,365 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:35,367 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:35,370 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:35,372 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:35,374 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:35,376 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:35,379 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:35,381 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:35,384 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:35,386 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:35,388 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:35,390 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:35,392 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:35,394 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:35,396 inspect              DEBUG                                <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:35,399 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:35,401 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,403 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:35,405 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,407 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:35,409 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:35,412 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,414 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,416 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,418 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,420 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,422 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,424 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,426 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:35,429 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:35,431 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:35,433 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:35,434 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:35,436 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:35,439 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:35,441 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:35,443 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:35,445 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:35,448 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:35,450 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:35,452 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:35,454 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:35,457 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:35,459 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:35,462 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:35,464 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:35,466 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:35,469 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:35,471 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:35,473 inspect              DEBUG                                    <<< Exit  getfile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:35,475 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:35,477 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,480 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:35,482 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,484 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:35,486 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:35,488 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,491 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,493 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,495 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,497 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,500 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,502 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,504 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:35,506 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:35,508 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:35,510 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: /home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py
2020-12-13 14:09:35,513 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:35,515 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:35,517 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:35,519 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:35,522 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:35,524 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module 'logTestMod' from '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py'>
2020-12-13 14:09:35,526 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:35,528 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#!/usr/bin/python3\n', '\n', 'from context import logging_plus\n', 'logger = logging_plus.getLogger(__name__)\n', '\n', 'class MyClass:\n', '    def __init__(self):\n', '        self.__status = 1\n', '        logger.debug("## Explicit log: A - Initializing MyClass")\n', '        \n', '    def __del__(self):\n', '        logger.debug("## Explicit log: B - Finalizing MyClass")\n', '\n', '    @property\n', '    def status(self):\n', '        logger.debug("## Explicit log: C - getter of MyClass")\n', '        return self.__status\n', '\n', '    @status.setter\n', '    def status(self, value):\n', '        logger.debug("## Explicit log: D - setter of MyClass")\n', '        self.__status = value\n', '\n', '    def doSomething(self):\n', '        logger.debug("## Explicit log: E - MyClass method call")\n', '\n', 'class MySpecialClass(MyClass):\n', '    def __init__(self):\n', '        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n', '        super().__init__()\n', '\n', '    def __del__(self):\n', '        logger.debug("## Explicit log: G - Finalizing subclass MySpecialClass(MyClass)")\n', '        super().__del__()\n']
2020-12-13 14:09:35,531 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:35,533 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:35,535 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:35,537 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:35,539 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:35,541 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:35,543 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:35,545 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:35,547 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:35,549 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:35,551 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:35,553 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:35,555 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:35,557 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:35,559 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:35,561 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:35,563 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:35,565 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:35,567 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#!/usr/bin/python3\n', '\n', 'from context import logging_plus\n', 'logger = logging_plus.getLogger(__name__)\n', '\n', 'class MyClass:\n', '    def __init__(self):\n', '        self.__status = 1\n', '        logger.debug("## Explicit log: A - Initializing MyClass")\n', '        \n', '    def __del__(self):\n', '        logger.debug("## Explicit log: B - Finalizing MyClass")\n', '\n', '    @property\n', '    def status(self):\n', '        logger.debug("## Explicit log: C - getter of MyClass")\n', '        return self.__status\n', '\n', '    @status.setter\n', '    def status(self, value):\n', '        logger.debug("## Explicit log: D - setter of MyClass")\n', '        self.__status = value\n', '\n', '    def doSomething(self):\n', '        logger.debug("## Explicit log: E - MyClass method call")\n', '\n', 'class MySpecialClass(MyClass):\n', '    def __init__(self):\n', '        logger.debug("## Explicit log: F - Initializing subclass MySpecialClass(MyClass)")\n', '        super().__init__()\n', '\n', '    def __del__(self):\n', '        logger.debug("## Explicit log: G - Finalizing subclass MySpecialClass(MyClass)")\n', '        super().__del__()\n'], 10)
2020-12-13 14:09:35,570 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=12, function='__del__', code_context=['        logger.debug("## Explicit log: B - Finalizing MyClass")\n'], index=0)
2020-12-13 14:09:35,573 inspect              DEBUG                        >>> Entry getframeinfo (/usr/lib/python3.7/inspect.py - line 1444 - module inspect)
2020-12-13 14:09:35,575 inspect              DEBUG                            >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:35,577 inspect              DEBUG                            <<< Exit  istraceback : Return value: False
2020-12-13 14:09:35,578 inspect              DEBUG                            >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:35,580 inspect              DEBUG                            <<< Exit  isframe : Return value: True
2020-12-13 14:09:35,582 inspect              DEBUG                            >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:35,584 inspect              DEBUG                                >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:35,587 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:35,589 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:35,591 inspect              DEBUG                                    >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:35,593 inspect              DEBUG                                    <<< Exit  isclass : Return value: False
2020-12-13 14:09:35,595 inspect              DEBUG                                    >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:35,598 inspect              DEBUG                                    <<< Exit  ismethod : Return value: False
2020-12-13 14:09:35,600 inspect              DEBUG                                    >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:35,602 inspect              DEBUG                                    <<< Exit  isfunction : Return value: False
2020-12-13 14:09:35,604 inspect              DEBUG                                    >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:35,606 inspect              DEBUG                                    <<< Exit  istraceback : Return value: False
2020-12-13 14:09:35,608 inspect              DEBUG                                    >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:35,610 inspect              DEBUG                                    <<< Exit  isframe : Return value: True
2020-12-13 14:09:35,612 inspect              DEBUG                                    >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:35,615 inspect              DEBUG                                    <<< Exit  iscode : Return value: True
2020-12-13 14:09:35,617 inspect              DEBUG                                <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:35,619 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:35,621 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,623 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:35,625 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,627 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:35,629 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:35,632 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,634 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,636 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,638 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,640 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,642 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,644 inspect              DEBUG                                >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,646 inspect              DEBUG                                <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:35,648 genericpath          DEBUG                                >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:35,651 genericpath          DEBUG                                <<< Exit  exists : Return value: True
2020-12-13 14:09:35,652 inspect              DEBUG                            <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:35,654 inspect              DEBUG                            >>> Entry findsource (/usr/lib/python3.7/inspect.py - line 760 - module inspect)
2020-12-13 14:09:35,656 inspect              DEBUG                                >>> Entry getsourcefile (/usr/lib/python3.7/inspect.py - line 680 - module inspect)
2020-12-13 14:09:35,659 inspect              DEBUG                                    >>> Entry getfile (/usr/lib/python3.7/inspect.py - line 642 - module inspect)
2020-12-13 14:09:35,661 inspect              DEBUG                                        >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:35,663 inspect              DEBUG                                        <<< Exit  ismodule : Return value: False
2020-12-13 14:09:35,665 inspect              DEBUG                                        >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:35,667 inspect              DEBUG                                        <<< Exit  isclass : Return value: False
2020-12-13 14:09:35,670 inspect              DEBUG                                        >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:35,672 inspect              DEBUG                                        <<< Exit  ismethod : Return value: False
2020-12-13 14:09:35,674 inspect              DEBUG                                        >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:35,677 inspect              DEBUG                                        <<< Exit  isfunction : Return value: False
2020-12-13 14:09:35,679 inspect              DEBUG                                        >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:35,681 inspect              DEBUG                                        <<< Exit  istraceback : Return value: False
2020-12-13 14:09:35,683 inspect              DEBUG                                        >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:35,686 inspect              DEBUG                                        <<< Exit  isframe : Return value: True
2020-12-13 14:09:35,688 inspect              DEBUG                                        >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:35,691 inspect              DEBUG                                        <<< Exit  iscode : Return value: True
2020-12-13 14:09:35,693 inspect              DEBUG                                    <<< Exit  getfile : Return value: logTest.py
2020-12-13 14:09:35,695 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:35,697 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,699 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:35,702 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,704 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 687 - module inspect)
2020-12-13 14:09:35,706 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:35,708 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,710 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,713 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,715 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,717 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,719 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: False
2020-12-13 14:09:35,722 inspect              DEBUG                                    >>> Entry <genexpr> (/usr/lib/python3.7/inspect.py - line 690 - module inspect)
2020-12-13 14:09:35,724 inspect              DEBUG                                    <<< Exit  <genexpr> : Return value: None
2020-12-13 14:09:35,726 genericpath          DEBUG                                    >>> Entry exists (/usr/lib/python3.7/genericpath.py - line 16 - module genericpath)
2020-12-13 14:09:35,728 genericpath          DEBUG                                    <<< Exit  exists : Return value: True
2020-12-13 14:09:35,731 inspect              DEBUG                                <<< Exit  getsourcefile : Return value: logTest.py
2020-12-13 14:09:35,733 linecache            DEBUG                                >>> Entry checkcache (/usr/lib/python3.7/linecache.py - line 53 - module linecache)
2020-12-13 14:09:35,735 linecache            DEBUG                                <<< Exit  checkcache : Return value: None
2020-12-13 14:09:35,737 inspect              DEBUG                                >>> Entry getmodule (/usr/lib/python3.7/inspect.py - line 714 - module inspect)
2020-12-13 14:09:35,739 inspect              DEBUG                                    >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:35,741 inspect              DEBUG                                    <<< Exit  ismodule : Return value: False
2020-12-13 14:09:35,743 inspect              DEBUG                                    >>> Entry getabsfile (/usr/lib/python3.7/inspect.py - line 702 - module inspect)
2020-12-13 14:09:35,746 posixpath            DEBUG                                        >>> Entry abspath (/usr/lib/python3.7/posixpath.py - line 376 - module posixpath)
2020-12-13 14:09:35,748 posixpath            DEBUG                                            >>> Entry isabs (/usr/lib/python3.7/posixpath.py - line 64 - module posixpath)
2020-12-13 14:09:35,751 posixpath            DEBUG                                                >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:35,753 posixpath            DEBUG                                                <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:35,755 posixpath            DEBUG                                            <<< Exit  isabs : Return value: False
2020-12-13 14:09:35,758 posixpath            DEBUG                                            >>> Entry join (/usr/lib/python3.7/posixpath.py - line 75 - module posixpath)
2020-12-13 14:09:35,760 posixpath            DEBUG                                                >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:35,763 posixpath            DEBUG                                                <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:35,765 posixpath            DEBUG                                            <<< Exit  join : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:35,768 posixpath            DEBUG                                            >>> Entry normpath (/usr/lib/python3.7/posixpath.py - line 338 - module posixpath)
2020-12-13 14:09:35,770 posixpath            DEBUG                                            <<< Exit  normpath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:35,772 posixpath            DEBUG                                        <<< Exit  abspath : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:35,775 posixpath            DEBUG                                        >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:35,777 posixpath            DEBUG                                        <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:35,779 inspect              DEBUG                                    <<< Exit  getabsfile : Return value: /home/pi/dev/py-logging-plus/tests/logTest.py
2020-12-13 14:09:35,781 inspect              DEBUG                                <<< Exit  getmodule : Return value: <module '__main__' from 'logTest.py'>
2020-12-13 14:09:35,783 linecache            DEBUG                                >>> Entry getlines (/usr/lib/python3.7/linecache.py - line 37 - module linecache)
2020-12-13 14:09:35,785 linecache            DEBUG                                <<< Exit  getlines : Return value: ['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n']
2020-12-13 14:09:35,788 inspect              DEBUG                                >>> Entry ismodule (/usr/lib/python3.7/inspect.py - line 63 - module inspect)
2020-12-13 14:09:35,790 inspect              DEBUG                                <<< Exit  ismodule : Return value: False
2020-12-13 14:09:35,792 inspect              DEBUG                                >>> Entry isclass (/usr/lib/python3.7/inspect.py - line 72 - module inspect)
2020-12-13 14:09:35,794 inspect              DEBUG                                <<< Exit  isclass : Return value: False
2020-12-13 14:09:35,796 inspect              DEBUG                                >>> Entry ismethod (/usr/lib/python3.7/inspect.py - line 80 - module inspect)
2020-12-13 14:09:35,798 inspect              DEBUG                                <<< Exit  ismethod : Return value: False
2020-12-13 14:09:35,800 inspect              DEBUG                                >>> Entry isfunction (/usr/lib/python3.7/inspect.py - line 158 - module inspect)
2020-12-13 14:09:35,802 inspect              DEBUG                                <<< Exit  isfunction : Return value: False
2020-12-13 14:09:35,804 inspect              DEBUG                                >>> Entry istraceback (/usr/lib/python3.7/inspect.py - line 228 - module inspect)
2020-12-13 14:09:35,806 inspect              DEBUG                                <<< Exit  istraceback : Return value: False
2020-12-13 14:09:35,808 inspect              DEBUG                                >>> Entry isframe (/usr/lib/python3.7/inspect.py - line 238 - module inspect)
2020-12-13 14:09:35,810 inspect              DEBUG                                <<< Exit  isframe : Return value: True
2020-12-13 14:09:35,812 inspect              DEBUG                                >>> Entry iscode (/usr/lib/python3.7/inspect.py - line 252 - module inspect)
2020-12-13 14:09:35,814 inspect              DEBUG                                <<< Exit  iscode : Return value: True
2020-12-13 14:09:35,816 re                   DEBUG                                >>> Entry compile (/usr/lib/python3.7/re.py - line 232 - module re)
2020-12-13 14:09:35,819 re                   DEBUG                                    >>> Entry _compile (/usr/lib/python3.7/re.py - line 271 - module re)
2020-12-13 14:09:35,821 re                   DEBUG                                    <<< Exit  _compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:35,823 re                   DEBUG                                <<< Exit  compile : Return value: re.compile('^(\\s*def\\s)|(\\s*async\\s+def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')
2020-12-13 14:09:35,825 inspect              DEBUG                            <<< Exit  findsource : Return value: (['#!/usr/bin/python3\n', '"""\n', 'Test program for testing logging_plus\n', '"""\n', '\n', 'import logging\n', '#logging_plus must be imported instead of or in addition to logging\n', 'from context import logging_plus\n', '\n', 'import logTestMod\n', '\n', '#A logger used for logging must be instantiated from logging_plus rather than logging\n', '#Handlers and formatters are instantiated from standard logging\n', 'logger = logging_plus.getLogger()\n', 'mlogger = logging_plus.getLogger(logTestMod.__name__)\n', 'handler = logging.StreamHandler()\n', 'fhandler = logging.FileHandler("./logTestFull.log","w")\n', "formatter = logging.Formatter('%(asctime)s %(name)-20s %(levelname)-8s %(message)s')\n", 'handler.setFormatter(formatter)\n', 'fhandler.setFormatter(formatter)\n', 'logger.addHandler(handler)\n', 'logger.addHandler(fhandler)\n', 'logger.setLevel(logging.DEBUG)\n', 'mlogger.setLevel(logging.DEBUG)\n', '\n', '#The following statement activates automatic logging of function entry and exit\n', 'logging_plus.registerAutoLogEntryExit()\n', '\n', '#The following statement activates logging also in modules logging, logging_plus and inspect\n', '#Uncomment the following line, if required\n', 'logging_plus.noInfrastructureLogging = False\n', '\n', '\n', 'def func(x):\n', '    y = x * x\n', '    logger.debug("## Explicit log: %s ** 2 = %s", x, y)\n', '    return y\n', '\n', 'logger.debug("## Explicit log: Start")\n', 'z = logTestMod.MyClass()\n', 'x = logTestMod.MySpecialClass()\n', 'y = x.status\n', 'x.status = 4\n', 'x.doSomething()\n', 'func(5)\n', '\n', '#Uncommenting the following line causes z to be finalized explicitely\n', 'del z\n', '\n', '#Commenting the following line causes x to be finalized by garbage collection.\n', '#del x\n'], 0)
2020-12-13 14:09:35,827 inspect              DEBUG                        <<< Exit  getframeinfo : Return value: Traceback(filename='logTest.py', lineno=48, function='<module>', code_context=['del z\n'], index=0)
2020-12-13 14:09:35,830 inspect              DEBUG                    <<< Exit  getouterframes : Return value: [FrameInfo(frame=<frame at 0x7fb12c43e8, file '/home/pi/dev/py-logging-plus/logging_plus/__init__.py', line 107, code debug>, filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0), FrameInfo(frame=<frame at 0x14b9548, file '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', line 12, code __del__>, filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=12, function='__del__', code_context=['        logger.debug("## Explicit log: B - Finalizing MyClass")\n'], index=0), FrameInfo(frame=<frame at 0x7fb15c19f8, file 'logTest.py', line 48, code <module>>, filename='logTest.py', lineno=48, function='<module>', code_context=['del z\n'], index=0)]
2020-12-13 14:09:35,832 inspect              DEBUG                <<< Exit  stack : Return value: [FrameInfo(frame=<frame at 0x7fb12c43e8, file '/home/pi/dev/py-logging-plus/logging_plus/__init__.py', line 107, code debug>, filename='/home/pi/dev/py-logging-plus/logging_plus/__init__.py', lineno=107, function='debug', code_context=['        indent = len(inspect.stack()) - 1\n'], index=0), FrameInfo(frame=<frame at 0x14b9548, file '/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', line 12, code __del__>, filename='/home/pi/dev/py-logging-plus/tests/logTestMod/__init__.py', lineno=12, function='__del__', code_context=['        logger.debug("## Explicit log: B - Finalizing MyClass")\n'], index=0), FrameInfo(frame=<frame at 0x7fb15c19f8, file 'logTest.py', line 48, code <module>>, filename='logTest.py', lineno=48, function='<module>', code_context=['del z\n'], index=0)]
2020-12-13 14:09:35,833 logging              DEBUG                >>> Entry debug (/usr/lib/python3.7/logging/__init__.py - line 1361 - module logging)
2020-12-13 14:09:35,835 logging              DEBUG                    >>> Entry isEnabledFor (/usr/lib/python3.7/logging/__init__.py - line 1619 - module logging)
2020-12-13 14:09:35,837 logging              DEBUG                    <<< Exit  isEnabledFor : Return value: True
2020-12-13 14:09:35,839 logging              DEBUG                    >>> Entry _log (/usr/lib/python3.7/logging/__init__.py - line 1496 - module logging)
2020-12-13 14:09:35,841 logging              DEBUG                        >>> Entry findCaller (/usr/lib/python3.7/logging/__init__.py - line 1451 - module logging)
2020-12-13 14:09:35,843 logging              DEBUG                            >>> Entry <lambda> (/usr/lib/python3.7/logging/__init__.py - line 154 - module logging)
2020-12-13 14:09:35,845 logging              DEBUG                            <<< Exit  <lambda> : Return value: <frame at 0x14aba88, file '/usr/lib/python3.7/logging/__init__.py', line 1371, code debug>
2020-12-13 14:09:35,847 posixpath            DEBUG                            >>> Entry normcase (/usr/lib/python3.7/posixpath.py - line 52 - module posixpath)
2020-12-13 14:09:35,849 posixpath            DEBUG                            <<< Exit  normcase : Return value: /home/pi/dev/py-logging-plus/logging_plus/__init__.py
2020-12-13 14:09:35,851 logging              DEBUG                        <<< Exit  findCaller : Return value: ('/home/pi/dev/py-logging-plus/logging_plus/__init__.py', 109, 'debug', None)
2020-12-13 14:09:35,852 logging              DEBUG                        >>> Entry makeRecord (/usr/lib/python3.7/logging/__init__.py - line 1481 - module logging)
2020-12-13 14:09:35,854 logging              DEBUG                            >>> Entry __init__ (/usr/lib/python3.7/logging/__init__.py - line 293 - module logging)
2020-12-13 14:09:35,856 logging              DEBUG                                >>> Entry getLevelName (/usr/lib/python3.7/logging/__init__.py - line 117 - module logging)
2020-12-13 14:09:35,859 logging              DEBUG                                <<< Exit  getLevelName : Return value: DEBUG
2020-12-13 14:09:35,861 posixpath            DEBUG                                >>> Entry basename (/usr/lib/python3.7/posixpath.py - line 144 - module posixpath)
2020-12-13 14:09:35,863 posixpath            DEBUG                                    >>> Entry _get_sep (/usr/lib/python3.7/posixpath.py - line 41 - module posixpath)
2020-12-13 14:09:35,865 posixpath            DEBUG                                    <<< Exit  _get_sep : Return value: /
2020-12-13 14:09:35,867 posixpath            DEBUG                                <<< Exit  basename : Return value: __init__.py
2020-12-13 14:09:35,869 posixpath            DEBUG                                >>> Entry splitext (/usr/lib/python3.7/posixpath.py - line 121 - module posixpath)
2020-12-13 14:09:35,871 genericpath          DEBUG                                    >>> Entry _splitext (/usr/lib/python3.7/genericpath.py - line 117 - module genericpath)
2020-12-13 14:09:35,873 genericpath          DEBUG                                    <<< Exit  _splitext : Return value: ('__init__', '.py')
2020-12-13 14:09:35,875 posixpath            DEBUG                                <<< Exit  splitext : Return value: ('__init__', '.py')
2020-12-13 14:09:35,877 threading            DEBUG                                >>> Entry current_thread (/usr/lib/python3.7/threading.py - line 1214 - module threading)
2020-12-13 14:09:35,879 threading            DEBUG                                <<< Exit  current_thread : Return value: <_MainThread(MainThread, started 548443516944)>
2020-12-13 14:09:35,882 threading            DEBUG                                >>> Entry name (/usr/lib/python3.7/threading.py - line 1052 - module threading)
2020-12-13 14:09:35,884 threading            DEBUG                                <<< Exit  name : Return value: MainThread
2020-12-13 14:09:35,885 logging              DEBUG                            <<< Exit  __init__ : Return value: None
2020-12-13 14:09:35,887 logging              DEBUG                        <<< Exit  makeRecord : Return value: <LogRecord: logTestMod, 10, /home/pi/dev/py-logging-plus/logging_plus/__init__.py, 109, "        ## Explicit log: B - Finalizing MyClass">
2020-12-13 14:09:35,889 logging              DEBUG                        >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 1521 - module logging)
2020-12-13 14:09:35,891 logging              DEBUG                            >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:35,893 logging              DEBUG                            <<< Exit  filter : Return value: True
2020-12-13 14:09:35,895 logging              DEBUG                            >>> Entry callHandlers (/usr/lib/python3.7/logging/__init__.py - line 1575 - module logging)
2020-12-13 14:09:35,897 logging              DEBUG                                >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 892 - module logging)
2020-12-13 14:09:35,900 logging              DEBUG                                    >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:35,902 logging              DEBUG                                    <<< Exit  filter : Return value: True
2020-12-13 14:09:35,904 logging              DEBUG                                    >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:35,906 logging              DEBUG                                    <<< Exit  acquire : Return value: None
2020-12-13 14:09:35,908 logging              DEBUG                                    >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1022 - module logging)
2020-12-13 14:09:35,910 logging              DEBUG                                        >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 869 - module logging)
2020-12-13 14:09:35,913 logging              DEBUG                                            >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 606 - module logging)
2020-12-13 14:09:35,915 logging              DEBUG                                                >>> Entry getMessage (/usr/lib/python3.7/logging/__init__.py - line 371 - module logging)
2020-12-13 14:09:35,918 logging              DEBUG                                                <<< Exit  getMessage : Return value:         ## Explicit log: B - Finalizing MyClass
2020-12-13 14:09:35,920 logging              DEBUG                                                >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 584 - module logging)
2020-12-13 14:09:35,923 logging              DEBUG                                                    >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 429 - module logging)
2020-12-13 14:09:35,926 logging              DEBUG                                                    <<< Exit  usesTime : Return value: True
2020-12-13 14:09:35,928 logging              DEBUG                                                <<< Exit  usesTime : Return value: True
2020-12-13 14:09:35,931 logging              DEBUG                                                >>> Entry formatTime (/usr/lib/python3.7/logging/__init__.py - line 539 - module logging)
2020-12-13 14:09:35,933 logging              DEBUG                                                <<< Exit  formatTime : Return value: 2020-12-13 14:09:35,855
2020-12-13 14:09:35,936 logging              DEBUG                                                >>> Entry formatMessage (/usr/lib/python3.7/logging/__init__.py - line 590 - module logging)
2020-12-13 14:09:35,938 logging              DEBUG                                                    >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 432 - module logging)
2020-12-13 14:09:35,941 logging              DEBUG                                                    <<< Exit  format : Return value: 2020-12-13 14:09:35,855 logTestMod           DEBUG            ## Explicit log: B - Finalizing MyClass
2020-12-13 14:09:35,944 logging              DEBUG                                                <<< Exit  formatMessage : Return value: 2020-12-13 14:09:35,855 logTestMod           DEBUG            ## Explicit log: B - Finalizing MyClass
2020-12-13 14:09:35,946 logging              DEBUG                                            <<< Exit  format : Return value: 2020-12-13 14:09:35,855 logTestMod           DEBUG            ## Explicit log: B - Finalizing MyClass
2020-12-13 14:09:35,948 logging              DEBUG                                        <<< Exit  format : Return value: 2020-12-13 14:09:35,855 logTestMod           DEBUG            ## Explicit log: B - Finalizing MyClass
2020-12-13 14:09:35,951 logging              DEBUG                                        >>> Entry flush (/usr/lib/python3.7/logging/__init__.py - line 1011 - module logging)
2020-12-13 14:09:35,953 logging              DEBUG                                            >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:35,956 logging              DEBUG                                            <<< Exit  acquire : Return value: None
2020-12-13 14:09:35,958 logging              DEBUG                                            >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:35,961 logging              DEBUG                                            <<< Exit  release : Return value: None
2020-12-13 14:09:35,963 logging              DEBUG                                        <<< Exit  flush : Return value: None
2020-12-13 14:09:35,965 logging              DEBUG                                    <<< Exit  emit : Return value: None
2020-12-13 14:09:35,967 logging              DEBUG                                    >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:35,969 logging              DEBUG                                    <<< Exit  release : Return value: None
2020-12-13 14:09:35,971 logging              DEBUG                                <<< Exit  handle : Return value: True
2020-12-13 14:09:35,973 logging              DEBUG                                >>> Entry handle (/usr/lib/python3.7/logging/__init__.py - line 892 - module logging)
2020-12-13 14:09:35,975 logging              DEBUG                                    >>> Entry filter (/usr/lib/python3.7/logging/__init__.py - line 747 - module logging)
2020-12-13 14:09:35,978 logging              DEBUG                                    <<< Exit  filter : Return value: True
2020-12-13 14:09:35,980 logging              DEBUG                                    >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:35,982 logging              DEBUG                                    <<< Exit  acquire : Return value: None
2020-12-13 14:09:35,984 logging              DEBUG                                    >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1123 - module logging)
2020-12-13 14:09:35,986 logging              DEBUG                                        >>> Entry emit (/usr/lib/python3.7/logging/__init__.py - line 1022 - module logging)
2020-12-13 14:09:35,989 logging              DEBUG                                            >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 869 - module logging)
2020-12-13 14:09:35,991 logging              DEBUG                                                >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 606 - module logging)
2020-12-13 14:09:35,994 logging              DEBUG                                                    >>> Entry getMessage (/usr/lib/python3.7/logging/__init__.py - line 371 - module logging)
2020-12-13 14:09:35,996 logging              DEBUG                                                    <<< Exit  getMessage : Return value:         ## Explicit log: B - Finalizing MyClass
2020-12-13 14:09:35,999 logging              DEBUG                                                    >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 584 - module logging)
2020-12-13 14:09:36,002 logging              DEBUG                                                        >>> Entry usesTime (/usr/lib/python3.7/logging/__init__.py - line 429 - module logging)
2020-12-13 14:09:36,005 logging              DEBUG                                                        <<< Exit  usesTime : Return value: True
2020-12-13 14:09:36,008 logging              DEBUG                                                    <<< Exit  usesTime : Return value: True
2020-12-13 14:09:36,010 logging              DEBUG                                                    >>> Entry formatTime (/usr/lib/python3.7/logging/__init__.py - line 539 - module logging)
2020-12-13 14:09:36,013 logging              DEBUG                                                    <<< Exit  formatTime : Return value: 2020-12-13 14:09:35,855
2020-12-13 14:09:36,016 logging              DEBUG                                                    >>> Entry formatMessage (/usr/lib/python3.7/logging/__init__.py - line 590 - module logging)
2020-12-13 14:09:36,018 logging              DEBUG                                                        >>> Entry format (/usr/lib/python3.7/logging/__init__.py - line 432 - module logging)
2020-12-13 14:09:36,021 logging              DEBUG                                                        <<< Exit  format : Return value: 2020-12-13 14:09:35,855 logTestMod           DEBUG            ## Explicit log: B - Finalizing MyClass
2020-12-13 14:09:36,024 logging              DEBUG                                                    <<< Exit  formatMessage : Return value: 2020-12-13 14:09:35,855 logTestMod           DEBUG            ## Explicit log: B - Finalizing MyClass
2020-12-13 14:09:36,026 logging              DEBUG                                                <<< Exit  format : Return value: 2020-12-13 14:09:35,855 logTestMod           DEBUG            ## Explicit log: B - Finalizing MyClass
2020-12-13 14:09:36,029 logging              DEBUG                                            <<< Exit  format : Return value: 2020-12-13 14:09:35,855 logTestMod           DEBUG            ## Explicit log: B - Finalizing MyClass
2020-12-13 14:09:35,855 logTestMod           DEBUG            ## Explicit log: B - Finalizing MyClass
2020-12-13 14:09:36,031 logging              DEBUG                                            >>> Entry flush (/usr/lib/python3.7/logging/__init__.py - line 1011 - module logging)
2020-12-13 14:09:36,034 logging              DEBUG                                                >>> Entry acquire (/usr/lib/python3.7/logging/__init__.py - line 849 - module logging)
2020-12-13 14:09:36,036 logging              DEBUG                                                <<< Exit  acquire : Return value: None
2020-12-13 14:09:36,039 logging              DEBUG                                                >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:36,041 logging              DEBUG                                                <<< Exit  release : Return value: None
2020-12-13 14:09:36,043 logging              DEBUG                                            <<< Exit  flush : Return value: None
2020-12-13 14:09:36,046 logging              DEBUG                                        <<< Exit  emit : Return value: None
2020-12-13 14:09:36,048 logging              DEBUG                                    <<< Exit  emit : Return value: None
2020-12-13 14:09:36,050 logging              DEBUG                                    >>> Entry release (/usr/lib/python3.7/logging/__init__.py - line 856 - module logging)
2020-12-13 14:09:36,052 logging              DEBUG                                    <<< Exit  release : Return value: None
2020-12-13 14:09:36,054 logging              DEBUG                                <<< Exit  handle : Return value: True
2020-12-13 14:09:36,056 logging              DEBUG                            <<< Exit  callHandlers : Return value: None
2020-12-13 14:09:36,058 logging              DEBUG                        <<< Exit  handle : Return value: None
2020-12-13 14:09:36,060 logging              DEBUG                    <<< Exit  _log : Return value: None
2020-12-13 14:09:36,062 logging              DEBUG                <<< Exit  debug : Return value: None
2020-12-13 14:09:36,063 logging_plus         DEBUG            <<< Exit  debug : Return value: None
2020-12-13 14:09:36,064 logTestMod           DEBUG        <<< Exit  __del__ : Return value: None
2020-12-13 14:09:36,066 threading            DEBUG    >>> Entry _shutdown (/usr/lib/python3.7/threading.py - line 1263 - module threading)
2020-12-13 14:09:36,067 threading            DEBUG        >>> Entry _stop (/usr/lib/python3.7/threading.py - line 968 - module threading)
2020-12-13 14:09:36,068 threading            DEBUG        <<< Exit  _stop : Return value: None
2020-12-13 14:09:36,069 threading            DEBUG        >>> Entry _pickSomeNonDaemonThread (/usr/lib/python3.7/threading.py - line 1284 - module threading)
2020-12-13 14:09:36,071 threading            DEBUG            >>> Entry enumerate (/usr/lib/python3.7/threading.py - line 1244 - module threading)
2020-12-13 14:09:36,072 threading            DEBUG            <<< Exit  enumerate : Return value: [<_MainThread(MainThread, stopped 548443516944)>]
2020-12-13 14:09:36,073 threading            DEBUG            >>> Entry daemon (/usr/lib/python3.7/threading.py - line 1104 - module threading)
2020-12-13 14:09:36,075 threading            DEBUG            <<< Exit  daemon : Return value: False
2020-12-13 14:09:36,076 threading            DEBUG            >>> Entry is_alive (/usr/lib/python3.7/threading.py - line 1080 - module threading)
2020-12-13 14:09:36,078 threading            DEBUG            <<< Exit  is_alive : Return value: False
2020-12-13 14:09:36,079 threading            DEBUG        <<< Exit  _pickSomeNonDaemonThread : Return value: None
2020-12-13 14:09:36,080 threading            DEBUG    <<< Exit  _shutdown : Return value: None
2020-12-13 14:09:36,081 logging_plus         DEBUG    >>> Entry unregisterAutoLogEntryExit (/home/pi/dev/py-logging-plus/logging_plus/__init__.py - line 305 - module logging_plus)
